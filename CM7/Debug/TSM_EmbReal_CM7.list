
TSM_EmbReal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006648  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080068e0  080068e0  000078e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006918  08006918  000080d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006920  08006920  000080d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006920  08006920  00007920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006924  08006924  00007924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08006928  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006938  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006998  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000688  240000d0  080069f8  000080d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000758  080069f8  00008758  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a255  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c87  00000000  00000000  00022353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001078  00000000  00000000  00024fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000caf  00000000  00000000  00026058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005c09  00000000  00000000  00026d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015afd  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186873  00000000  00000000  0004240d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c8c80  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004590  00000000  00000000  001c8cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  001cd254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080068c8 	.word	0x080068c8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080068c8 	.word	0x080068c8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <cpp_main>:
#include "cpp_main.h"
#include "main.h"

void cpp_main(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0


	while(1){
		HAL_Delay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f000 fd0f 	bl	800111c <HAL_Delay>
 80006fe:	e7fb      	b.n	80006f8 <cpp_main+0x4>

08000700 <cpp_irq>:
	}
}

void cpp_irq() {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000704:	2101      	movs	r1, #1
 8000706:	4802      	ldr	r0, [pc, #8]	@ (8000710 <cpp_irq+0x10>)
 8000708:	f001 fcd9 	bl	80020be <HAL_GPIO_TogglePin>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58020400 	.word	0x58020400

08000714 <EXTI3_IRQHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void EXTI3_IRQHandler(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	HAL_EXTI_D1_ClearFlag(EXTI_LINE3);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 fdab 	bl	8001274 <HAL_EXTI_D1_ClearFlag>
	cpp_irq();
 800071e:	f7ff ffef 	bl	8000700 <cpp_irq>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800072e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000732:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000734:	bf00      	nop
 8000736:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <main+0xbc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d004      	beq.n	800074c <main+0x24>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	dcf4      	bgt.n	8000736 <main+0xe>
  if ( timeout < 0 )
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	da01      	bge.n	8000756 <main+0x2e>
  {
  Error_Handler();
 8000752:	f000 fa13 	bl	8000b7c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fc4f 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f845 	bl	80007e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800075e:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <main+0xbc>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000764:	4a1f      	ldr	r2, [pc, #124]	@ (80007e4 <main+0xbc>)
 8000766:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800076a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800076e:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <main+0xbc>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800077c:	2000      	movs	r0, #0
 800077e:	f001 fcb9 	bl	80020f4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000782:	2100      	movs	r1, #0
 8000784:	2000      	movs	r0, #0
 8000786:	f001 fccf 	bl	8002128 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800078a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800078e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000790:	bf00      	nop
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <main+0xbc>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d104      	bne.n	80007a8 <main+0x80>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dcf4      	bgt.n	8000792 <main+0x6a>
if ( timeout < 0 )
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	da01      	bge.n	80007b2 <main+0x8a>
{
Error_Handler();
 80007ae:	f000 f9e5 	bl	8000b7c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f961 	bl	8000a78 <MX_GPIO_Init>
  MX_ETH_Init();
 80007b6:	f000 f895 	bl	80008e4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007ba:	f000 f8df 	bl	800097c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007be:	f000 f929 	bl	8000a14 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_EXTI_EdgeConfig(EXTI_LINE3, EXTI_RISING_EDGE);
 80007c2:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 80007c6:	2003      	movs	r0, #3
 80007c8:	f000 fcec 	bl	80011a4 <HAL_EXTI_EdgeConfig>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0xFU, 0U);
 80007cc:	2200      	movs	r2, #0
 80007ce:	210f      	movs	r1, #15
 80007d0:	2009      	movs	r0, #9
 80007d2:	f000 fe42 	bl	800145a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007d6:	2009      	movs	r0, #9
 80007d8:	f000 fe59 	bl	800148e <HAL_NVIC_EnableIRQ>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cpp_main();
 80007dc:	f7ff ff8a 	bl	80006f4 <cpp_main>
 80007e0:	e7fc      	b.n	80007dc <main+0xb4>
 80007e2:	bf00      	nop
 80007e4:	58024400 	.word	0x58024400

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09c      	sub	sp, #112	@ 0x70
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f2:	224c      	movs	r2, #76	@ 0x4c
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f006 f839 	bl	800686e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2220      	movs	r2, #32
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f006 f833 	bl	800686e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000808:	2004      	movs	r0, #4
 800080a:	f001 fdd1 	bl	80023b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b32      	ldr	r3, [pc, #200]	@ (80008dc <SystemClock_Config+0xf4>)
 8000814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000816:	4a31      	ldr	r2, [pc, #196]	@ (80008dc <SystemClock_Config+0xf4>)
 8000818:	f023 0301 	bic.w	r3, r3, #1
 800081c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800081e:	4b2f      	ldr	r3, [pc, #188]	@ (80008dc <SystemClock_Config+0xf4>)
 8000820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <SystemClock_Config+0xf8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000830:	4a2b      	ldr	r2, [pc, #172]	@ (80008e0 <SystemClock_Config+0xf8>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <SystemClock_Config+0xf8>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000844:	bf00      	nop
 8000846:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <SystemClock_Config+0xf8>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800084e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000852:	d1f8      	bne.n	8000846 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000854:	2301      	movs	r3, #1
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000858:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	2302      	movs	r3, #2
 8000864:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800086a:	2312      	movs	r3, #18
 800086c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800087a:	230c      	movs	r3, #12
 800087c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800087e:	2302      	movs	r3, #2
 8000880:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000882:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000886:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fdf9 	bl	8002484 <HAL_RCC_OscConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000898:	f000 f970 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089c:	233f      	movs	r3, #63	@ 0x3f
 800089e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a0:	2303      	movs	r3, #3
 80008a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ac:	2340      	movs	r3, #64	@ 0x40
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b0:	2340      	movs	r3, #64	@ 0x40
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ba:	2340      	movs	r3, #64	@ 0x40
 80008bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fa38 	bl	8002d38 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008ce:	f000 f955 	bl	8000b7c <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3770      	adds	r7, #112	@ 0x70
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	58000400 	.word	0x58000400
 80008e0:	58024800 	.word	0x58024800

080008e4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_ETH_Init+0x80>)
 80008ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000968 <MX_ETH_Init+0x84>)
 80008ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ee:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <MX_ETH_Init+0x88>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <MX_ETH_Init+0x88>)
 80008f6:	2280      	movs	r2, #128	@ 0x80
 80008f8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <MX_ETH_Init+0x88>)
 80008fc:	22e1      	movs	r2, #225	@ 0xe1
 80008fe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_ETH_Init+0x88>)
 8000902:	2200      	movs	r2, #0
 8000904:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <MX_ETH_Init+0x88>)
 8000908:	2200      	movs	r2, #0
 800090a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_ETH_Init+0x88>)
 800090e:	2200      	movs	r2, #0
 8000910:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_ETH_Init+0x80>)
 8000914:	4a15      	ldr	r2, [pc, #84]	@ (800096c <MX_ETH_Init+0x88>)
 8000916:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_ETH_Init+0x80>)
 800091a:	2201      	movs	r2, #1
 800091c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_ETH_Init+0x80>)
 8000920:	4a13      	ldr	r2, [pc, #76]	@ (8000970 <MX_ETH_Init+0x8c>)
 8000922:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_ETH_Init+0x80>)
 8000926:	4a13      	ldr	r2, [pc, #76]	@ (8000974 <MX_ETH_Init+0x90>)
 8000928:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_ETH_Init+0x80>)
 800092c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000930:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_ETH_Init+0x80>)
 8000934:	f000 fdc6 	bl	80014c4 <HAL_ETH_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800093e:	f000 f91d 	bl	8000b7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000942:	2238      	movs	r2, #56	@ 0x38
 8000944:	2100      	movs	r1, #0
 8000946:	480c      	ldr	r0, [pc, #48]	@ (8000978 <MX_ETH_Init+0x94>)
 8000948:	f005 ff91 	bl	800686e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_ETH_Init+0x94>)
 800094e:	2221      	movs	r2, #33	@ 0x21
 8000950:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_ETH_Init+0x94>)
 8000954:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000958:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800095a:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_ETH_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000124 	.word	0x24000124
 8000968:	40028000 	.word	0x40028000
 800096c:	2400074c 	.word	0x2400074c
 8000970:	24000070 	.word	0x24000070
 8000974:	24000010 	.word	0x24000010
 8000978:	240000ec 	.word	0x240000ec

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	@ (8000a10 <MX_USART3_UART_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009c6:	f004 fb6f 	bl	80050a8 <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 f8d4 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009d8:	f005 fb77 	bl	80060ca <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f8cb 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ea:	f005 fbac 	bl	8006146 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 f8c2 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_USART3_UART_Init+0x90>)
 80009fa:	f005 fb2d 	bl	8006058 <HAL_UARTEx_DisableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f8ba 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	240001d4 	.word	0x240001d4
 8000a10:	40004800 	.word	0x40004800

08000a14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1a:	4a16      	ldr	r2, [pc, #88]	@ (8000a74 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a20:	2209      	movs	r2, #9
 8000a22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	f001 fb78 	bl	8002150 <HAL_PCD_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a66:	f000 f889 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24000268 	.word	0x24000268
 8000a74:	40080000 	.word	0x40080000

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	@ 0x30
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b39      	ldr	r3, [pc, #228]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a94:	4a37      	ldr	r2, [pc, #220]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9e:	4b35      	ldr	r3, [pc, #212]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aac:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab2:	4a30      	ldr	r2, [pc, #192]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000abc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad0:	4a28      	ldr	r2, [pc, #160]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ada:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aee:	4a21      	ldr	r2, [pc, #132]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b06:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	4a19      	ldr	r2, [pc, #100]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_GPIO_Init+0xfc>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b48:	480b      	ldr	r0, [pc, #44]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000b4a:	f001 fa9f 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b4e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <MX_GPIO_Init+0x100>)
 8000b68:	f001 f8e0 	bl	8001d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3730      	adds	r7, #48	@ 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020400 	.word	0x58020400

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_MspInit+0x30>)
 8000b90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b94:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x30>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_MspInit+0x30>)
 8000ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	58024400 	.word	0x58024400

08000bbc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	@ 0x38
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a59      	ldr	r2, [pc, #356]	@ (8000d40 <HAL_ETH_MspInit+0x184>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	f040 80ab 	bne.w	8000d36 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000be0:	4b58      	ldr	r3, [pc, #352]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000be2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000be6:	4a57      	ldr	r2, [pc, #348]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bf0:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000bf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bfe:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c04:	4a4f      	ldr	r2, [pc, #316]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c1c:	4b49      	ldr	r3, [pc, #292]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c22:	4a48      	ldr	r2, [pc, #288]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c28:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c2c:	4b45      	ldr	r3, [pc, #276]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b42      	ldr	r3, [pc, #264]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	4a40      	ldr	r2, [pc, #256]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b3a      	ldr	r3, [pc, #232]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5e:	4a39      	ldr	r2, [pc, #228]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c68:	4b36      	ldr	r3, [pc, #216]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b33      	ldr	r3, [pc, #204]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7c:	4a31      	ldr	r2, [pc, #196]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c86:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c94:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca4:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <HAL_ETH_MspInit+0x188>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cb2:	2332      	movs	r3, #50	@ 0x32
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc2:	230b      	movs	r3, #11
 8000cc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481e      	ldr	r0, [pc, #120]	@ (8000d48 <HAL_ETH_MspInit+0x18c>)
 8000cce:	f001 f82d 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cd2:	2386      	movs	r3, #134	@ 0x86
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce2:	230b      	movs	r3, #11
 8000ce4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4817      	ldr	r0, [pc, #92]	@ (8000d4c <HAL_ETH_MspInit+0x190>)
 8000cee:	f001 f81d 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d04:	230b      	movs	r3, #11
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <HAL_ETH_MspInit+0x194>)
 8000d10:	f001 f80c 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d14:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d26:	230b      	movs	r3, #11
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4808      	ldr	r0, [pc, #32]	@ (8000d54 <HAL_ETH_MspInit+0x198>)
 8000d32:	f000 fffb 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d36:	bf00      	nop
 8000d38:	3738      	adds	r7, #56	@ 0x38
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40028000 	.word	0x40028000
 8000d44:	58024400 	.word	0x58024400
 8000d48:	58020800 	.word	0x58020800
 8000d4c:	58020000 	.word	0x58020000
 8000d50:	58020400 	.word	0x58020400
 8000d54:	58021800 	.word	0x58021800

08000d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	22c0      	movs	r2, #192	@ 0xc0
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 fd78 	bl	800686e <memset>
  if(huart->Instance==USART3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a27      	ldr	r2, [pc, #156]	@ (8000e20 <HAL_UART_MspInit+0xc8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d146      	bne.n	8000e16 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d88:	f04f 0202 	mov.w	r2, #2
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fb56 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000daa:	f7ff fee7 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dae:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <HAL_UART_MspInit+0xcc>)
 8000db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000db4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <HAL_UART_MspInit+0xcc>)
 8000db6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_UART_MspInit+0xcc>)
 8000dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_UART_MspInit+0xcc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <HAL_UART_MspInit+0xcc>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <HAL_UART_MspInit+0xcc>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e04:	2307      	movs	r3, #7
 8000e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <HAL_UART_MspInit+0xd0>)
 8000e12:	f000 ff8b 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e16:	bf00      	nop
 8000e18:	37e8      	adds	r7, #232	@ 0xe8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40004800 	.word	0x40004800
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020c00 	.word	0x58020c00

08000e2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0ba      	sub	sp, #232	@ 0xe8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	22c0      	movs	r2, #192	@ 0xc0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 fd0e 	bl	800686e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a38      	ldr	r2, [pc, #224]	@ (8000f38 <HAL_PCD_MspInit+0x10c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d169      	bne.n	8000f30 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000e6c:	2312      	movs	r3, #18
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000e74:	2303      	movs	r3, #3
 8000e76:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000e82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e86:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000e88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 fadb 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000ea0:	f7ff fe6c 	bl	8000b7c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000ea4:	f001 fade 	bl	8002464 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <HAL_PCD_MspInit+0x110>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eae:	4a23      	ldr	r2, [pc, #140]	@ (8000f3c <HAL_PCD_MspInit+0x110>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <HAL_PCD_MspInit+0x110>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ec6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000eca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4814      	ldr	r0, [pc, #80]	@ (8000f40 <HAL_PCD_MspInit+0x114>)
 8000eee:	f000 ff1d 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <HAL_PCD_MspInit+0x114>)
 8000f0e:	f000 ff0d 	bl	8001d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <HAL_PCD_MspInit+0x110>)
 8000f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f18:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <HAL_PCD_MspInit+0x110>)
 8000f1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_PCD_MspInit+0x110>)
 8000f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f30:	bf00      	nop
 8000f32:	37e8      	adds	r7, #232	@ 0xe8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40080000 	.word	0x40080000
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020000 	.word	0x58020000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <NMI_Handler+0x4>

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9a:	f000 f89f 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa8:	f7ff fb0e 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f005 fc55 	bl	8006880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fba7 	bl	8000728 <main>
  bx  lr
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fe0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fe8:	08006928 	.word	0x08006928
  ldr r2, =_sbss
 8000fec:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000ff0:	24000758 	.word	0x24000758

08000ff4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC3_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 fa20 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001004:	f002 f84e 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_Init+0x68>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	4913      	ldr	r1, [pc, #76]	@ (8001064 <HAL_Init+0x6c>)
 8001016:	5ccb      	ldrb	r3, [r1, r3]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_Init+0x6c>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <HAL_Init+0x70>)
 800103a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800103c:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <HAL_Init+0x74>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f814 	bl	8001070 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e002      	b.n	8001058 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001052:	f7ff fd99 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58024400 	.word	0x58024400
 8001064:	080068e0 	.word	0x080068e0
 8001068:	24000004 	.word	0x24000004
 800106c:	24000000 	.word	0x24000000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_InitTick+0x60>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e021      	b.n	80010c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_InitTick+0x64>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fa05 	bl	80014aa <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b8:	f000 f9cf 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x68>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400000c 	.word	0x2400000c
 80010d4:	24000000 	.word	0x24000000
 80010d8:	24000008 	.word	0x24000008

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2400000c 	.word	0x2400000c
 8001100:	24000754 	.word	0x24000754

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	24000754 	.word	0x24000754

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2400000c 	.word	0x2400000c

08001164 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetREVID+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	0c1b      	lsrs	r3, r3, #16
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	5c001000 	.word	0x5c001000

0800117c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800118c:	4904      	ldr	r1, [pc, #16]	@ (80011a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	58000400 	.word	0x58000400

080011a4 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	095b      	lsrs	r3, r3, #5
 80011b2:	015a      	lsls	r2, r3, #5
 80011b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <HAL_EXTI_EdgeConfig+0xcc>)
 80011b6:	4413      	add	r3, r2
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	2201      	movs	r2, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	0158      	lsls	r0, r3, #5
 80011ce:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <HAL_EXTI_EdgeConfig+0xcc>)
 80011d0:	4403      	add	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	ea01 0302 	and.w	r3, r1, r2
 80011d8:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	095b      	lsrs	r3, r3, #5
 80011de:	f103 7330 	add.w	r3, r3, #46137344	@ 0x2c00000
 80011e2:	015b      	lsls	r3, r3, #5
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f003 031f 	and.w	r3, r3, #31
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	0949      	lsrs	r1, r1, #5
 80011f8:	f101 7130 	add.w	r1, r1, #46137344	@ 0x2c00000
 80011fc:	0149      	lsls	r1, r1, #5
 80011fe:	4013      	ands	r3, r2
 8001200:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d012      	beq.n	8001232 <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	f103 7330 	add.w	r3, r3, #46137344	@ 0x2c00000
 8001214:	015b      	lsls	r3, r3, #5
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	0949      	lsrs	r1, r1, #5
 8001228:	f101 7130 	add.w	r1, r1, #46137344	@ 0x2c00000
 800122c:	0149      	lsls	r1, r1, #5
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	015a      	lsls	r2, r3, #5
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_EXTI_EdgeConfig+0xcc>)
 8001244:	4413      	add	r3, r2
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	2201      	movs	r2, #1
 8001250:	409a      	lsls	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	0158      	lsls	r0, r3, #5
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_EXTI_EdgeConfig+0xcc>)
 800125a:	4403      	add	r3, r0
 800125c:	4618      	mov	r0, r3
 800125e:	ea41 0302 	orr.w	r3, r1, r2
 8001262:	6003      	str	r3, [r0, #0]
  }
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	58000004 	.word	0x58000004

08001274 <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 021f 	and.w	r2, r3, #31
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	095b      	lsrs	r3, r3, #5
 8001286:	0119      	lsls	r1, r3, #4
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_EXTI_D1_ClearFlag+0x2c>)
 800128a:	440b      	add	r3, r1
 800128c:	4619      	mov	r1, r3
 800128e:	2301      	movs	r3, #1
 8001290:	4093      	lsls	r3, r2
 8001292:	600b      	str	r3, [r1, #0]

}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	58000088 	.word	0x58000088

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x40>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x40>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00
 80012e8:	05fa0000 	.word	0x05fa0000

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	@ (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	@ (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	@ (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	@ 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff29 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff40 	bl	80012ec <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff90 	bl	8001398 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5f 	bl	8001344 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff33 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa4 	bl	8001400 <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0e3      	b.n	800169e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d106      	bne.n	80014ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2223      	movs	r2, #35	@ 0x23
 80014e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fb67 	bl	8000bbc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b6e      	ldr	r3, [pc, #440]	@ (80016a8 <HAL_ETH_Init+0x1e4>)
 80014f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014f4:	4a6c      	ldr	r2, [pc, #432]	@ (80016a8 <HAL_ETH_Init+0x1e4>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014fe:	4b6a      	ldr	r3, [pc, #424]	@ (80016a8 <HAL_ETH_Init+0x1e4>)
 8001500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7a1b      	ldrb	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d103      	bne.n	800151c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff fe31 	bl	800117c <HAL_SYSCFG_ETHInterfaceSelect>
 800151a:	e003      	b.n	8001524 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800151c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001520:	f7ff fe2c 	bl	800117c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001524:	4b61      	ldr	r3, [pc, #388]	@ (80016ac <HAL_ETH_Init+0x1e8>)
 8001526:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800153e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001540:	f7ff fde0 	bl	8001104 <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001546:	e011      	b.n	800156c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001548:	f7ff fddc 	bl	8001104 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001556:	d909      	bls.n	800156c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	22e0      	movs	r2, #224	@ 0xe0
 8001564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e098      	b.n	800169e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1e4      	bne.n	8001548 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f89e 	bl	80016c0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001584:	f001 ff08 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 8001588:	4603      	mov	r3, r0
 800158a:	4a49      	ldr	r2, [pc, #292]	@ (80016b0 <HAL_ETH_Init+0x1ec>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	0c9a      	lsrs	r2, r3, #18
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3a01      	subs	r2, #1
 8001598:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fa81 	bl	8001aa4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80015ae:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015be:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	22e0      	movs	r2, #224	@ 0xe0
 80015da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e05d      	b.n	800169e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80015ee:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HAL_ETH_Init+0x1f0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6952      	ldr	r2, [r2, #20]
 80015f6:	0051      	lsls	r1, r2, #1
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001602:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fae9 	bl	8001bde <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fb2f 	bl	8001c70 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	3305      	adds	r3, #5
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021a      	lsls	r2, r3, #8
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	3304      	adds	r3, #4
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	3303      	adds	r3, #3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	061a      	lsls	r2, r3, #24
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	3302      	adds	r3, #2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	3301      	adds	r3, #1
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001650:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800165e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001660:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_ETH_Init+0x1f4>)
 8001672:	430b      	orrs	r3, r1
 8001674:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <HAL_ETH_Init+0x1f8>)
 8001686:	430b      	orrs	r3, r1
 8001688:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2210      	movs	r2, #16
 8001698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58000400 	.word	0x58000400
 80016b0:	431bde83 	.word	0x431bde83
 80016b4:	ffff8001 	.word	0xffff8001
 80016b8:	0c020060 	.word	0x0c020060
 80016bc:	0c20c000 	.word	0x0c20c000

080016c0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016da:	f001 fe5d 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 80016de:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a1a      	ldr	r2, [pc, #104]	@ (800174c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d804      	bhi.n	80016f2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e022      	b.n	8001738 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4a16      	ldr	r2, [pc, #88]	@ (8001750 <HAL_ETH_SetMDIOClockRange+0x90>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d204      	bcs.n	8001704 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e019      	b.n	8001738 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4a13      	ldr	r2, [pc, #76]	@ (8001754 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d915      	bls.n	8001738 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d804      	bhi.n	800171e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e00c      	b.n	8001738 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d804      	bhi.n	8001730 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e003      	b.n	8001738 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001736:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	02160ebf 	.word	0x02160ebf
 8001750:	03938700 	.word	0x03938700
 8001754:	05f5e0ff 	.word	0x05f5e0ff
 8001758:	08f0d17f 	.word	0x08f0d17f
 800175c:	0ee6b27f 	.word	0x0ee6b27f

08001760 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001772:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	791b      	ldrb	r3, [r3, #4]
 8001778:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800177a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	7b1b      	ldrb	r3, [r3, #12]
 8001780:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001782:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	7b5b      	ldrb	r3, [r3, #13]
 8001788:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800178a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	7b9b      	ldrb	r3, [r3, #14]
 8001790:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001792:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7bdb      	ldrb	r3, [r3, #15]
 8001798:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800179a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	7c12      	ldrb	r2, [r2, #16]
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d102      	bne.n	80017aa <ETH_SetMACConfig+0x4a>
 80017a4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017a8:	e000      	b.n	80017ac <ETH_SetMACConfig+0x4c>
 80017aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	7c52      	ldrb	r2, [r2, #17]
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d102      	bne.n	80017bc <ETH_SetMACConfig+0x5c>
 80017b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ba:	e000      	b.n	80017be <ETH_SetMACConfig+0x5e>
 80017bc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	7c9b      	ldrb	r3, [r3, #18]
 80017c4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017c6:	431a      	orrs	r2, r3
               macconf->Speed |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80017cc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80017d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	7f1b      	ldrb	r3, [r3, #28]
 80017d8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80017da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	7f5b      	ldrb	r3, [r3, #29]
 80017e0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	7f92      	ldrb	r2, [r2, #30]
 80017e8:	2a00      	cmp	r2, #0
 80017ea:	d102      	bne.n	80017f2 <ETH_SetMACConfig+0x92>
 80017ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f0:	e000      	b.n	80017f4 <ETH_SetMACConfig+0x94>
 80017f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	7fdb      	ldrb	r3, [r3, #31]
 80017fa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001804:	2a00      	cmp	r2, #0
 8001806:	d102      	bne.n	800180e <ETH_SetMACConfig+0xae>
 8001808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800180c:	e000      	b.n	8001810 <ETH_SetMACConfig+0xb0>
 800180e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001810:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001816:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800181e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001820:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001826:	4313      	orrs	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b56      	ldr	r3, [pc, #344]	@ (800198c <ETH_SetMACConfig+0x22c>)
 8001832:	4013      	ands	r3, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	430b      	orrs	r3, r1
 800183c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001842:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800184a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800184c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001854:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800185e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001860:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001868:	2a00      	cmp	r2, #0
 800186a:	d102      	bne.n	8001872 <ETH_SetMACConfig+0x112>
 800186c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001870:	e000      	b.n	8001874 <ETH_SetMACConfig+0x114>
 8001872:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001874:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800187a:	4313      	orrs	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4b42      	ldr	r3, [pc, #264]	@ (8001990 <ETH_SetMACConfig+0x230>)
 8001886:	4013      	ands	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	68f9      	ldr	r1, [r7, #12]
 800188e:	430b      	orrs	r3, r1
 8001890:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001898:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001994 <ETH_SetMACConfig+0x234>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	430b      	orrs	r3, r1
 80018b4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018bc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80018ca:	2a00      	cmp	r2, #0
 80018cc:	d101      	bne.n	80018d2 <ETH_SetMACConfig+0x172>
 80018ce:	2280      	movs	r2, #128	@ 0x80
 80018d0:	e000      	b.n	80018d4 <ETH_SetMACConfig+0x174>
 80018d2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80018d4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018da:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018dc:	4313      	orrs	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80018e6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80018ea:	4013      	ands	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	68f9      	ldr	r1, [r7, #12]
 80018f2:	430b      	orrs	r3, r1
 80018f4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80018fc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001904:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001912:	f023 0103 	bic.w	r1, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	430a      	orrs	r2, r1
 800191e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800192a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001946:	2a00      	cmp	r2, #0
 8001948:	d101      	bne.n	800194e <ETH_SetMACConfig+0x1ee>
 800194a:	2240      	movs	r2, #64	@ 0x40
 800194c:	e000      	b.n	8001950 <ETH_SetMACConfig+0x1f0>
 800194e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001950:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001958:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800195a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001962:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001964:	4313      	orrs	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001970:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	430a      	orrs	r2, r1
 800197c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	00048083 	.word	0x00048083
 8001990:	c0f88000 	.word	0xc0f88000
 8001994:	fffffef0 	.word	0xfffffef0

08001998 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b38      	ldr	r3, [pc, #224]	@ (8001a90 <ETH_SetDMAConfig+0xf8>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	6811      	ldr	r1, [r2, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019be:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	791b      	ldrb	r3, [r3, #4]
 80019c4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	7b1b      	ldrb	r3, [r3, #12]
 80019d0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <ETH_SetDMAConfig+0xfc>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019f0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	7b5b      	ldrb	r3, [r3, #13]
 80019f6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a08:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001a0c:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <ETH_SetDMAConfig+0x100>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	430b      	orrs	r3, r1
 8001a18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a1c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	7d1b      	ldrb	r3, [r3, #20]
 8001a28:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a2a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	7f5b      	ldrb	r3, [r3, #29]
 8001a30:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a3e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001a42:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <ETH_SetDMAConfig+0x104>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a52:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	7f1b      	ldrb	r3, [r3, #28]
 8001a5a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a6c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <ETH_SetDMAConfig+0x108>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a80:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	ffff87fd 	.word	0xffff87fd
 8001a94:	ffff2ffe 	.word	0xffff2ffe
 8001a98:	fffec000 	.word	0xfffec000
 8001a9c:	ffc0efef 	.word	0xffc0efef
 8001aa0:	7fc0ffff 	.word	0x7fc0ffff

08001aa4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b0a4      	sub	sp, #144	@ 0x90
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001aac:	2301      	movs	r3, #1
 8001aae:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ae4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001afc:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001b00:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b26:	2300      	movs	r3, #0
 8001b28:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b3c:	2320      	movs	r3, #32
 8001b3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b4e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b58:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fde6 	bl	8001760 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bae:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bb2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bbc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001bc4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fee1 	bl	8001998 <ETH_SetDMAConfig>
}
 8001bd6:	bf00      	nop
 8001bd8:	3790      	adds	r7, #144	@ 0x90
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e01d      	b.n	8001c28 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68d9      	ldr	r1, [r3, #12]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	3206      	adds	r2, #6
 8001c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d9de      	bls.n	8001bec <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2303      	movs	r3, #3
 8001c40:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c50:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c60:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e023      	b.n	8001cc6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6919      	ldr	r1, [r3, #16]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	3212      	adds	r2, #18
 8001cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d9d8      	bls.n	8001c7e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d06:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d3a:	4b89      	ldr	r3, [pc, #548]	@ (8001f60 <HAL_GPIO_Init+0x234>)
 8001d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d3e:	e194      	b.n	800206a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8186 	beq.w	8002064 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d005      	beq.n	8001d70 <HAL_GPIO_Init+0x44>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d130      	bne.n	8001dd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da6:	2201      	movs	r2, #1
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 0201 	and.w	r2, r3, #1
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d017      	beq.n	8001e0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d123      	bne.n	8001e62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	69b9      	ldr	r1, [r7, #24]
 8001e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0203 	and.w	r2, r3, #3
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80e0 	beq.w	8002064 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f64 <HAL_GPIO_Init+0x238>)
 8001ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8001f64 <HAL_GPIO_Init+0x238>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f64 <HAL_GPIO_Init+0x238>)
 8001eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec2:	4a29      	ldr	r2, [pc, #164]	@ (8001f68 <HAL_GPIO_Init+0x23c>)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a20      	ldr	r2, [pc, #128]	@ (8001f6c <HAL_GPIO_Init+0x240>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d052      	beq.n	8001f94 <HAL_GPIO_Init+0x268>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <HAL_GPIO_Init+0x244>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d031      	beq.n	8001f5a <HAL_GPIO_Init+0x22e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f74 <HAL_GPIO_Init+0x248>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <HAL_GPIO_Init+0x22a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <HAL_GPIO_Init+0x24c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d025      	beq.n	8001f52 <HAL_GPIO_Init+0x226>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1c      	ldr	r2, [pc, #112]	@ (8001f7c <HAL_GPIO_Init+0x250>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <HAL_GPIO_Init+0x222>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <HAL_GPIO_Init+0x254>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x21e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <HAL_GPIO_Init+0x258>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x21a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a19      	ldr	r2, [pc, #100]	@ (8001f88 <HAL_GPIO_Init+0x25c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x216>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a18      	ldr	r2, [pc, #96]	@ (8001f8c <HAL_GPIO_Init+0x260>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a17      	ldr	r2, [pc, #92]	@ (8001f90 <HAL_GPIO_Init+0x264>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x20e>
 8001f36:	2309      	movs	r3, #9
 8001f38:	e02d      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	e02b      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f3e:	2308      	movs	r3, #8
 8001f40:	e029      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e027      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f46:	2306      	movs	r3, #6
 8001f48:	e025      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	e023      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e021      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e01f      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e01d      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e01b      	b.n	8001f96 <HAL_GPIO_Init+0x26a>
 8001f5e:	bf00      	nop
 8001f60:	58000080 	.word	0x58000080
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58000400 	.word	0x58000400
 8001f6c:	58020000 	.word	0x58020000
 8001f70:	58020400 	.word	0x58020400
 8001f74:	58020800 	.word	0x58020800
 8001f78:	58020c00 	.word	0x58020c00
 8001f7c:	58021000 	.word	0x58021000
 8001f80:	58021400 	.word	0x58021400
 8001f84:	58021800 	.word	0x58021800
 8001f88:	58021c00 	.word	0x58021c00
 8001f8c:	58022000 	.word	0x58022000
 8001f90:	58022400 	.word	0x58022400
 8001f94:	2300      	movs	r3, #0
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	f002 0203 	and.w	r2, r2, #3
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	4093      	lsls	r3, r2
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa6:	4938      	ldr	r1, [pc, #224]	@ (8002088 <HAL_GPIO_Init+0x35c>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002008:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	3301      	adds	r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f47f ae63 	bne.w	8001d40 <HAL_GPIO_Init+0x14>
  }
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	3724      	adds	r7, #36	@ 0x24
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	58000400 	.word	0x58000400

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020a8:	e003      	b.n	80020b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	041a      	lsls	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	619a      	str	r2, [r3, #24]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	041a      	lsls	r2, r3, #16
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	43d9      	mvns	r1, r3
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	400b      	ands	r3, r1
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	619a      	str	r2, [r3, #24]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80020fc:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <HAL_HSEM_FastTake+0x2c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3320      	adds	r3, #32
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_HSEM_FastTake+0x30>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e000      	b.n	8002112 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	58026400 	.word	0x58026400
 8002124:	80000300 	.word	0x80000300

08002128 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002132:	4906      	ldr	r1, [pc, #24]	@ (800214c <HAL_HSEM_Release+0x24>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	58026400 	.word	0x58026400

08002150 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af02      	add	r7, sp, #8
 8002156:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0fe      	b.n	8002360 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fe58 	bl	8000e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f004 f8db 	bl	8006344 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7c1a      	ldrb	r2, [r3, #16]
 8002196:	f88d 2000 	strb.w	r2, [sp]
 800219a:	3304      	adds	r3, #4
 800219c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800219e:	f004 f85f 	bl	8006260 <USB_CoreInit>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0d5      	b.n	8002360 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 f8d3 	bl	8006366 <USB_SetCurrentMode>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0c6      	b.n	8002360 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e04a      	b.n	800226e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3315      	adds	r3, #21
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	3314      	adds	r3, #20
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	b298      	uxth	r0, r3
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	332e      	adds	r3, #46	@ 0x2e
 8002214:	4602      	mov	r2, r0
 8002216:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3318      	adds	r3, #24
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	331c      	adds	r3, #28
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3320      	adds	r3, #32
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3324      	adds	r3, #36	@ 0x24
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	3301      	adds	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	791b      	ldrb	r3, [r3, #4]
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	429a      	cmp	r2, r3
 8002276:	d3af      	bcc.n	80021d8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e044      	b.n	8002308 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	3301      	adds	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	791b      	ldrb	r3, [r3, #4]
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	429a      	cmp	r2, r3
 8002310:	d3b5      	bcc.n	800227e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7c1a      	ldrb	r2, [r3, #16]
 800231a:	f88d 2000 	strb.w	r2, [sp]
 800231e:	3304      	adds	r3, #4
 8002320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002322:	f004 f86d 	bl	8006400 <USB_DevInit>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e013      	b.n	8002360 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7b1b      	ldrb	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d102      	bne.n	8002354 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f80a 	bl	8002368 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f004 fa28 	bl	80067ae <USB_DevDisconnect>

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002396:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_PCDEx_ActivateLPM+0x44>)
 8002398:	4313      	orrs	r3, r2
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	10000003 	.word	0x10000003

080023b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023b8:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	d00a      	beq.n	80023da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023c4:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <HAL_PWREx_ConfigSupply+0xb0>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d001      	beq.n	80023d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e040      	b.n	8002458 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e03e      	b.n	8002458 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023da:	4b21      	ldr	r3, [pc, #132]	@ (8002460 <HAL_PWREx_ConfigSupply+0xb0>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80023e2:	491f      	ldr	r1, [pc, #124]	@ (8002460 <HAL_PWREx_ConfigSupply+0xb0>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023ea:	f7fe fe8b 	bl	8001104 <HAL_GetTick>
 80023ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023f0:	e009      	b.n	8002406 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023f2:	f7fe fe87 	bl	8001104 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002400:	d901      	bls.n	8002406 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e028      	b.n	8002458 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002406:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <HAL_PWREx_ConfigSupply+0xb0>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800240e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002412:	d1ee      	bne.n	80023f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b1e      	cmp	r3, #30
 8002418:	d008      	beq.n	800242c <HAL_PWREx_ConfigSupply+0x7c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b2e      	cmp	r3, #46	@ 0x2e
 800241e:	d005      	beq.n	800242c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b1d      	cmp	r3, #29
 8002424:	d002      	beq.n	800242c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b2d      	cmp	r3, #45	@ 0x2d
 800242a:	d114      	bne.n	8002456 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800242c:	f7fe fe6a 	bl	8001104 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002432:	e009      	b.n	8002448 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002434:	f7fe fe66 	bl	8001104 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002442:	d901      	bls.n	8002448 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e007      	b.n	8002458 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_PWREx_ConfigSupply+0xb0>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002454:	d1ee      	bne.n	8002434 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	58024800 	.word	0x58024800

08002464 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002472:	60d3      	str	r3, [r2, #12]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	58024800 	.word	0x58024800

08002484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	@ 0x30
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	f000 bc48 	b.w	8002d28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8088 	beq.w	80025b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a6:	4b99      	ldr	r3, [pc, #612]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024b0:	4b96      	ldr	r3, [pc, #600]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d007      	beq.n	80024cc <HAL_RCC_OscConfig+0x48>
 80024bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024be:	2b18      	cmp	r3, #24
 80024c0:	d111      	bne.n	80024e6 <HAL_RCC_OscConfig+0x62>
 80024c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	4b8f      	ldr	r3, [pc, #572]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d06d      	beq.n	80025b4 <HAL_RCC_OscConfig+0x130>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d169      	bne.n	80025b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f000 bc21 	b.w	8002d28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_OscConfig+0x7a>
 80024f0:	4b86      	ldr	r3, [pc, #536]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a85      	ldr	r2, [pc, #532]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	e02e      	b.n	800255c <HAL_RCC_OscConfig+0xd8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0x9c>
 8002506:	4b81      	ldr	r3, [pc, #516]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a80      	ldr	r2, [pc, #512]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 800250c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b7e      	ldr	r3, [pc, #504]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7d      	ldr	r2, [pc, #500]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002518:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e01d      	b.n	800255c <HAL_RCC_OscConfig+0xd8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0xc0>
 800252a:	4b78      	ldr	r3, [pc, #480]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a77      	ldr	r2, [pc, #476]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b75      	ldr	r3, [pc, #468]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a74      	ldr	r2, [pc, #464]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0xd8>
 8002544:	4b71      	ldr	r3, [pc, #452]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a70      	ldr	r2, [pc, #448]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b6e      	ldr	r3, [pc, #440]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a6d      	ldr	r2, [pc, #436]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fdce 	bl	8001104 <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fdca 	bl	8001104 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e3d4      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800257e:	4b63      	ldr	r3, [pc, #396]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0xe8>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fdba 	bl	8001104 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe fdb6 	bl	8001104 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e3c0      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025a6:	4b59      	ldr	r3, [pc, #356]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x110>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80ca 	beq.w	8002758 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c4:	4b51      	ldr	r3, [pc, #324]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ce:	4b4f      	ldr	r3, [pc, #316]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80025d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_RCC_OscConfig+0x166>
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	2b18      	cmp	r3, #24
 80025de:	d156      	bne.n	800268e <HAL_RCC_OscConfig+0x20a>
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d151      	bne.n	800268e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ea:	4b48      	ldr	r3, [pc, #288]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x17e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e392      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002602:	4b42      	ldr	r3, [pc, #264]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0219 	bic.w	r2, r3, #25
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	493f      	ldr	r1, [pc, #252]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fd76 	bl	8001104 <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261c:	f7fe fd72 	bl	8001104 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e37c      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800262e:	4b37      	ldr	r3, [pc, #220]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	f7fe fd93 	bl	8001164 <HAL_GetREVID>
 800263e:	4603      	mov	r3, r0
 8002640:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002644:	4293      	cmp	r3, r2
 8002646:	d817      	bhi.n	8002678 <HAL_RCC_OscConfig+0x1f4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b40      	cmp	r3, #64	@ 0x40
 800264e:	d108      	bne.n	8002662 <HAL_RCC_OscConfig+0x1de>
 8002650:	4b2e      	ldr	r3, [pc, #184]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002658:	4a2c      	ldr	r2, [pc, #176]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 800265a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800265e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002660:	e07a      	b.n	8002758 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	031b      	lsls	r3, r3, #12
 8002670:	4926      	ldr	r1, [pc, #152]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002676:	e06f      	b.n	8002758 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	4921      	ldr	r1, [pc, #132]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268c:	e064      	b.n	8002758 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d047      	beq.n	8002726 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002696:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0219 	bic.w	r2, r3, #25
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	491a      	ldr	r1, [pc, #104]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fd2c 	bl	8001104 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b0:	f7fe fd28 	bl	8001104 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e332      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c2:	4b12      	ldr	r3, [pc, #72]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	f7fe fd49 	bl	8001164 <HAL_GetREVID>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026d8:	4293      	cmp	r3, r2
 80026da:	d819      	bhi.n	8002710 <HAL_RCC_OscConfig+0x28c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b40      	cmp	r3, #64	@ 0x40
 80026e2:	d108      	bne.n	80026f6 <HAL_RCC_OscConfig+0x272>
 80026e4:	4b09      	ldr	r3, [pc, #36]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026ec:	4a07      	ldr	r2, [pc, #28]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80026ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f2:	6053      	str	r3, [r2, #4]
 80026f4:	e030      	b.n	8002758 <HAL_RCC_OscConfig+0x2d4>
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	031b      	lsls	r3, r3, #12
 8002704:	4901      	ldr	r1, [pc, #4]	@ (800270c <HAL_RCC_OscConfig+0x288>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
 800270a:	e025      	b.n	8002758 <HAL_RCC_OscConfig+0x2d4>
 800270c:	58024400 	.word	0x58024400
 8002710:	4b9a      	ldr	r3, [pc, #616]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	4997      	ldr	r1, [pc, #604]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
 8002724:	e018      	b.n	8002758 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002726:	4b95      	ldr	r3, [pc, #596]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a94      	ldr	r2, [pc, #592]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fce7 	bl	8001104 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273a:	f7fe fce3 	bl	8001104 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e2ed      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800274c:	4b8b      	ldr	r3, [pc, #556]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a9 	beq.w	80028b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002766:	4b85      	ldr	r3, [pc, #532]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800276e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002770:	4b82      	ldr	r3, [pc, #520]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d007      	beq.n	800278c <HAL_RCC_OscConfig+0x308>
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b18      	cmp	r3, #24
 8002780:	d13a      	bne.n	80027f8 <HAL_RCC_OscConfig+0x374>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d135      	bne.n	80027f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800278c:	4b7b      	ldr	r3, [pc, #492]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x320>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2b80      	cmp	r3, #128	@ 0x80
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e2c1      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027a4:	f7fe fcde 	bl	8001164 <HAL_GetREVID>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d817      	bhi.n	80027e2 <HAL_RCC_OscConfig+0x35e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d108      	bne.n	80027cc <HAL_RCC_OscConfig+0x348>
 80027ba:	4b70      	ldr	r3, [pc, #448]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027c2:	4a6e      	ldr	r2, [pc, #440]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ca:	e075      	b.n	80028b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027cc:	4b6b      	ldr	r3, [pc, #428]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	069b      	lsls	r3, r3, #26
 80027da:	4968      	ldr	r1, [pc, #416]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027e0:	e06a      	b.n	80028b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027e2:	4b66      	ldr	r3, [pc, #408]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	061b      	lsls	r3, r3, #24
 80027f0:	4962      	ldr	r1, [pc, #392]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027f6:	e05f      	b.n	80028b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d042      	beq.n	8002886 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002800:	4b5e      	ldr	r3, [pc, #376]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5d      	ldr	r2, [pc, #372]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800280a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fc7a 	bl	8001104 <HAL_GetTick>
 8002810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002814:	f7fe fc76 	bl	8001104 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e280      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002826:	4b55      	ldr	r3, [pc, #340]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002832:	f7fe fc97 	bl	8001164 <HAL_GetREVID>
 8002836:	4603      	mov	r3, r0
 8002838:	f241 0203 	movw	r2, #4099	@ 0x1003
 800283c:	4293      	cmp	r3, r2
 800283e:	d817      	bhi.n	8002870 <HAL_RCC_OscConfig+0x3ec>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	2b20      	cmp	r3, #32
 8002846:	d108      	bne.n	800285a <HAL_RCC_OscConfig+0x3d6>
 8002848:	4b4c      	ldr	r3, [pc, #304]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002850:	4a4a      	ldr	r2, [pc, #296]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002852:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002856:	6053      	str	r3, [r2, #4]
 8002858:	e02e      	b.n	80028b8 <HAL_RCC_OscConfig+0x434>
 800285a:	4b48      	ldr	r3, [pc, #288]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	069b      	lsls	r3, r3, #26
 8002868:	4944      	ldr	r1, [pc, #272]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
 800286e:	e023      	b.n	80028b8 <HAL_RCC_OscConfig+0x434>
 8002870:	4b42      	ldr	r3, [pc, #264]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	493f      	ldr	r1, [pc, #252]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	60cb      	str	r3, [r1, #12]
 8002884:	e018      	b.n	80028b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002886:	4b3d      	ldr	r3, [pc, #244]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a3c      	ldr	r2, [pc, #240]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 800288c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe fc37 	bl	8001104 <HAL_GetTick>
 8002896:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800289a:	f7fe fc33 	bl	8001104 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e23d      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028ac:	4b33      	ldr	r3, [pc, #204]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d036      	beq.n	8002932 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d019      	beq.n	8002900 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028cc:	4b2b      	ldr	r3, [pc, #172]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d0:	4a2a      	ldr	r2, [pc, #168]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fc14 	bl	8001104 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe fc10 	bl	8001104 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e21a      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028f2:	4b22      	ldr	r3, [pc, #136]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x45c>
 80028fe:	e018      	b.n	8002932 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002900:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002904:	4a1d      	ldr	r2, [pc, #116]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe fbfa 	bl	8001104 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7fe fbf6 	bl	8001104 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e200      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d039      	beq.n	80029b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01c      	beq.n	8002980 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0c      	ldr	r2, [pc, #48]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 800294c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002950:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002952:	f7fe fbd7 	bl	8001104 <HAL_GetTick>
 8002956:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295a:	f7fe fbd3 	bl	8001104 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1dd      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800296c:	4b03      	ldr	r3, [pc, #12]	@ (800297c <HAL_RCC_OscConfig+0x4f8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x4d6>
 8002978:	e01b      	b.n	80029b2 <HAL_RCC_OscConfig+0x52e>
 800297a:	bf00      	nop
 800297c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002980:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a9a      	ldr	r2, [pc, #616]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800298a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800298c:	f7fe fbba 	bl	8001104 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002994:	f7fe fbb6 	bl	8001104 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e1c0      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029a6:	4b92      	ldr	r3, [pc, #584]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8081 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002bf4 <HAL_RCC_OscConfig+0x770>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a8b      	ldr	r2, [pc, #556]	@ (8002bf4 <HAL_RCC_OscConfig+0x770>)
 80029c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029cc:	f7fe fb9a 	bl	8001104 <HAL_GetTick>
 80029d0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d4:	f7fe fb96 	bl	8001104 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	@ 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1a0      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029e6:	4b83      	ldr	r3, [pc, #524]	@ (8002bf4 <HAL_RCC_OscConfig+0x770>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d106      	bne.n	8002a08 <HAL_RCC_OscConfig+0x584>
 80029fa:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fe:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a06:	e02d      	b.n	8002a64 <HAL_RCC_OscConfig+0x5e0>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x5a6>
 8002a10:	4b77      	ldr	r3, [pc, #476]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	4a76      	ldr	r2, [pc, #472]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1c:	4b74      	ldr	r3, [pc, #464]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	4a73      	ldr	r2, [pc, #460]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a22:	f023 0304 	bic.w	r3, r3, #4
 8002a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x5e0>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c8>
 8002a32:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a6e      	ldr	r2, [pc, #440]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	4a6b      	ldr	r2, [pc, #428]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0x5e0>
 8002a4c:	4b68      	ldr	r3, [pc, #416]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a67      	ldr	r2, [pc, #412]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	4b65      	ldr	r3, [pc, #404]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5c:	4a64      	ldr	r2, [pc, #400]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fb4a 	bl	8001104 <HAL_GetTick>
 8002a70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe fb46 	bl	8001104 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e14e      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a8a:	4b59      	ldr	r3, [pc, #356]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCC_OscConfig+0x5f0>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fb34 	bl	8001104 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fb30 	bl	8001104 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e138      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 812d 	beq.w	8002d26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002acc:	4b48      	ldr	r3, [pc, #288]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ad4:	2b18      	cmp	r3, #24
 8002ad6:	f000 80bd 	beq.w	8002c54 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	f040 809e 	bne.w	8002c20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b42      	ldr	r3, [pc, #264]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a41      	ldr	r2, [pc, #260]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fb08 	bl	8001104 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fb04 	bl	8001104 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e10e      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b0a:	4b39      	ldr	r3, [pc, #228]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b16:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCC_OscConfig+0x774>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	4931      	ldr	r1, [pc, #196]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	3b01      	subs	r3, #1
 8002b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	025b      	lsls	r3, r3, #9
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	061b      	lsls	r3, r3, #24
 8002b5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b60:	4923      	ldr	r1, [pc, #140]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b66:	4b22      	ldr	r3, [pc, #136]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	4a21      	ldr	r2, [pc, #132]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b72:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b76:	4b21      	ldr	r3, [pc, #132]	@ (8002bfc <HAL_RCC_OscConfig+0x778>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b7e:	00d2      	lsls	r2, r2, #3
 8002b80:	491b      	ldr	r1, [pc, #108]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	f023 020c 	bic.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	4917      	ldr	r1, [pc, #92]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b98:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	f023 0202 	bic.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba4:	4912      	ldr	r1, [pc, #72]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	4a10      	ldr	r2, [pc, #64]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd2:	4a07      	ldr	r2, [pc, #28]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fa8d 	bl	8001104 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bec:	e011      	b.n	8002c12 <HAL_RCC_OscConfig+0x78e>
 8002bee:	bf00      	nop
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	58024800 	.word	0x58024800
 8002bf8:	fffffc0c 	.word	0xfffffc0c
 8002bfc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fa80 	bl	8001104 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e08a      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c12:	4b47      	ldr	r3, [pc, #284]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x77c>
 8002c1e:	e082      	b.n	8002d26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c20:	4b43      	ldr	r3, [pc, #268]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a42      	ldr	r2, [pc, #264]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fa6a 	bl	8001104 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fa66 	bl	8001104 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e070      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c46:	4b3a      	ldr	r3, [pc, #232]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x7b0>
 8002c52:	e068      	b.n	8002d26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c54:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c5a:	4b35      	ldr	r3, [pc, #212]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d031      	beq.n	8002ccc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f003 0203 	and.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d12a      	bne.n	8002ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d122      	bne.n	8002ccc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d11a      	bne.n	8002ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	0a5b      	lsrs	r3, r3, #9
 8002c9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d111      	bne.n	8002ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	0c1b      	lsrs	r3, r3, #16
 8002cac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d108      	bne.n	8002ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0e1b      	lsrs	r3, r3, #24
 8002cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e02b      	b.n	8002d28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cd0:	4b17      	ldr	r3, [pc, #92]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd4:	08db      	lsrs	r3, r3, #3
 8002cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cda:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d01f      	beq.n	8002d26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cea:	4a11      	ldr	r2, [pc, #68]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cf2:	f7fe fa07 	bl	8001104 <HAL_GetTick>
 8002cf6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002cf8:	bf00      	nop
 8002cfa:	f7fe fa03 	bl	8001104 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d0f9      	beq.n	8002cfa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d06:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <HAL_RCC_OscConfig+0x8b0>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d12:	00d2      	lsls	r2, r2, #3
 8002d14:	4906      	ldr	r1, [pc, #24]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	4a04      	ldr	r2, [pc, #16]	@ (8002d30 <HAL_RCC_OscConfig+0x8ac>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3730      	adds	r7, #48	@ 0x30
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	58024400 	.word	0x58024400
 8002d34:	ffff0007 	.word	0xffff0007

08002d38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e19c      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b87      	ldr	r3, [pc, #540]	@ (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 020f 	bic.w	r2, r3, #15
 8002d62:	4985      	ldr	r1, [pc, #532]	@ (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b83      	ldr	r3, [pc, #524]	@ (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e184      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d908      	bls.n	8002daa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d98:	4b78      	ldr	r3, [pc, #480]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	4975      	ldr	r1, [pc, #468]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	4b70      	ldr	r3, [pc, #448]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d908      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	496a      	ldr	r1, [pc, #424]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	4b64      	ldr	r3, [pc, #400]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002df4:	4b61      	ldr	r3, [pc, #388]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	495e      	ldr	r1, [pc, #376]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	4b59      	ldr	r3, [pc, #356]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d908      	bls.n	8002e34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e22:	4b56      	ldr	r3, [pc, #344]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4953      	ldr	r1, [pc, #332]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4b4d      	ldr	r3, [pc, #308]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d908      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b4a      	ldr	r3, [pc, #296]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f023 020f 	bic.w	r2, r3, #15
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4947      	ldr	r1, [pc, #284]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d055      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e6e:	4b43      	ldr	r3, [pc, #268]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4940      	ldr	r1, [pc, #256]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e88:	4b3c      	ldr	r3, [pc, #240]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d121      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0f6      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ea0:	4b36      	ldr	r3, [pc, #216]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0ea      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eb8:	4b30      	ldr	r3, [pc, #192]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0de      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0d6      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ed8:	4b28      	ldr	r3, [pc, #160]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f023 0207 	bic.w	r2, r3, #7
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4925      	ldr	r1, [pc, #148]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eea:	f7fe f90b 	bl	8001104 <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef2:	f7fe f907 	bl	8001104 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0be      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f08:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d1eb      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d208      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f36:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f023 020f 	bic.w	r2, r3, #15
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	490e      	ldr	r1, [pc, #56]	@ (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d214      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b08      	ldr	r3, [pc, #32]	@ (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	4906      	ldr	r1, [pc, #24]	@ (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e086      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
 8002f78:	52002000 	.word	0x52002000
 8002f7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	4b3f      	ldr	r3, [pc, #252]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d208      	bcs.n	8002fae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	4939      	ldr	r1, [pc, #228]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	4b34      	ldr	r3, [pc, #208]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d208      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fca:	4b31      	ldr	r3, [pc, #196]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	492e      	ldr	r1, [pc, #184]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d010      	beq.n	800300a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d208      	bcs.n	800300a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ff8:	4b25      	ldr	r3, [pc, #148]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4922      	ldr	r1, [pc, #136]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003006:	4313      	orrs	r3, r2
 8003008:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003022:	429a      	cmp	r2, r3
 8003024:	d208      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003026:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4917      	ldr	r1, [pc, #92]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003034:	4313      	orrs	r3, r2
 8003036:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003038:	f000 f834 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b14      	ldr	r3, [pc, #80]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	4912      	ldr	r1, [pc, #72]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003056:	4b0e      	ldr	r3, [pc, #56]	@ (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	4a0a      	ldr	r2, [pc, #40]	@ (8003098 <HAL_RCC_ClockConfig+0x360>)
 800306e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003070:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <HAL_RCC_ClockConfig+0x364>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003076:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <HAL_RCC_ClockConfig+0x368>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fff8 	bl	8001070 <HAL_InitTick>
 8003080:	4603      	mov	r3, r0
 8003082:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	58024400 	.word	0x58024400
 8003094:	080068e0 	.word	0x080068e0
 8003098:	24000004 	.word	0x24000004
 800309c:	24000000 	.word	0x24000000
 80030a0:	24000008 	.word	0x24000008

080030a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	@ 0x24
 80030a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030aa:	4bb3      	ldr	r3, [pc, #716]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030b2:	2b18      	cmp	r3, #24
 80030b4:	f200 8155 	bhi.w	8003362 <HAL_RCC_GetSysClockFreq+0x2be>
 80030b8:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	08003125 	.word	0x08003125
 80030c4:	08003363 	.word	0x08003363
 80030c8:	08003363 	.word	0x08003363
 80030cc:	08003363 	.word	0x08003363
 80030d0:	08003363 	.word	0x08003363
 80030d4:	08003363 	.word	0x08003363
 80030d8:	08003363 	.word	0x08003363
 80030dc:	08003363 	.word	0x08003363
 80030e0:	0800314b 	.word	0x0800314b
 80030e4:	08003363 	.word	0x08003363
 80030e8:	08003363 	.word	0x08003363
 80030ec:	08003363 	.word	0x08003363
 80030f0:	08003363 	.word	0x08003363
 80030f4:	08003363 	.word	0x08003363
 80030f8:	08003363 	.word	0x08003363
 80030fc:	08003363 	.word	0x08003363
 8003100:	08003151 	.word	0x08003151
 8003104:	08003363 	.word	0x08003363
 8003108:	08003363 	.word	0x08003363
 800310c:	08003363 	.word	0x08003363
 8003110:	08003363 	.word	0x08003363
 8003114:	08003363 	.word	0x08003363
 8003118:	08003363 	.word	0x08003363
 800311c:	08003363 	.word	0x08003363
 8003120:	08003157 	.word	0x08003157
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003124:	4b94      	ldr	r3, [pc, #592]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003130:	4b91      	ldr	r3, [pc, #580]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	4a90      	ldr	r2, [pc, #576]	@ (800337c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
 8003140:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003142:	e111      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003144:	4b8d      	ldr	r3, [pc, #564]	@ (800337c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003146:	61bb      	str	r3, [r7, #24]
      break;
 8003148:	e10e      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800314a:	4b8d      	ldr	r3, [pc, #564]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800314c:	61bb      	str	r3, [r7, #24]
      break;
 800314e:	e10b      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003150:	4b8c      	ldr	r3, [pc, #560]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003152:	61bb      	str	r3, [r7, #24]
      break;
 8003154:	e108      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003156:	4b88      	ldr	r3, [pc, #544]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003160:	4b85      	ldr	r3, [pc, #532]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800316a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800316c:	4b82      	ldr	r3, [pc, #520]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003176:	4b80      	ldr	r3, [pc, #512]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317a:	08db      	lsrs	r3, r3, #3
 800317c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80e1 	beq.w	800335c <HAL_RCC_GetSysClockFreq+0x2b8>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b02      	cmp	r3, #2
 800319e:	f000 8083 	beq.w	80032a8 <HAL_RCC_GetSysClockFreq+0x204>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	f200 80a1 	bhi.w	80032ec <HAL_RCC_GetSysClockFreq+0x248>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x114>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d056      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031b6:	e099      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02d      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	08db      	lsrs	r3, r3, #3
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	4a6b      	ldr	r2, [pc, #428]	@ (800337c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ee:	4b62      	ldr	r3, [pc, #392]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003202:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800320a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800321e:	e087      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800338c <HAL_RCC_GetSysClockFreq+0x2e8>
 800322e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003232:	4b51      	ldr	r3, [pc, #324]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003242:	ed97 6a02 	vldr	s12, [r7, #8]
 8003246:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800324a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800324e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003262:	e065      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003390 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003276:	4b40      	ldr	r3, [pc, #256]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003286:	ed97 6a02 	vldr	s12, [r7, #8]
 800328a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800328e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800329a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032a6:	e043      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003394 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ea:	e021      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003390 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800330e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003312:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800331a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800331e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800332e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003330:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	0a5b      	lsrs	r3, r3, #9
 8003336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800333a:	3301      	adds	r3, #1
 800333c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003348:	edd7 6a07 	vldr	s13, [r7, #28]
 800334c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003354:	ee17 3a90 	vmov	r3, s15
 8003358:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800335a:	e005      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
      break;
 8003360:	e002      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003362:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003364:	61bb      	str	r3, [r7, #24]
      break;
 8003366:	bf00      	nop
  }

  return sysclockfreq;
 8003368:	69bb      	ldr	r3, [r7, #24]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	@ 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	58024400 	.word	0x58024400
 800337c:	03d09000 	.word	0x03d09000
 8003380:	003d0900 	.word	0x003d0900
 8003384:	007a1200 	.word	0x007a1200
 8003388:	46000000 	.word	0x46000000
 800338c:	4c742400 	.word	0x4c742400
 8003390:	4a742400 	.word	0x4a742400
 8003394:	4af42400 	.word	0x4af42400

08003398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800339e:	f7ff fe81 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b10      	ldr	r3, [pc, #64]	@ (80033e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	490f      	ldr	r1, [pc, #60]	@ (80033ec <HAL_RCC_GetHCLKFreq+0x54>)
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033bc:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	4a09      	ldr	r2, [pc, #36]	@ (80033ec <HAL_RCC_GetHCLKFreq+0x54>)
 80033c6:	5cd3      	ldrb	r3, [r2, r3]
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	fa22 f303 	lsr.w	r3, r2, r3
 80033d2:	4a07      	ldr	r2, [pc, #28]	@ (80033f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80033d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033d6:	4a07      	ldr	r2, [pc, #28]	@ (80033f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033dc:	4b04      	ldr	r3, [pc, #16]	@ (80033f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	58024400 	.word	0x58024400
 80033ec:	080068e0 	.word	0x080068e0
 80033f0:	24000004 	.word	0x24000004
 80033f4:	24000000 	.word	0x24000000

080033f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033fc:	f7ff ffcc 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4904      	ldr	r1, [pc, #16]	@ (8003420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	58024400 	.word	0x58024400
 8003420:	080068e0 	.word	0x080068e0

08003424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003428:	f7ff ffb6 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4904      	ldr	r1, [pc, #16]	@ (800344c <HAL_RCC_GetPCLK2Freq+0x28>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	58024400 	.word	0x58024400
 800344c:	080068e0 	.word	0x080068e0

08003450 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003454:	b0ca      	sub	sp, #296	@ 0x128
 8003456:	af00      	add	r7, sp, #0
 8003458:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003462:	2300      	movs	r3, #0
 8003464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003474:	2500      	movs	r5, #0
 8003476:	ea54 0305 	orrs.w	r3, r4, r5
 800347a:	d049      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003482:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003486:	d02f      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003488:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800348c:	d828      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800348e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003492:	d01a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003494:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003498:	d822      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800349e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034a2:	d007      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034a4:	e01c      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a6:	4bb8      	ldr	r3, [pc, #736]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	4ab7      	ldr	r2, [pc, #732]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034b2:	e01a      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	3308      	adds	r3, #8
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fc8f 	bl	8004de0 <RCCEx_PLL2_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034c8:	e00f      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	3328      	adds	r3, #40	@ 0x28
 80034d0:	2102      	movs	r1, #2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fd36 	bl	8004f44 <RCCEx_PLL3_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034de:	e004      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034e6:	e000      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034f2:	4ba5      	ldr	r3, [pc, #660]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003500:	4aa1      	ldr	r2, [pc, #644]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003502:	430b      	orrs	r3, r1
 8003504:	6513      	str	r3, [r2, #80]	@ 0x50
 8003506:	e003      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800350c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800351c:	f04f 0900 	mov.w	r9, #0
 8003520:	ea58 0309 	orrs.w	r3, r8, r9
 8003524:	d047      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	2b04      	cmp	r3, #4
 800352e:	d82a      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003530:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800354d 	.word	0x0800354d
 800353c:	0800355b 	.word	0x0800355b
 8003540:	08003571 	.word	0x08003571
 8003544:	0800358f 	.word	0x0800358f
 8003548:	0800358f 	.word	0x0800358f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354c:	4b8e      	ldr	r3, [pc, #568]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	4a8d      	ldr	r2, [pc, #564]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003558:	e01a      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355e:	3308      	adds	r3, #8
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fc3c 	bl	8004de0 <RCCEx_PLL2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800356e:	e00f      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003574:	3328      	adds	r3, #40	@ 0x28
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f001 fce3 	bl	8004f44 <RCCEx_PLL3_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003584:	e004      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003598:	4b7b      	ldr	r3, [pc, #492]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800359a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359c:	f023 0107 	bic.w	r1, r3, #7
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a6:	4a78      	ldr	r2, [pc, #480]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80035ac:	e003      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80035c2:	f04f 0b00 	mov.w	fp, #0
 80035c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80035ca:	d04c      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d6:	d030      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035dc:	d829      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035de:	2bc0      	cmp	r3, #192	@ 0xc0
 80035e0:	d02d      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80035e4:	d825      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035e6:	2b80      	cmp	r3, #128	@ 0x80
 80035e8:	d018      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80035ea:	2b80      	cmp	r3, #128	@ 0x80
 80035ec:	d821      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80035f2:	2b40      	cmp	r3, #64	@ 0x40
 80035f4:	d007      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80035f6:	e01c      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f8:	4b63      	ldr	r3, [pc, #396]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	4a62      	ldr	r2, [pc, #392]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003604:	e01c      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360a:	3308      	adds	r3, #8
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fbe6 	bl	8004de0 <RCCEx_PLL2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800361a:	e011      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003620:	3328      	adds	r3, #40	@ 0x28
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fc8d 	bl	8004f44 <RCCEx_PLL3_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003630:	e006      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800363e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003648:	4b4f      	ldr	r3, [pc, #316]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	4a4c      	ldr	r2, [pc, #304]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6513      	str	r3, [r2, #80]	@ 0x50
 800365c:	e003      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003672:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003676:	2300      	movs	r3, #0
 8003678:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800367c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003680:	460b      	mov	r3, r1
 8003682:	4313      	orrs	r3, r2
 8003684:	d053      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800368e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003692:	d035      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003694:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003698:	d82e      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800369a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800369e:	d031      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036a4:	d828      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036aa:	d01a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80036ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036b0:	d822      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80036b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036ba:	d007      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036bc:	e01c      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036be:	4b32      	ldr	r3, [pc, #200]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	4a31      	ldr	r2, [pc, #196]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ca:	e01c      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d0:	3308      	adds	r3, #8
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 fb83 	bl	8004de0 <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036e0:	e011      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e6:	3328      	adds	r3, #40	@ 0x28
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fc2a 	bl	8004f44 <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036f6:	e006      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036fe:	e002      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800370e:	4b1e      	ldr	r3, [pc, #120]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800371e:	4a1a      	ldr	r2, [pc, #104]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003720:	430b      	orrs	r3, r1
 8003722:	6593      	str	r3, [r2, #88]	@ 0x58
 8003724:	e003      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800373a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003744:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d056      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003756:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800375a:	d038      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800375c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003760:	d831      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003762:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003766:	d034      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003768:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800376c:	d82b      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800376e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003772:	d01d      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003774:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003778:	d825      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d006      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800377e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003784:	e01f      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003786:	bf00      	nop
 8003788:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378c:	4ba2      	ldr	r3, [pc, #648]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	4aa1      	ldr	r2, [pc, #644]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003798:	e01c      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379e:	3308      	adds	r3, #8
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 fb1c 	bl	8004de0 <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037ae:	e011      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	3328      	adds	r3, #40	@ 0x28
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fbc3 	bl	8004f44 <RCCEx_PLL3_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c4:	e006      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037cc:	e002      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037ec:	4a8a      	ldr	r2, [pc, #552]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003808:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003812:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003816:	460b      	mov	r3, r1
 8003818:	4313      	orrs	r3, r2
 800381a:	d03a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003822:	2b30      	cmp	r3, #48	@ 0x30
 8003824:	d01f      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003826:	2b30      	cmp	r3, #48	@ 0x30
 8003828:	d819      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800382a:	2b20      	cmp	r3, #32
 800382c:	d00c      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800382e:	2b20      	cmp	r3, #32
 8003830:	d815      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d019      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003836:	2b10      	cmp	r3, #16
 8003838:	d111      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383a:	4b77      	ldr	r3, [pc, #476]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	4a76      	ldr	r2, [pc, #472]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003844:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003846:	e011      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384c:	3308      	adds	r3, #8
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f001 fac5 	bl	8004de0 <RCCEx_PLL2_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800385c:	e006      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003864:	e002      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800386a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003874:	4b68      	ldr	r3, [pc, #416]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003878:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003882:	4a65      	ldr	r2, [pc, #404]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003884:	430b      	orrs	r3, r1
 8003886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003888:	e003      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800389e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4313      	orrs	r3, r2
 80038b0:	d051      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038bc:	d035      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038c2:	d82e      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038c8:	d031      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038ce:	d828      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d4:	d01a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80038d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038da:	d822      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e4:	d007      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80038e6:	e01c      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038f4:	e01c      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	3308      	adds	r3, #8
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 fa6e 	bl	8004de0 <RCCEx_PLL2_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800390a:	e011      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003910:	3328      	adds	r3, #40	@ 0x28
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fb15 	bl	8004f44 <RCCEx_PLL3_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003920:	e006      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003928:	e002      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800392e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003938:	4b37      	ldr	r3, [pc, #220]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	4a34      	ldr	r2, [pc, #208]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003948:	430b      	orrs	r3, r1
 800394a:	6513      	str	r3, [r2, #80]	@ 0x50
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003962:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800396c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003970:	460b      	mov	r3, r1
 8003972:	4313      	orrs	r3, r2
 8003974:	d056      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800397c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003980:	d033      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003982:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003986:	d82c      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003988:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800398c:	d02f      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800398e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003992:	d826      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003994:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003998:	d02b      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800399a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800399e:	d820      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039a4:	d012      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80039a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039aa:	d81a      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d022      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b4:	d115      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	3308      	adds	r3, #8
 80039bc:	2101      	movs	r1, #1
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 fa0e 	bl	8004de0 <RCCEx_PLL2_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039ca:	e015      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d0:	3328      	adds	r3, #40	@ 0x28
 80039d2:	2101      	movs	r1, #1
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 fab5 	bl	8004f44 <RCCEx_PLL3_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039e0:	e00a      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e8:	e006      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039ea:	bf00      	nop
 80039ec:	e004      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039ee:	bf00      	nop
 80039f0:	e002      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039f2:	bf00      	nop
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10d      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a00:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a04:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a0e:	4a02      	ldr	r2, [pc, #8]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a10:	430b      	orrs	r3, r1
 8003a12:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a14:	e006      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a16:	bf00      	nop
 8003a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a3a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d055      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a50:	d033      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a56:	d82c      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5c:	d02f      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a62:	d826      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a68:	d02b      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a6e:	d820      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a74:	d012      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a7a:	d81a      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d022      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a84:	d115      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 f9a6 	bl	8004de0 <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e015      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	3328      	adds	r3, #40	@ 0x28
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fa4d 	bl	8004f44 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ab8:	e006      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aba:	bf00      	nop
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ad0:	4ba3      	ldr	r3, [pc, #652]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ae0:	4a9f      	ldr	r2, [pc, #636]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae6:	e003      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	d037      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b1a:	d00e      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b20:	d816      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d018      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b2a:	d111      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2c:	4b8c      	ldr	r3, [pc, #560]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	4a8b      	ldr	r2, [pc, #556]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b38:	e00f      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	3308      	adds	r3, #8
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 f94c 	bl	8004de0 <RCCEx_PLL2_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b4e:	e004      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b56:	e000      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b62:	4b7f      	ldr	r3, [pc, #508]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b66:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b70:	4a7b      	ldr	r2, [pc, #492]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b76:	e003      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d039      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d81c      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003baa:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003bed 	.word	0x08003bed
 8003bb4:	08003bc1 	.word	0x08003bc1
 8003bb8:	08003bcf 	.word	0x08003bcf
 8003bbc:	08003bed 	.word	0x08003bed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc0:	4b67      	ldr	r3, [pc, #412]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	4a66      	ldr	r2, [pc, #408]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bcc:	e00f      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 f902 	bl	8004de0 <RCCEx_PLL2_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003be2:	e004      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfa:	f023 0103 	bic.w	r1, r3, #3
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c04:	4a56      	ldr	r2, [pc, #344]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c06:	430b      	orrs	r3, r1
 8003c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c0a:	e003      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f000 809f 	beq.w	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c36:	4b4b      	ldr	r3, [pc, #300]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c42:	f7fd fa5f 	bl	8001104 <HAL_GetTick>
 8003c46:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c4a:	e00b      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4c:	f7fd fa5a 	bl	8001104 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b64      	cmp	r3, #100	@ 0x64
 8003c5a:	d903      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c62:	e005      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c64:	4b3f      	ldr	r3, [pc, #252]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ed      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d179      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c78:	4b39      	ldr	r3, [pc, #228]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c84:	4053      	eors	r3, r2
 8003c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d015      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c8e:	4b34      	ldr	r3, [pc, #208]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c9a:	4b31      	ldr	r3, [pc, #196]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	4a30      	ldr	r2, [pc, #192]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a2d      	ldr	r2, [pc, #180]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cb8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc6:	d118      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fa1c 	bl	8001104 <HAL_GetTick>
 8003ccc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd0:	e00d      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fd fa17 	bl	8001104 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cdc:	1ad2      	subs	r2, r2, r3
 8003cde:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d903      	bls.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003cec:	e005      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cee:	4b1c      	ldr	r3, [pc, #112]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0eb      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d129      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d12:	d10e      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d14:	4b12      	ldr	r3, [pc, #72]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d24:	091a      	lsrs	r2, r3, #4
 8003d26:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6113      	str	r3, [r2, #16]
 8003d30:	e005      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d32:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	4a0a      	ldr	r2, [pc, #40]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d3c:	6113      	str	r3, [r2, #16]
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d40:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4e:	4a04      	ldr	r2, [pc, #16]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d54:	e00e      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003d5e:	e009      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d60:	58024400 	.word	0x58024400
 8003d64:	58024800 	.word	0x58024800
 8003d68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f002 0301 	and.w	r3, r2, #1
 8003d80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f000 8089 	beq.w	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d9c:	2b28      	cmp	r3, #40	@ 0x28
 8003d9e:	d86b      	bhi.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003da0:	a201      	add	r2, pc, #4	@ (adr r2, 8003da8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003e81 	.word	0x08003e81
 8003dac:	08003e79 	.word	0x08003e79
 8003db0:	08003e79 	.word	0x08003e79
 8003db4:	08003e79 	.word	0x08003e79
 8003db8:	08003e79 	.word	0x08003e79
 8003dbc:	08003e79 	.word	0x08003e79
 8003dc0:	08003e79 	.word	0x08003e79
 8003dc4:	08003e79 	.word	0x08003e79
 8003dc8:	08003e4d 	.word	0x08003e4d
 8003dcc:	08003e79 	.word	0x08003e79
 8003dd0:	08003e79 	.word	0x08003e79
 8003dd4:	08003e79 	.word	0x08003e79
 8003dd8:	08003e79 	.word	0x08003e79
 8003ddc:	08003e79 	.word	0x08003e79
 8003de0:	08003e79 	.word	0x08003e79
 8003de4:	08003e79 	.word	0x08003e79
 8003de8:	08003e63 	.word	0x08003e63
 8003dec:	08003e79 	.word	0x08003e79
 8003df0:	08003e79 	.word	0x08003e79
 8003df4:	08003e79 	.word	0x08003e79
 8003df8:	08003e79 	.word	0x08003e79
 8003dfc:	08003e79 	.word	0x08003e79
 8003e00:	08003e79 	.word	0x08003e79
 8003e04:	08003e79 	.word	0x08003e79
 8003e08:	08003e81 	.word	0x08003e81
 8003e0c:	08003e79 	.word	0x08003e79
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003e79 	.word	0x08003e79
 8003e18:	08003e79 	.word	0x08003e79
 8003e1c:	08003e79 	.word	0x08003e79
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003e81 	.word	0x08003e81
 8003e2c:	08003e79 	.word	0x08003e79
 8003e30:	08003e79 	.word	0x08003e79
 8003e34:	08003e79 	.word	0x08003e79
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08003e81 	.word	0x08003e81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e50:	3308      	adds	r3, #8
 8003e52:	2101      	movs	r1, #1
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 ffc3 	bl	8004de0 <RCCEx_PLL2_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e60:	e00f      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	3328      	adds	r3, #40	@ 0x28
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 f86a 	bl	8004f44 <RCCEx_PLL3_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e76:	e004      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e8a:	4bbf      	ldr	r3, [pc, #764]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e98:	4abb      	ldr	r2, [pc, #748]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e9e:	e003      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f002 0302 	and.w	r3, r2, #2
 8003eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ebe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	d041      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	d824      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003f25 	.word	0x08003f25
 8003edc:	08003ef1 	.word	0x08003ef1
 8003ee0:	08003f07 	.word	0x08003f07
 8003ee4:	08003f25 	.word	0x08003f25
 8003ee8:	08003f25 	.word	0x08003f25
 8003eec:	08003f25 	.word	0x08003f25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 ff71 	bl	8004de0 <RCCEx_PLL2_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f04:	e00f      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0a:	3328      	adds	r3, #40	@ 0x28
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f818 	bl	8004f44 <RCCEx_PLL3_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f1a:	e004      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f22:	e000      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f2e:	4b96      	ldr	r3, [pc, #600]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f32:	f023 0107 	bic.w	r1, r3, #7
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f3c:	4a92      	ldr	r2, [pc, #584]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f42:	e003      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f002 0304 	and.w	r3, r2, #4
 8003f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d044      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d825      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003f78:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003fcd 	.word	0x08003fcd
 8003f84:	08003f99 	.word	0x08003f99
 8003f88:	08003faf 	.word	0x08003faf
 8003f8c:	08003fcd 	.word	0x08003fcd
 8003f90:	08003fcd 	.word	0x08003fcd
 8003f94:	08003fcd 	.word	0x08003fcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 ff1d 	bl	8004de0 <RCCEx_PLL2_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fac:	e00f      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	3328      	adds	r3, #40	@ 0x28
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ffc4 	bl	8004f44 <RCCEx_PLL3_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e004      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	f023 0107 	bic.w	r1, r3, #7
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe6:	4a68      	ldr	r2, [pc, #416]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fec:	e003      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f002 0320 	and.w	r3, r2, #32
 8004002:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004006:	2300      	movs	r3, #0
 8004008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800400c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004010:	460b      	mov	r3, r1
 8004012:	4313      	orrs	r3, r2
 8004014:	d055      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004022:	d033      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004028:	d82c      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800402a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402e:	d02f      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004034:	d826      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800403a:	d02b      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800403c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004040:	d820      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004046:	d012      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800404c:	d81a      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d022      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004056:	d115      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	3308      	adds	r3, #8
 800405e:	2100      	movs	r1, #0
 8004060:	4618      	mov	r0, r3
 8004062:	f000 febd 	bl	8004de0 <RCCEx_PLL2_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800406c:	e015      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	3328      	adds	r3, #40	@ 0x28
 8004074:	2102      	movs	r1, #2
 8004076:	4618      	mov	r0, r3
 8004078:	f000 ff64 	bl	8004f44 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004082:	e00a      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800408a:	e006      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800408c:	bf00      	nop
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040a2:	4b39      	ldr	r3, [pc, #228]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b2:	4a35      	ldr	r2, [pc, #212]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80040ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d058      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040ee:	d033      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80040f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040f4:	d82c      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fa:	d02f      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004100:	d826      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004102:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004106:	d02b      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004108:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800410c:	d820      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800410e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004112:	d012      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004118:	d81a      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d022      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004122:	d115      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	3308      	adds	r3, #8
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fe57 	bl	8004de0 <RCCEx_PLL2_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004138:	e015      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413e:	3328      	adds	r3, #40	@ 0x28
 8004140:	2102      	movs	r1, #2
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fefe 	bl	8004f44 <RCCEx_PLL3_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800414e:	e00a      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004156:	e006      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004158:	bf00      	nop
 800415a:	e004      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800415c:	bf00      	nop
 800415e:	e002      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004160:	bf00      	nop
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10e      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800417e:	4a02      	ldr	r2, [pc, #8]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004180:	430b      	orrs	r3, r1
 8004182:	6593      	str	r3, [r2, #88]	@ 0x58
 8004184:	e006      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004186:	bf00      	nop
 8004188:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80041a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041ae:	460b      	mov	r3, r1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	d055      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041c0:	d033      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80041c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041c6:	d82c      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041cc:	d02f      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80041ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041d2:	d826      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80041d8:	d02b      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80041da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80041de:	d820      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e4:	d012      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80041e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ea:	d81a      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d022      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80041f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f4:	d115      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	3308      	adds	r3, #8
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fdee 	bl	8004de0 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800420a:	e015      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004210:	3328      	adds	r3, #40	@ 0x28
 8004212:	2102      	movs	r1, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fe95 	bl	8004f44 <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004220:	e00a      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004228:	e006      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800422a:	bf00      	nop
 800422c:	e004      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800422e:	bf00      	nop
 8004230:	e002      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004232:	bf00      	nop
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004238:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004240:	4ba1      	ldr	r3, [pc, #644]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004250:	4a9d      	ldr	r2, [pc, #628]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004252:	430b      	orrs	r3, r1
 8004254:	6593      	str	r3, [r2, #88]	@ 0x58
 8004256:	e003      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800425c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f002 0308 	and.w	r3, r2, #8
 800426c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004270:	2300      	movs	r3, #0
 8004272:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004276:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800427a:	460b      	mov	r3, r1
 800427c:	4313      	orrs	r3, r2
 800427e:	d01e      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428c:	d10c      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	3328      	adds	r3, #40	@ 0x28
 8004294:	2102      	movs	r1, #2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fe54 	bl	8004f44 <RCCEx_PLL3_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042a8:	4b87      	ldr	r3, [pc, #540]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b8:	4a83      	ldr	r2, [pc, #524]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ba:	430b      	orrs	r3, r1
 80042bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	f002 0310 	and.w	r3, r2, #16
 80042ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042ce:	2300      	movs	r3, #0
 80042d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80042d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d01e      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ea:	d10c      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f0:	3328      	adds	r3, #40	@ 0x28
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fe25 	bl	8004f44 <RCCEx_PLL3_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004306:	4b70      	ldr	r3, [pc, #448]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004316:	4a6c      	ldr	r2, [pc, #432]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004318:	430b      	orrs	r3, r1
 800431a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004328:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004332:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d03e      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004348:	d022      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800434a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800434e:	d81b      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004358:	d00b      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800435a:	e015      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	3308      	adds	r3, #8
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fd3b 	bl	8004de0 <RCCEx_PLL2_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004370:	e00f      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004376:	3328      	adds	r3, #40	@ 0x28
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fde2 	bl	8004f44 <RCCEx_PLL3_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004386:	e004      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800439a:	4b4b      	ldr	r3, [pc, #300]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043aa:	4a47      	ldr	r2, [pc, #284]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80043b0:	e003      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80043c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043c8:	2300      	movs	r3, #0
 80043ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043d0:	460b      	mov	r3, r1
 80043d2:	4313      	orrs	r3, r2
 80043d4:	d03b      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043e2:	d01f      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80043e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043e8:	d818      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80043ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ee:	d003      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80043f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043f4:	d007      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80043f6:	e011      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f8:	4b33      	ldr	r3, [pc, #204]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	4a32      	ldr	r2, [pc, #200]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004404:	e00f      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	3328      	adds	r3, #40	@ 0x28
 800440c:	2101      	movs	r1, #1
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fd98 	bl	8004f44 <RCCEx_PLL3_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800441a:	e004      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800442e:	4b26      	ldr	r3, [pc, #152]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004432:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443e:	4a22      	ldr	r2, [pc, #136]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004440:	430b      	orrs	r3, r1
 8004442:	6553      	str	r3, [r2, #84]	@ 0x54
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800444a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800445a:	673b      	str	r3, [r7, #112]	@ 0x70
 800445c:	2300      	movs	r3, #0
 800445e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004460:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004464:	460b      	mov	r3, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	d034      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004478:	d007      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800447a:	e011      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	4a11      	ldr	r2, [pc, #68]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004488:	e00e      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448e:	3308      	adds	r3, #8
 8004490:	2102      	movs	r1, #2
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fca4 	bl	8004de0 <RCCEx_PLL2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800449e:	e003      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10d      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044be:	4a02      	ldr	r2, [pc, #8]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044c4:	e006      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80044c6:	bf00      	nop
 80044c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80044e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e2:	2300      	movs	r3, #0
 80044e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	d00c      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f4:	3328      	adds	r3, #40	@ 0x28
 80044f6:	2102      	movs	r1, #2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fd23 	bl	8004f44 <RCCEx_PLL3_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004516:	663b      	str	r3, [r7, #96]	@ 0x60
 8004518:	2300      	movs	r3, #0
 800451a:	667b      	str	r3, [r7, #100]	@ 0x64
 800451c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004520:	460b      	mov	r3, r1
 8004522:	4313      	orrs	r3, r2
 8004524:	d038      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800452e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004532:	d018      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004538:	d811      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800453a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800453e:	d014      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004544:	d80b      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d011      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800454a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800454e:	d106      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004550:	4bc3      	ldr	r3, [pc, #780]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	4ac2      	ldr	r2, [pc, #776]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800455a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800455c:	e008      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004564:	e004      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004566:	bf00      	nop
 8004568:	e002      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800456a:	bf00      	nop
 800456c:	e000      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800456e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004578:	4bb9      	ldr	r3, [pc, #740]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004588:	4ab5      	ldr	r2, [pc, #724]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458a:	430b      	orrs	r3, r1
 800458c:	6553      	str	r3, [r2, #84]	@ 0x54
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80045a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045a6:	2300      	movs	r3, #0
 80045a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	d009      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045b4:	4baa      	ldr	r3, [pc, #680]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c2:	4aa7      	ldr	r2, [pc, #668]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80045d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d6:	2300      	movs	r3, #0
 80045d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80045da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045e4:	4b9e      	ldr	r3, [pc, #632]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80045ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80045f4:	4a9a      	ldr	r2, [pc, #616]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045f6:	430b      	orrs	r3, r1
 80045f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004608:	2300      	movs	r3, #0
 800460a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800460c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004610:	460b      	mov	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	d009      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004616:	4b92      	ldr	r3, [pc, #584]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004624:	4a8e      	ldr	r2, [pc, #568]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004626:	430b      	orrs	r3, r1
 8004628:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004636:	643b      	str	r3, [r7, #64]	@ 0x40
 8004638:	2300      	movs	r3, #0
 800463a:	647b      	str	r3, [r7, #68]	@ 0x44
 800463c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004640:	460b      	mov	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	d00e      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004646:	4b86      	ldr	r3, [pc, #536]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	4a85      	ldr	r2, [pc, #532]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004650:	6113      	str	r3, [r2, #16]
 8004652:	4b83      	ldr	r3, [pc, #524]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004654:	6919      	ldr	r1, [r3, #16]
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800465e:	4a80      	ldr	r2, [pc, #512]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004660:	430b      	orrs	r3, r1
 8004662:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004672:	2300      	movs	r3, #0
 8004674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004676:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800467a:	460b      	mov	r3, r1
 800467c:	4313      	orrs	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004680:	4b77      	ldr	r3, [pc, #476]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004684:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468e:	4a74      	ldr	r2, [pc, #464]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004690:	430b      	orrs	r3, r1
 8004692:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80046a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046a2:	2300      	movs	r3, #0
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046b0:	4b6b      	ldr	r3, [pc, #428]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046c0:	4a67      	ldr	r2, [pc, #412]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c2:	430b      	orrs	r3, r1
 80046c4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	2100      	movs	r1, #0
 80046d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80046dc:	460b      	mov	r3, r1
 80046de:	4313      	orrs	r3, r2
 80046e0:	d011      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e6:	3308      	adds	r3, #8
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fb78 	bl	8004de0 <RCCEx_PLL2_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	2100      	movs	r1, #0
 8004710:	6239      	str	r1, [r7, #32]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
 8004718:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d011      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	3308      	adds	r3, #8
 8004728:	2101      	movs	r1, #1
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fb58 	bl	8004de0 <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	2100      	movs	r1, #0
 8004750:	61b9      	str	r1, [r7, #24]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800475c:	460b      	mov	r3, r1
 800475e:	4313      	orrs	r3, r2
 8004760:	d011      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3308      	adds	r3, #8
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fb38 	bl	8004de0 <RCCEx_PLL2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	2100      	movs	r1, #0
 8004790:	6139      	str	r1, [r7, #16]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800479c:	460b      	mov	r3, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	d011      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	3328      	adds	r3, #40	@ 0x28
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fbca 	bl	8004f44 <RCCEx_PLL3_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80047b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	2100      	movs	r1, #0
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047dc:	460b      	mov	r3, r1
 80047de:	4313      	orrs	r3, r2
 80047e0:	d011      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e6:	3328      	adds	r3, #40	@ 0x28
 80047e8:	2101      	movs	r1, #1
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fbaa 	bl	8004f44 <RCCEx_PLL3_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	2100      	movs	r1, #0
 8004810:	6039      	str	r1, [r7, #0]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	e9d7 1200 	ldrd	r1, r2, [r7]
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d011      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004826:	3328      	adds	r3, #40	@ 0x28
 8004828:	2102      	movs	r1, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fb8a 	bl	8004f44 <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004846:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
}
 8004854:	4618      	mov	r0, r3
 8004856:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800485a:	46bd      	mov	sp, r7
 800485c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004860:	58024400 	.word	0x58024400

08004864 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004868:	f7fe fd96 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 800486c:	4602      	mov	r2, r0
 800486e:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4904      	ldr	r1, [pc, #16]	@ (800488c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800487a:	5ccb      	ldrb	r3, [r1, r3]
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	58024400 	.word	0x58024400
 800488c:	080068e0 	.word	0x080068e0

08004890 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004890:	b480      	push	{r7}
 8004892:	b089      	sub	sp, #36	@ 0x24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004898:	4ba1      	ldr	r3, [pc, #644]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80048a2:	4b9f      	ldr	r3, [pc, #636]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a6:	0b1b      	lsrs	r3, r3, #12
 80048a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80048ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80048ba:	4b99      	ldr	r3, [pc, #612]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048be:	08db      	lsrs	r3, r3, #3
 80048c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8111 	beq.w	8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	f000 8083 	beq.w	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	f200 80a1 	bhi.w	8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d056      	beq.n	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80048fa:	e099      	b.n	8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048fc:	4b88      	ldr	r3, [pc, #544]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d02d      	beq.n	8004964 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004908:	4b85      	ldr	r3, [pc, #532]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	08db      	lsrs	r3, r3, #3
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	4a84      	ldr	r2, [pc, #528]	@ (8004b24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
 8004918:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b7b      	ldr	r3, [pc, #492]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004942:	ed97 6a03 	vldr	s12, [r7, #12]
 8004946:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004962:	e087      	b.n	8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004976:	4b6a      	ldr	r3, [pc, #424]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	ed97 6a03 	vldr	s12, [r7, #12]
 800498a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049a6:	e065      	b.n	8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ba:	4b59      	ldr	r3, [pc, #356]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ea:	e043      	b.n	8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80049fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fe:	4b48      	ldr	r3, [pc, #288]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a2e:	e021      	b.n	8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a42:	4b37      	ldr	r3, [pc, #220]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a74:	4b2a      	ldr	r3, [pc, #168]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a78:	0a5b      	lsrs	r3, r3, #9
 8004a7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9a:	ee17 2a90 	vmov	r2, s15
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	0c1b      	lsrs	r3, r3, #16
 8004aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac8:	ee17 2a90 	vmov	r2, s15
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ad0:	4b13      	ldr	r3, [pc, #76]	@ (8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad4:	0e1b      	lsrs	r3, r3, #24
 8004ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af6:	ee17 2a90 	vmov	r2, s15
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004afe:	e008      	b.n	8004b12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	609a      	str	r2, [r3, #8]
}
 8004b12:	bf00      	nop
 8004b14:	3724      	adds	r7, #36	@ 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400
 8004b24:	03d09000 	.word	0x03d09000
 8004b28:	46000000 	.word	0x46000000
 8004b2c:	4c742400 	.word	0x4c742400
 8004b30:	4a742400 	.word	0x4a742400
 8004b34:	4af42400 	.word	0x4af42400

08004b38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b089      	sub	sp, #36	@ 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b40:	4ba1      	ldr	r3, [pc, #644]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b4a:	4b9f      	ldr	r3, [pc, #636]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	0d1b      	lsrs	r3, r3, #20
 8004b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b56:	4b9c      	ldr	r3, [pc, #624]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b62:	4b99      	ldr	r3, [pc, #612]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b66:	08db      	lsrs	r3, r3, #3
 8004b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8111 	beq.w	8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	f000 8083 	beq.w	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	f200 80a1 	bhi.w	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d056      	beq.n	8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ba2:	e099      	b.n	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ba4:	4b88      	ldr	r3, [pc, #544]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02d      	beq.n	8004c0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bb0:	4b85      	ldr	r3, [pc, #532]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	08db      	lsrs	r3, r3, #3
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	4a84      	ldr	r2, [pc, #528]	@ (8004dcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bda:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c0a:	e087      	b.n	8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4e:	e065      	b.n	8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c62:	4b59      	ldr	r3, [pc, #356]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c92:	e043      	b.n	8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca6:	4b48      	ldr	r3, [pc, #288]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cd6:	e021      	b.n	8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cea:	4b37      	ldr	r3, [pc, #220]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	0a5b      	lsrs	r3, r3, #9
 8004d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d42:	ee17 2a90 	vmov	r2, s15
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	0c1b      	lsrs	r3, r3, #16
 8004d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d54:	ee07 3a90 	vmov	s15, r3
 8004d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d70:	ee17 2a90 	vmov	r2, s15
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004d78:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	0e1b      	lsrs	r3, r3, #24
 8004d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9e:	ee17 2a90 	vmov	r2, s15
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004da6:	e008      	b.n	8004dba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	609a      	str	r2, [r3, #8]
}
 8004dba:	bf00      	nop
 8004dbc:	3724      	adds	r7, #36	@ 0x24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	03d09000 	.word	0x03d09000
 8004dd0:	46000000 	.word	0x46000000
 8004dd4:	4c742400 	.word	0x4c742400
 8004dd8:	4a742400 	.word	0x4a742400
 8004ddc:	4af42400 	.word	0x4af42400

08004de0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dee:	4b53      	ldr	r3, [pc, #332]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d101      	bne.n	8004dfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e099      	b.n	8004f32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a4e      	ldr	r2, [pc, #312]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e04:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0a:	f7fc f97b 	bl	8001104 <HAL_GetTick>
 8004e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e10:	e008      	b.n	8004e24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e12:	f7fc f977 	bl	8001104 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e086      	b.n	8004f32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e24:	4b45      	ldr	r3, [pc, #276]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e30:	4b42      	ldr	r3, [pc, #264]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	031b      	lsls	r3, r3, #12
 8004e3e:	493f      	ldr	r1, [pc, #252]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	025b      	lsls	r3, r3, #9
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e74:	4931      	ldr	r1, [pc, #196]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e7a:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	492d      	ldr	r1, [pc, #180]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	f023 0220 	bic.w	r2, r3, #32
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	4928      	ldr	r1, [pc, #160]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	4a26      	ldr	r2, [pc, #152]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004ea4:	f023 0310 	bic.w	r3, r3, #16
 8004ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004eaa:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eae:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <RCCEx_PLL2_Config+0x160>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	69d2      	ldr	r2, [r2, #28]
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	4920      	ldr	r1, [pc, #128]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004ec4:	f043 0310 	orr.w	r3, r3, #16
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	4a19      	ldr	r2, [pc, #100]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004ed6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004eda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004edc:	e00f      	b.n	8004efe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d106      	bne.n	8004ef2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ee4:	4b15      	ldr	r3, [pc, #84]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	4a14      	ldr	r2, [pc, #80]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ef0:	e005      	b.n	8004efe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ef2:	4b12      	ldr	r3, [pc, #72]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	4a11      	ldr	r2, [pc, #68]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004efc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004efe:	4b0f      	ldr	r3, [pc, #60]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a0e      	ldr	r2, [pc, #56]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004f04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0a:	f7fc f8fb 	bl	8001104 <HAL_GetTick>
 8004f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f10:	e008      	b.n	8004f24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f12:	f7fc f8f7 	bl	8001104 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e006      	b.n	8004f32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <RCCEx_PLL2_Config+0x15c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	ffff0007 	.word	0xffff0007

08004f44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f52:	4b53      	ldr	r3, [pc, #332]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d101      	bne.n	8004f62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e099      	b.n	8005096 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f62:	4b4f      	ldr	r3, [pc, #316]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a4e      	ldr	r2, [pc, #312]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6e:	f7fc f8c9 	bl	8001104 <HAL_GetTick>
 8004f72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f74:	e008      	b.n	8004f88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f76:	f7fc f8c5 	bl	8001104 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e086      	b.n	8005096 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f88:	4b45      	ldr	r3, [pc, #276]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f94:	4b42      	ldr	r3, [pc, #264]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f98:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	051b      	lsls	r3, r3, #20
 8004fa2:	493f      	ldr	r1, [pc, #252]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	025b      	lsls	r3, r3, #9
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fd8:	4931      	ldr	r1, [pc, #196]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004fde:	4b30      	ldr	r3, [pc, #192]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	492d      	ldr	r1, [pc, #180]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	4928      	ldr	r1, [pc, #160]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005002:	4b27      	ldr	r3, [pc, #156]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	4a26      	ldr	r2, [pc, #152]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8005008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800500c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800500e:	4b24      	ldr	r3, [pc, #144]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8005010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005012:	4b24      	ldr	r3, [pc, #144]	@ (80050a4 <RCCEx_PLL3_Config+0x160>)
 8005014:	4013      	ands	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	69d2      	ldr	r2, [r2, #28]
 800501a:	00d2      	lsls	r2, r2, #3
 800501c:	4920      	ldr	r1, [pc, #128]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005022:	4b1f      	ldr	r3, [pc, #124]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	4a1e      	ldr	r2, [pc, #120]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8005028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800502c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005034:	4b1a      	ldr	r3, [pc, #104]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	4a19      	ldr	r2, [pc, #100]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 800503a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800503e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005040:	e00f      	b.n	8005062 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d106      	bne.n	8005056 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005048:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 800504a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504c:	4a14      	ldr	r2, [pc, #80]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 800504e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005052:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005054:	e005      	b.n	8005062 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005056:	4b12      	ldr	r3, [pc, #72]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	4a11      	ldr	r2, [pc, #68]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 800505c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005060:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005062:	4b0f      	ldr	r3, [pc, #60]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a0e      	ldr	r2, [pc, #56]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800506c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506e:	f7fc f849 	bl	8001104 <HAL_GetTick>
 8005072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005074:	e008      	b.n	8005088 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005076:	f7fc f845 	bl	8001104 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e006      	b.n	8005096 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005088:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <RCCEx_PLL3_Config+0x15c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	58024400 	.word	0x58024400
 80050a4:	ffff0007 	.word	0xffff0007

080050a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e042      	b.n	8005140 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fb fe43 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2224      	movs	r2, #36	@ 0x24
 80050d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fd90 	bl	8005c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f825 	bl	8005148 <UART_SetConfig>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e01b      	b.n	8005140 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fe0f 	bl	8005d5c <UART_CheckIdleState>
 800513e:	4603      	mov	r3, r0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800514c:	b092      	sub	sp, #72	@ 0x48
 800514e:	af00      	add	r7, sp, #0
 8005150:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	431a      	orrs	r2, r3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	431a      	orrs	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	4313      	orrs	r3, r2
 800516e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4bbe      	ldr	r3, [pc, #760]	@ (8005470 <UART_SetConfig+0x328>)
 8005178:	4013      	ands	r3, r2
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005180:	430b      	orrs	r3, r1
 8005182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4ab3      	ldr	r2, [pc, #716]	@ (8005474 <UART_SetConfig+0x32c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051b0:	4313      	orrs	r3, r2
 80051b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	4baf      	ldr	r3, [pc, #700]	@ (8005478 <UART_SetConfig+0x330>)
 80051bc:	4013      	ands	r3, r2
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051c4:	430b      	orrs	r3, r1
 80051c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ce:	f023 010f 	bic.w	r1, r3, #15
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4aa6      	ldr	r2, [pc, #664]	@ (800547c <UART_SetConfig+0x334>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d177      	bne.n	80052d8 <UART_SetConfig+0x190>
 80051e8:	4ba5      	ldr	r3, [pc, #660]	@ (8005480 <UART_SetConfig+0x338>)
 80051ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051f0:	2b28      	cmp	r3, #40	@ 0x28
 80051f2:	d86d      	bhi.n	80052d0 <UART_SetConfig+0x188>
 80051f4:	a201      	add	r2, pc, #4	@ (adr r2, 80051fc <UART_SetConfig+0xb4>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	080052a1 	.word	0x080052a1
 8005200:	080052d1 	.word	0x080052d1
 8005204:	080052d1 	.word	0x080052d1
 8005208:	080052d1 	.word	0x080052d1
 800520c:	080052d1 	.word	0x080052d1
 8005210:	080052d1 	.word	0x080052d1
 8005214:	080052d1 	.word	0x080052d1
 8005218:	080052d1 	.word	0x080052d1
 800521c:	080052a9 	.word	0x080052a9
 8005220:	080052d1 	.word	0x080052d1
 8005224:	080052d1 	.word	0x080052d1
 8005228:	080052d1 	.word	0x080052d1
 800522c:	080052d1 	.word	0x080052d1
 8005230:	080052d1 	.word	0x080052d1
 8005234:	080052d1 	.word	0x080052d1
 8005238:	080052d1 	.word	0x080052d1
 800523c:	080052b1 	.word	0x080052b1
 8005240:	080052d1 	.word	0x080052d1
 8005244:	080052d1 	.word	0x080052d1
 8005248:	080052d1 	.word	0x080052d1
 800524c:	080052d1 	.word	0x080052d1
 8005250:	080052d1 	.word	0x080052d1
 8005254:	080052d1 	.word	0x080052d1
 8005258:	080052d1 	.word	0x080052d1
 800525c:	080052b9 	.word	0x080052b9
 8005260:	080052d1 	.word	0x080052d1
 8005264:	080052d1 	.word	0x080052d1
 8005268:	080052d1 	.word	0x080052d1
 800526c:	080052d1 	.word	0x080052d1
 8005270:	080052d1 	.word	0x080052d1
 8005274:	080052d1 	.word	0x080052d1
 8005278:	080052d1 	.word	0x080052d1
 800527c:	080052c1 	.word	0x080052c1
 8005280:	080052d1 	.word	0x080052d1
 8005284:	080052d1 	.word	0x080052d1
 8005288:	080052d1 	.word	0x080052d1
 800528c:	080052d1 	.word	0x080052d1
 8005290:	080052d1 	.word	0x080052d1
 8005294:	080052d1 	.word	0x080052d1
 8005298:	080052d1 	.word	0x080052d1
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a6:	e222      	b.n	80056ee <UART_SetConfig+0x5a6>
 80052a8:	2304      	movs	r3, #4
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e21e      	b.n	80056ee <UART_SetConfig+0x5a6>
 80052b0:	2308      	movs	r3, #8
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e21a      	b.n	80056ee <UART_SetConfig+0x5a6>
 80052b8:	2310      	movs	r3, #16
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e216      	b.n	80056ee <UART_SetConfig+0x5a6>
 80052c0:	2320      	movs	r3, #32
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e212      	b.n	80056ee <UART_SetConfig+0x5a6>
 80052c8:	2340      	movs	r3, #64	@ 0x40
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e20e      	b.n	80056ee <UART_SetConfig+0x5a6>
 80052d0:	2380      	movs	r3, #128	@ 0x80
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e20a      	b.n	80056ee <UART_SetConfig+0x5a6>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a69      	ldr	r2, [pc, #420]	@ (8005484 <UART_SetConfig+0x33c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d130      	bne.n	8005344 <UART_SetConfig+0x1fc>
 80052e2:	4b67      	ldr	r3, [pc, #412]	@ (8005480 <UART_SetConfig+0x338>)
 80052e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d826      	bhi.n	800533c <UART_SetConfig+0x1f4>
 80052ee:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <UART_SetConfig+0x1ac>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	0800530d 	.word	0x0800530d
 80052f8:	08005315 	.word	0x08005315
 80052fc:	0800531d 	.word	0x0800531d
 8005300:	08005325 	.word	0x08005325
 8005304:	0800532d 	.word	0x0800532d
 8005308:	08005335 	.word	0x08005335
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e1ec      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005314:	2304      	movs	r3, #4
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e1e8      	b.n	80056ee <UART_SetConfig+0x5a6>
 800531c:	2308      	movs	r3, #8
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e1e4      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005324:	2310      	movs	r3, #16
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e1e0      	b.n	80056ee <UART_SetConfig+0x5a6>
 800532c:	2320      	movs	r3, #32
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e1dc      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005334:	2340      	movs	r3, #64	@ 0x40
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e1d8      	b.n	80056ee <UART_SetConfig+0x5a6>
 800533c:	2380      	movs	r3, #128	@ 0x80
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e1d4      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a4f      	ldr	r2, [pc, #316]	@ (8005488 <UART_SetConfig+0x340>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d130      	bne.n	80053b0 <UART_SetConfig+0x268>
 800534e:	4b4c      	ldr	r3, [pc, #304]	@ (8005480 <UART_SetConfig+0x338>)
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b05      	cmp	r3, #5
 8005358:	d826      	bhi.n	80053a8 <UART_SetConfig+0x260>
 800535a:	a201      	add	r2, pc, #4	@ (adr r2, 8005360 <UART_SetConfig+0x218>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005379 	.word	0x08005379
 8005364:	08005381 	.word	0x08005381
 8005368:	08005389 	.word	0x08005389
 800536c:	08005391 	.word	0x08005391
 8005370:	08005399 	.word	0x08005399
 8005374:	080053a1 	.word	0x080053a1
 8005378:	2300      	movs	r3, #0
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e1b6      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e1b2      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e1ae      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e1aa      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005398:	2320      	movs	r3, #32
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e1a6      	b.n	80056ee <UART_SetConfig+0x5a6>
 80053a0:	2340      	movs	r3, #64	@ 0x40
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e1a2      	b.n	80056ee <UART_SetConfig+0x5a6>
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e19e      	b.n	80056ee <UART_SetConfig+0x5a6>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a35      	ldr	r2, [pc, #212]	@ (800548c <UART_SetConfig+0x344>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d130      	bne.n	800541c <UART_SetConfig+0x2d4>
 80053ba:	4b31      	ldr	r3, [pc, #196]	@ (8005480 <UART_SetConfig+0x338>)
 80053bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d826      	bhi.n	8005414 <UART_SetConfig+0x2cc>
 80053c6:	a201      	add	r2, pc, #4	@ (adr r2, 80053cc <UART_SetConfig+0x284>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080053e5 	.word	0x080053e5
 80053d0:	080053ed 	.word	0x080053ed
 80053d4:	080053f5 	.word	0x080053f5
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e180      	b.n	80056ee <UART_SetConfig+0x5a6>
 80053ec:	2304      	movs	r3, #4
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e17c      	b.n	80056ee <UART_SetConfig+0x5a6>
 80053f4:	2308      	movs	r3, #8
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e178      	b.n	80056ee <UART_SetConfig+0x5a6>
 80053fc:	2310      	movs	r3, #16
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e174      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005404:	2320      	movs	r3, #32
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e170      	b.n	80056ee <UART_SetConfig+0x5a6>
 800540c:	2340      	movs	r3, #64	@ 0x40
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e16c      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e168      	b.n	80056ee <UART_SetConfig+0x5a6>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1b      	ldr	r2, [pc, #108]	@ (8005490 <UART_SetConfig+0x348>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d142      	bne.n	80054ac <UART_SetConfig+0x364>
 8005426:	4b16      	ldr	r3, [pc, #88]	@ (8005480 <UART_SetConfig+0x338>)
 8005428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	2b05      	cmp	r3, #5
 8005430:	d838      	bhi.n	80054a4 <UART_SetConfig+0x35c>
 8005432:	a201      	add	r2, pc, #4	@ (adr r2, 8005438 <UART_SetConfig+0x2f0>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	08005451 	.word	0x08005451
 800543c:	08005459 	.word	0x08005459
 8005440:	08005461 	.word	0x08005461
 8005444:	08005469 	.word	0x08005469
 8005448:	08005495 	.word	0x08005495
 800544c:	0800549d 	.word	0x0800549d
 8005450:	2300      	movs	r3, #0
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e14a      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005458:	2304      	movs	r3, #4
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e146      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005460:	2308      	movs	r3, #8
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e142      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005468:	2310      	movs	r3, #16
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e13e      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005470:	cfff69f3 	.word	0xcfff69f3
 8005474:	58000c00 	.word	0x58000c00
 8005478:	11fff4ff 	.word	0x11fff4ff
 800547c:	40011000 	.word	0x40011000
 8005480:	58024400 	.word	0x58024400
 8005484:	40004400 	.word	0x40004400
 8005488:	40004800 	.word	0x40004800
 800548c:	40004c00 	.word	0x40004c00
 8005490:	40005000 	.word	0x40005000
 8005494:	2320      	movs	r3, #32
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e128      	b.n	80056ee <UART_SetConfig+0x5a6>
 800549c:	2340      	movs	r3, #64	@ 0x40
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e124      	b.n	80056ee <UART_SetConfig+0x5a6>
 80054a4:	2380      	movs	r3, #128	@ 0x80
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e120      	b.n	80056ee <UART_SetConfig+0x5a6>
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4acb      	ldr	r2, [pc, #812]	@ (80057e0 <UART_SetConfig+0x698>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d176      	bne.n	80055a4 <UART_SetConfig+0x45c>
 80054b6:	4bcb      	ldr	r3, [pc, #812]	@ (80057e4 <UART_SetConfig+0x69c>)
 80054b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054be:	2b28      	cmp	r3, #40	@ 0x28
 80054c0:	d86c      	bhi.n	800559c <UART_SetConfig+0x454>
 80054c2:	a201      	add	r2, pc, #4	@ (adr r2, 80054c8 <UART_SetConfig+0x380>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	0800556d 	.word	0x0800556d
 80054cc:	0800559d 	.word	0x0800559d
 80054d0:	0800559d 	.word	0x0800559d
 80054d4:	0800559d 	.word	0x0800559d
 80054d8:	0800559d 	.word	0x0800559d
 80054dc:	0800559d 	.word	0x0800559d
 80054e0:	0800559d 	.word	0x0800559d
 80054e4:	0800559d 	.word	0x0800559d
 80054e8:	08005575 	.word	0x08005575
 80054ec:	0800559d 	.word	0x0800559d
 80054f0:	0800559d 	.word	0x0800559d
 80054f4:	0800559d 	.word	0x0800559d
 80054f8:	0800559d 	.word	0x0800559d
 80054fc:	0800559d 	.word	0x0800559d
 8005500:	0800559d 	.word	0x0800559d
 8005504:	0800559d 	.word	0x0800559d
 8005508:	0800557d 	.word	0x0800557d
 800550c:	0800559d 	.word	0x0800559d
 8005510:	0800559d 	.word	0x0800559d
 8005514:	0800559d 	.word	0x0800559d
 8005518:	0800559d 	.word	0x0800559d
 800551c:	0800559d 	.word	0x0800559d
 8005520:	0800559d 	.word	0x0800559d
 8005524:	0800559d 	.word	0x0800559d
 8005528:	08005585 	.word	0x08005585
 800552c:	0800559d 	.word	0x0800559d
 8005530:	0800559d 	.word	0x0800559d
 8005534:	0800559d 	.word	0x0800559d
 8005538:	0800559d 	.word	0x0800559d
 800553c:	0800559d 	.word	0x0800559d
 8005540:	0800559d 	.word	0x0800559d
 8005544:	0800559d 	.word	0x0800559d
 8005548:	0800558d 	.word	0x0800558d
 800554c:	0800559d 	.word	0x0800559d
 8005550:	0800559d 	.word	0x0800559d
 8005554:	0800559d 	.word	0x0800559d
 8005558:	0800559d 	.word	0x0800559d
 800555c:	0800559d 	.word	0x0800559d
 8005560:	0800559d 	.word	0x0800559d
 8005564:	0800559d 	.word	0x0800559d
 8005568:	08005595 	.word	0x08005595
 800556c:	2301      	movs	r3, #1
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005572:	e0bc      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005574:	2304      	movs	r3, #4
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e0b8      	b.n	80056ee <UART_SetConfig+0x5a6>
 800557c:	2308      	movs	r3, #8
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e0b4      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005584:	2310      	movs	r3, #16
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e0b0      	b.n	80056ee <UART_SetConfig+0x5a6>
 800558c:	2320      	movs	r3, #32
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e0ac      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005594:	2340      	movs	r3, #64	@ 0x40
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559a:	e0a8      	b.n	80056ee <UART_SetConfig+0x5a6>
 800559c:	2380      	movs	r3, #128	@ 0x80
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a2:	e0a4      	b.n	80056ee <UART_SetConfig+0x5a6>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a8f      	ldr	r2, [pc, #572]	@ (80057e8 <UART_SetConfig+0x6a0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d130      	bne.n	8005610 <UART_SetConfig+0x4c8>
 80055ae:	4b8d      	ldr	r3, [pc, #564]	@ (80057e4 <UART_SetConfig+0x69c>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d826      	bhi.n	8005608 <UART_SetConfig+0x4c0>
 80055ba:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <UART_SetConfig+0x478>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d9 	.word	0x080055d9
 80055c4:	080055e1 	.word	0x080055e1
 80055c8:	080055e9 	.word	0x080055e9
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	08005601 	.word	0x08005601
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055de:	e086      	b.n	80056ee <UART_SetConfig+0x5a6>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e6:	e082      	b.n	80056ee <UART_SetConfig+0x5a6>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ee:	e07e      	b.n	80056ee <UART_SetConfig+0x5a6>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e07a      	b.n	80056ee <UART_SetConfig+0x5a6>
 80055f8:	2320      	movs	r3, #32
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e076      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005600:	2340      	movs	r3, #64	@ 0x40
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e072      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005608:	2380      	movs	r3, #128	@ 0x80
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e06e      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a75      	ldr	r2, [pc, #468]	@ (80057ec <UART_SetConfig+0x6a4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d130      	bne.n	800567c <UART_SetConfig+0x534>
 800561a:	4b72      	ldr	r3, [pc, #456]	@ (80057e4 <UART_SetConfig+0x69c>)
 800561c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	2b05      	cmp	r3, #5
 8005624:	d826      	bhi.n	8005674 <UART_SetConfig+0x52c>
 8005626:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <UART_SetConfig+0x4e4>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	08005645 	.word	0x08005645
 8005630:	0800564d 	.word	0x0800564d
 8005634:	08005655 	.word	0x08005655
 8005638:	0800565d 	.word	0x0800565d
 800563c:	08005665 	.word	0x08005665
 8005640:	0800566d 	.word	0x0800566d
 8005644:	2300      	movs	r3, #0
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e050      	b.n	80056ee <UART_SetConfig+0x5a6>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e04c      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e048      	b.n	80056ee <UART_SetConfig+0x5a6>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e044      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005664:	2320      	movs	r3, #32
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e040      	b.n	80056ee <UART_SetConfig+0x5a6>
 800566c:	2340      	movs	r3, #64	@ 0x40
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e03c      	b.n	80056ee <UART_SetConfig+0x5a6>
 8005674:	2380      	movs	r3, #128	@ 0x80
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e038      	b.n	80056ee <UART_SetConfig+0x5a6>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a5b      	ldr	r2, [pc, #364]	@ (80057f0 <UART_SetConfig+0x6a8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d130      	bne.n	80056e8 <UART_SetConfig+0x5a0>
 8005686:	4b57      	ldr	r3, [pc, #348]	@ (80057e4 <UART_SetConfig+0x69c>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b05      	cmp	r3, #5
 8005690:	d826      	bhi.n	80056e0 <UART_SetConfig+0x598>
 8005692:	a201      	add	r2, pc, #4	@ (adr r2, 8005698 <UART_SetConfig+0x550>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056b1 	.word	0x080056b1
 800569c:	080056b9 	.word	0x080056b9
 80056a0:	080056c1 	.word	0x080056c1
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	2302      	movs	r3, #2
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e01a      	b.n	80056ee <UART_SetConfig+0x5a6>
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e016      	b.n	80056ee <UART_SetConfig+0x5a6>
 80056c0:	2308      	movs	r3, #8
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e012      	b.n	80056ee <UART_SetConfig+0x5a6>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e00e      	b.n	80056ee <UART_SetConfig+0x5a6>
 80056d0:	2320      	movs	r3, #32
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	e00a      	b.n	80056ee <UART_SetConfig+0x5a6>
 80056d8:	2340      	movs	r3, #64	@ 0x40
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e006      	b.n	80056ee <UART_SetConfig+0x5a6>
 80056e0:	2380      	movs	r3, #128	@ 0x80
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e002      	b.n	80056ee <UART_SetConfig+0x5a6>
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a3f      	ldr	r2, [pc, #252]	@ (80057f0 <UART_SetConfig+0x6a8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	f040 80f8 	bne.w	80058ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056fe:	2b20      	cmp	r3, #32
 8005700:	dc46      	bgt.n	8005790 <UART_SetConfig+0x648>
 8005702:	2b02      	cmp	r3, #2
 8005704:	f2c0 8082 	blt.w	800580c <UART_SetConfig+0x6c4>
 8005708:	3b02      	subs	r3, #2
 800570a:	2b1e      	cmp	r3, #30
 800570c:	d87e      	bhi.n	800580c <UART_SetConfig+0x6c4>
 800570e:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <UART_SetConfig+0x5cc>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005797 	.word	0x08005797
 8005718:	0800580d 	.word	0x0800580d
 800571c:	0800579f 	.word	0x0800579f
 8005720:	0800580d 	.word	0x0800580d
 8005724:	0800580d 	.word	0x0800580d
 8005728:	0800580d 	.word	0x0800580d
 800572c:	080057af 	.word	0x080057af
 8005730:	0800580d 	.word	0x0800580d
 8005734:	0800580d 	.word	0x0800580d
 8005738:	0800580d 	.word	0x0800580d
 800573c:	0800580d 	.word	0x0800580d
 8005740:	0800580d 	.word	0x0800580d
 8005744:	0800580d 	.word	0x0800580d
 8005748:	0800580d 	.word	0x0800580d
 800574c:	080057bf 	.word	0x080057bf
 8005750:	0800580d 	.word	0x0800580d
 8005754:	0800580d 	.word	0x0800580d
 8005758:	0800580d 	.word	0x0800580d
 800575c:	0800580d 	.word	0x0800580d
 8005760:	0800580d 	.word	0x0800580d
 8005764:	0800580d 	.word	0x0800580d
 8005768:	0800580d 	.word	0x0800580d
 800576c:	0800580d 	.word	0x0800580d
 8005770:	0800580d 	.word	0x0800580d
 8005774:	0800580d 	.word	0x0800580d
 8005778:	0800580d 	.word	0x0800580d
 800577c:	0800580d 	.word	0x0800580d
 8005780:	0800580d 	.word	0x0800580d
 8005784:	0800580d 	.word	0x0800580d
 8005788:	0800580d 	.word	0x0800580d
 800578c:	080057ff 	.word	0x080057ff
 8005790:	2b40      	cmp	r3, #64	@ 0x40
 8005792:	d037      	beq.n	8005804 <UART_SetConfig+0x6bc>
 8005794:	e03a      	b.n	800580c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005796:	f7ff f865 	bl	8004864 <HAL_RCCEx_GetD3PCLK1Freq>
 800579a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800579c:	e03c      	b.n	8005818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800579e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff f874 	bl	8004890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ac:	e034      	b.n	8005818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ae:	f107 0318 	add.w	r3, r7, #24
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff f9c0 	bl	8004b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057bc:	e02c      	b.n	8005818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057be:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <UART_SetConfig+0x69c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d016      	beq.n	80057f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057ca:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <UART_SetConfig+0x69c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	08db      	lsrs	r3, r3, #3
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	4a07      	ldr	r2, [pc, #28]	@ (80057f4 <UART_SetConfig+0x6ac>)
 80057d6:	fa22 f303 	lsr.w	r3, r2, r3
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057dc:	e01c      	b.n	8005818 <UART_SetConfig+0x6d0>
 80057de:	bf00      	nop
 80057e0:	40011400 	.word	0x40011400
 80057e4:	58024400 	.word	0x58024400
 80057e8:	40007800 	.word	0x40007800
 80057ec:	40007c00 	.word	0x40007c00
 80057f0:	58000c00 	.word	0x58000c00
 80057f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80057f8:	4b9d      	ldr	r3, [pc, #628]	@ (8005a70 <UART_SetConfig+0x928>)
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057fc:	e00c      	b.n	8005818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057fe:	4b9d      	ldr	r3, [pc, #628]	@ (8005a74 <UART_SetConfig+0x92c>)
 8005800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005802:	e009      	b.n	8005818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800580a:	e005      	b.n	8005818 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005816:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 81de 	beq.w	8005bdc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	4a94      	ldr	r2, [pc, #592]	@ (8005a78 <UART_SetConfig+0x930>)
 8005826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800582a:	461a      	mov	r2, r3
 800582c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005832:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	4413      	add	r3, r2
 800583e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005840:	429a      	cmp	r2, r3
 8005842:	d305      	bcc.n	8005850 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800584a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584c:	429a      	cmp	r2, r3
 800584e:	d903      	bls.n	8005858 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005856:	e1c1      	b.n	8005bdc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585a:	2200      	movs	r2, #0
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	60fa      	str	r2, [r7, #12]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005864:	4a84      	ldr	r2, [pc, #528]	@ (8005a78 <UART_SetConfig+0x930>)
 8005866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800586a:	b29b      	uxth	r3, r3
 800586c:	2200      	movs	r2, #0
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800587a:	f7fa fd2d 	bl	80002d8 <__aeabi_uldivmod>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4610      	mov	r0, r2
 8005884:	4619      	mov	r1, r3
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	020b      	lsls	r3, r1, #8
 8005890:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005894:	0202      	lsls	r2, r0, #8
 8005896:	6979      	ldr	r1, [r7, #20]
 8005898:	6849      	ldr	r1, [r1, #4]
 800589a:	0849      	lsrs	r1, r1, #1
 800589c:	2000      	movs	r0, #0
 800589e:	460c      	mov	r4, r1
 80058a0:	4605      	mov	r5, r0
 80058a2:	eb12 0804 	adds.w	r8, r2, r4
 80058a6:	eb43 0905 	adc.w	r9, r3, r5
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	469a      	mov	sl, r3
 80058b2:	4693      	mov	fp, r2
 80058b4:	4652      	mov	r2, sl
 80058b6:	465b      	mov	r3, fp
 80058b8:	4640      	mov	r0, r8
 80058ba:	4649      	mov	r1, r9
 80058bc:	f7fa fd0c 	bl	80002d8 <__aeabi_uldivmod>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4613      	mov	r3, r2
 80058c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ce:	d308      	bcc.n	80058e2 <UART_SetConfig+0x79a>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058d6:	d204      	bcs.n	80058e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058de:	60da      	str	r2, [r3, #12]
 80058e0:	e17c      	b.n	8005bdc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80058e8:	e178      	b.n	8005bdc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f2:	f040 80c5 	bne.w	8005a80 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80058f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	dc48      	bgt.n	8005990 <UART_SetConfig+0x848>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	db7b      	blt.n	80059fa <UART_SetConfig+0x8b2>
 8005902:	2b20      	cmp	r3, #32
 8005904:	d879      	bhi.n	80059fa <UART_SetConfig+0x8b2>
 8005906:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <UART_SetConfig+0x7c4>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005997 	.word	0x08005997
 8005910:	0800599f 	.word	0x0800599f
 8005914:	080059fb 	.word	0x080059fb
 8005918:	080059fb 	.word	0x080059fb
 800591c:	080059a7 	.word	0x080059a7
 8005920:	080059fb 	.word	0x080059fb
 8005924:	080059fb 	.word	0x080059fb
 8005928:	080059fb 	.word	0x080059fb
 800592c:	080059b7 	.word	0x080059b7
 8005930:	080059fb 	.word	0x080059fb
 8005934:	080059fb 	.word	0x080059fb
 8005938:	080059fb 	.word	0x080059fb
 800593c:	080059fb 	.word	0x080059fb
 8005940:	080059fb 	.word	0x080059fb
 8005944:	080059fb 	.word	0x080059fb
 8005948:	080059fb 	.word	0x080059fb
 800594c:	080059c7 	.word	0x080059c7
 8005950:	080059fb 	.word	0x080059fb
 8005954:	080059fb 	.word	0x080059fb
 8005958:	080059fb 	.word	0x080059fb
 800595c:	080059fb 	.word	0x080059fb
 8005960:	080059fb 	.word	0x080059fb
 8005964:	080059fb 	.word	0x080059fb
 8005968:	080059fb 	.word	0x080059fb
 800596c:	080059fb 	.word	0x080059fb
 8005970:	080059fb 	.word	0x080059fb
 8005974:	080059fb 	.word	0x080059fb
 8005978:	080059fb 	.word	0x080059fb
 800597c:	080059fb 	.word	0x080059fb
 8005980:	080059fb 	.word	0x080059fb
 8005984:	080059fb 	.word	0x080059fb
 8005988:	080059fb 	.word	0x080059fb
 800598c:	080059ed 	.word	0x080059ed
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	d02e      	beq.n	80059f2 <UART_SetConfig+0x8aa>
 8005994:	e031      	b.n	80059fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005996:	f7fd fd2f 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 800599a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800599c:	e033      	b.n	8005a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800599e:	f7fd fd41 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 80059a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059a4:	e02f      	b.n	8005a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe ff70 	bl	8004890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b4:	e027      	b.n	8005a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059b6:	f107 0318 	add.w	r3, r7, #24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff f8bc 	bl	8004b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c4:	e01f      	b.n	8005a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c6:	4b2d      	ldr	r3, [pc, #180]	@ (8005a7c <UART_SetConfig+0x934>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059d2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a7c <UART_SetConfig+0x934>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	08db      	lsrs	r3, r3, #3
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	4a24      	ldr	r2, [pc, #144]	@ (8005a70 <UART_SetConfig+0x928>)
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059e4:	e00f      	b.n	8005a06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80059e6:	4b22      	ldr	r3, [pc, #136]	@ (8005a70 <UART_SetConfig+0x928>)
 80059e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ea:	e00c      	b.n	8005a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059ec:	4b21      	ldr	r3, [pc, #132]	@ (8005a74 <UART_SetConfig+0x92c>)
 80059ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059f0:	e009      	b.n	8005a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059f8:	e005      	b.n	8005a06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80e7 	beq.w	8005bdc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	4a19      	ldr	r2, [pc, #100]	@ (8005a78 <UART_SetConfig+0x930>)
 8005a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a20:	005a      	lsls	r2, r3, #1
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	441a      	add	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d916      	bls.n	8005a68 <UART_SetConfig+0x920>
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a40:	d212      	bcs.n	8005a68 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f023 030f 	bic.w	r3, r3, #15
 8005a4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e0b9      	b.n	8005bdc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a6e:	e0b5      	b.n	8005bdc <UART_SetConfig+0xa94>
 8005a70:	03d09000 	.word	0x03d09000
 8005a74:	003d0900 	.word	0x003d0900
 8005a78:	080068f0 	.word	0x080068f0
 8005a7c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	dc49      	bgt.n	8005b1c <UART_SetConfig+0x9d4>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	db7c      	blt.n	8005b86 <UART_SetConfig+0xa3e>
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d87a      	bhi.n	8005b86 <UART_SetConfig+0xa3e>
 8005a90:	a201      	add	r2, pc, #4	@ (adr r2, 8005a98 <UART_SetConfig+0x950>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005b23 	.word	0x08005b23
 8005a9c:	08005b2b 	.word	0x08005b2b
 8005aa0:	08005b87 	.word	0x08005b87
 8005aa4:	08005b87 	.word	0x08005b87
 8005aa8:	08005b33 	.word	0x08005b33
 8005aac:	08005b87 	.word	0x08005b87
 8005ab0:	08005b87 	.word	0x08005b87
 8005ab4:	08005b87 	.word	0x08005b87
 8005ab8:	08005b43 	.word	0x08005b43
 8005abc:	08005b87 	.word	0x08005b87
 8005ac0:	08005b87 	.word	0x08005b87
 8005ac4:	08005b87 	.word	0x08005b87
 8005ac8:	08005b87 	.word	0x08005b87
 8005acc:	08005b87 	.word	0x08005b87
 8005ad0:	08005b87 	.word	0x08005b87
 8005ad4:	08005b87 	.word	0x08005b87
 8005ad8:	08005b53 	.word	0x08005b53
 8005adc:	08005b87 	.word	0x08005b87
 8005ae0:	08005b87 	.word	0x08005b87
 8005ae4:	08005b87 	.word	0x08005b87
 8005ae8:	08005b87 	.word	0x08005b87
 8005aec:	08005b87 	.word	0x08005b87
 8005af0:	08005b87 	.word	0x08005b87
 8005af4:	08005b87 	.word	0x08005b87
 8005af8:	08005b87 	.word	0x08005b87
 8005afc:	08005b87 	.word	0x08005b87
 8005b00:	08005b87 	.word	0x08005b87
 8005b04:	08005b87 	.word	0x08005b87
 8005b08:	08005b87 	.word	0x08005b87
 8005b0c:	08005b87 	.word	0x08005b87
 8005b10:	08005b87 	.word	0x08005b87
 8005b14:	08005b87 	.word	0x08005b87
 8005b18:	08005b79 	.word	0x08005b79
 8005b1c:	2b40      	cmp	r3, #64	@ 0x40
 8005b1e:	d02e      	beq.n	8005b7e <UART_SetConfig+0xa36>
 8005b20:	e031      	b.n	8005b86 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b22:	f7fd fc69 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8005b26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b28:	e033      	b.n	8005b92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b2a:	f7fd fc7b 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8005b2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b30:	e02f      	b.n	8005b92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe feaa 	bl	8004890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b40:	e027      	b.n	8005b92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b42:	f107 0318 	add.w	r3, r7, #24
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fff6 	bl	8004b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b50:	e01f      	b.n	8005b92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b52:	4b2d      	ldr	r3, [pc, #180]	@ (8005c08 <UART_SetConfig+0xac0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005c08 <UART_SetConfig+0xac0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	08db      	lsrs	r3, r3, #3
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	4a28      	ldr	r2, [pc, #160]	@ (8005c0c <UART_SetConfig+0xac4>)
 8005b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b70:	e00f      	b.n	8005b92 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005b72:	4b26      	ldr	r3, [pc, #152]	@ (8005c0c <UART_SetConfig+0xac4>)
 8005b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b76:	e00c      	b.n	8005b92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b78:	4b25      	ldr	r3, [pc, #148]	@ (8005c10 <UART_SetConfig+0xac8>)
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b7c:	e009      	b.n	8005b92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b84:	e005      	b.n	8005b92 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b90:	bf00      	nop
    }

    if (pclk != 0U)
 8005b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d021      	beq.n	8005bdc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <UART_SetConfig+0xacc>)
 8005b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	441a      	add	r2, r3
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbe:	2b0f      	cmp	r3, #15
 8005bc0:	d909      	bls.n	8005bd6 <UART_SetConfig+0xa8e>
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc8:	d205      	bcs.n	8005bd6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60da      	str	r2, [r3, #12]
 8005bd4:	e002      	b.n	8005bdc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005bf8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3748      	adds	r7, #72	@ 0x48
 8005c00:	46bd      	mov	sp, r7
 8005c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c06:	bf00      	nop
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	03d09000 	.word	0x03d09000
 8005c10:	003d0900 	.word	0x003d0900
 8005c14:	080068f0 	.word	0x080068f0

08005c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01a      	beq.n	8005d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d16:	d10a      	bne.n	8005d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b098      	sub	sp, #96	@ 0x60
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d6c:	f7fb f9ca 	bl	8001104 <HAL_GetTick>
 8005d70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d12f      	bne.n	8005de0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f88e 	bl	8005eb0 <UART_WaitOnFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d022      	beq.n	8005de0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e6      	bne.n	8005d9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e063      	b.n	8005ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d149      	bne.n	8005e82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005df6:	2200      	movs	r2, #0
 8005df8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f857 	bl	8005eb0 <UART_WaitOnFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d03c      	beq.n	8005e82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	623b      	str	r3, [r7, #32]
   return(result);
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e6      	bne.n	8005e08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3308      	adds	r3, #8
 8005e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e5a:	61fa      	str	r2, [r7, #28]
 8005e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	69b9      	ldr	r1, [r7, #24]
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	617b      	str	r3, [r7, #20]
   return(result);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e5      	bne.n	8005e3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e012      	b.n	8005ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3758      	adds	r7, #88	@ 0x58
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec0:	e04f      	b.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ec8:	d04b      	beq.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eca:	f7fb f91b 	bl	8001104 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e04e      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d037      	beq.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b80      	cmp	r3, #128	@ 0x80
 8005ef6:	d034      	beq.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d031      	beq.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d110      	bne.n	8005f2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2208      	movs	r2, #8
 8005f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f839 	bl	8005f8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e029      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f3c:	d111      	bne.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f81f 	bl	8005f8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e00f      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	bf0c      	ite	eq
 8005f72:	2301      	moveq	r3, #1
 8005f74:	2300      	movne	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d0a0      	beq.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b095      	sub	sp, #84	@ 0x54
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e6      	bne.n	8005f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8006054 <UART_EndRxTransfer+0xc8>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d118      	bne.n	8006034 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f023 0310 	bic.w	r3, r3, #16
 8006016:	647b      	str	r3, [r7, #68]	@ 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	613b      	str	r3, [r7, #16]
   return(result);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006048:	bf00      	nop
 800604a:	3754      	adds	r7, #84	@ 0x54
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	effffffe 	.word	0xeffffffe

08006058 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_UARTEx_DisableFifoMode+0x16>
 800606a:	2302      	movs	r3, #2
 800606c:	e027      	b.n	80060be <HAL_UARTEx_DisableFifoMode+0x66>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2224      	movs	r2, #36	@ 0x24
 800607a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800609c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060de:	2302      	movs	r3, #2
 80060e0:	e02d      	b.n	800613e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2224      	movs	r2, #36	@ 0x24
 80060ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f850 	bl	80061c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800615a:	2302      	movs	r3, #2
 800615c:	e02d      	b.n	80061ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2224      	movs	r2, #36	@ 0x24
 800616a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0201 	bic.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f812 	bl	80061c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d108      	bne.n	80061e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061e4:	e031      	b.n	800624a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061e6:	2310      	movs	r3, #16
 80061e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061ea:	2310      	movs	r3, #16
 80061ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	0e5b      	lsrs	r3, r3, #25
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	0f5b      	lsrs	r3, r3, #29
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800620e:	7bbb      	ldrb	r3, [r7, #14]
 8006210:	7b3a      	ldrb	r2, [r7, #12]
 8006212:	4911      	ldr	r1, [pc, #68]	@ (8006258 <UARTEx_SetNbDataToProcess+0x94>)
 8006214:	5c8a      	ldrb	r2, [r1, r2]
 8006216:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800621a:	7b3a      	ldrb	r2, [r7, #12]
 800621c:	490f      	ldr	r1, [pc, #60]	@ (800625c <UARTEx_SetNbDataToProcess+0x98>)
 800621e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006220:	fb93 f3f2 	sdiv	r3, r3, r2
 8006224:	b29a      	uxth	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	7b7a      	ldrb	r2, [r7, #13]
 8006230:	4909      	ldr	r1, [pc, #36]	@ (8006258 <UARTEx_SetNbDataToProcess+0x94>)
 8006232:	5c8a      	ldrb	r2, [r1, r2]
 8006234:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006238:	7b7a      	ldrb	r2, [r7, #13]
 800623a:	4908      	ldr	r1, [pc, #32]	@ (800625c <UARTEx_SetNbDataToProcess+0x98>)
 800623c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800623e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	08006908 	.word	0x08006908
 800625c:	08006910 	.word	0x08006910

08006260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006260:	b084      	sub	sp, #16
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	f107 001c 	add.w	r0, r7, #28
 800626e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006272:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006276:	2b01      	cmp	r3, #1
 8006278:	d121      	bne.n	80062be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	4b2c      	ldr	r3, [pc, #176]	@ (800633c <USB_CoreInit+0xdc>)
 800628c:	4013      	ands	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800629e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d105      	bne.n	80062b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 faaa 	bl	800680c <USB_CoreReset>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
 80062bc:	e01b      	b.n	80062f6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa9e 	bl	800680c <USB_CoreReset>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80062e8:	e005      	b.n	80062f6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062f6:	7fbb      	ldrb	r3, [r7, #30]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d116      	bne.n	800632a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800630a:	4b0d      	ldr	r3, [pc, #52]	@ (8006340 <USB_CoreInit+0xe0>)
 800630c:	4313      	orrs	r3, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f043 0206 	orr.w	r2, r3, #6
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006336:	b004      	add	sp, #16
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	ffbdffbf 	.word	0xffbdffbf
 8006340:	03ee0000 	.word	0x03ee0000

08006344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f023 0201 	bic.w	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d115      	bne.n	80063b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006394:	200a      	movs	r0, #10
 8006396:	f7fa fec1 	bl	800111c <HAL_Delay>
      ms += 10U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	330a      	adds	r3, #10
 800639e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa25 	bl	80067f0 <USB_GetMode>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d01e      	beq.n	80063ea <USB_SetCurrentMode+0x84>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80063b0:	d9f0      	bls.n	8006394 <USB_SetCurrentMode+0x2e>
 80063b2:	e01a      	b.n	80063ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d115      	bne.n	80063e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063c6:	200a      	movs	r0, #10
 80063c8:	f7fa fea8 	bl	800111c <HAL_Delay>
      ms += 10U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	330a      	adds	r3, #10
 80063d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa0c 	bl	80067f0 <USB_GetMode>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <USB_SetCurrentMode+0x84>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80063e2:	d9f0      	bls.n	80063c6 <USB_SetCurrentMode+0x60>
 80063e4:	e001      	b.n	80063ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e005      	b.n	80063f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80063ee:	d101      	bne.n	80063f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006400:	b084      	sub	sp, #16
 8006402:	b580      	push	{r7, lr}
 8006404:	b086      	sub	sp, #24
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800640e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	e009      	b.n	8006434 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	3340      	adds	r3, #64	@ 0x40
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	2200      	movs	r2, #0
 800642c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3301      	adds	r3, #1
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2b0e      	cmp	r3, #14
 8006438:	d9f2      	bls.n	8006420 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800643a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800643e:	2b00      	cmp	r3, #0
 8006440:	d11c      	bne.n	800647c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006450:	f043 0302 	orr.w	r3, r3, #2
 8006454:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	e005      	b.n	8006488 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006480:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800648e:	461a      	mov	r2, r3
 8006490:	2300      	movs	r3, #0
 8006492:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006494:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006498:	2b01      	cmp	r3, #1
 800649a:	d10d      	bne.n	80064b8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800649c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064a4:	2100      	movs	r1, #0
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f968 	bl	800677c <USB_SetDevSpeed>
 80064ac:	e008      	b.n	80064c0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064ae:	2101      	movs	r1, #1
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f963 	bl	800677c <USB_SetDevSpeed>
 80064b6:	e003      	b.n	80064c0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064b8:	2103      	movs	r1, #3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f95e 	bl	800677c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064c0:	2110      	movs	r1, #16
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f8fa 	bl	80066bc <USB_FlushTxFifo>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f924 	bl	8006720 <USB_FlushRxFifo>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e8:	461a      	mov	r2, r3
 80064ea:	2300      	movs	r3, #0
 80064ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f4:	461a      	mov	r2, r3
 80064f6:	2300      	movs	r3, #0
 80064f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006500:	461a      	mov	r2, r3
 8006502:	2300      	movs	r3, #0
 8006504:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	e043      	b.n	8006594 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800651e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006522:	d118      	bne.n	8006556 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006536:	461a      	mov	r2, r3
 8006538:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e013      	b.n	8006568 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654c:	461a      	mov	r2, r3
 800654e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	e008      	b.n	8006568 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006562:	461a      	mov	r2, r3
 8006564:	2300      	movs	r3, #0
 8006566:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006574:	461a      	mov	r2, r3
 8006576:	2300      	movs	r3, #0
 8006578:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006586:	461a      	mov	r2, r3
 8006588:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800658c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	3301      	adds	r3, #1
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006598:	461a      	mov	r2, r3
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4293      	cmp	r3, r2
 800659e:	d3b5      	bcc.n	800650c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	e043      	b.n	800662e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065bc:	d118      	bne.n	80065f0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d0:	461a      	mov	r2, r3
 80065d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	e013      	b.n	8006602 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e6:	461a      	mov	r2, r3
 80065e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	e008      	b.n	8006602 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fc:	461a      	mov	r2, r3
 80065fe:	2300      	movs	r3, #0
 8006600:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660e:	461a      	mov	r2, r3
 8006610:	2300      	movs	r3, #0
 8006612:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006620:	461a      	mov	r2, r3
 8006622:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006626:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	3301      	adds	r3, #1
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006632:	461a      	mov	r2, r3
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4293      	cmp	r3, r2
 8006638:	d3b5      	bcc.n	80065a6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800664c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800665a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800665c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f043 0210 	orr.w	r2, r3, #16
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699a      	ldr	r2, [r3, #24]
 8006674:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <USB_DevInit+0x2b4>)
 8006676:	4313      	orrs	r3, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800667c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006680:	2b00      	cmp	r3, #0
 8006682:	d005      	beq.n	8006690 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f043 0208 	orr.w	r2, r3, #8
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006690:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006694:	2b01      	cmp	r3, #1
 8006696:	d105      	bne.n	80066a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699a      	ldr	r2, [r3, #24]
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <USB_DevInit+0x2b8>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066b0:	b004      	add	sp, #16
 80066b2:	4770      	bx	lr
 80066b4:	803c3800 	.word	0x803c3800
 80066b8:	40000004 	.word	0x40000004

080066bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066d6:	d901      	bls.n	80066dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e01b      	b.n	8006714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	daf2      	bge.n	80066ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	019b      	lsls	r3, r3, #6
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3301      	adds	r3, #1
 80066f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006700:	d901      	bls.n	8006706 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e006      	b.n	8006714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b20      	cmp	r3, #32
 8006710:	d0f0      	beq.n	80066f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006738:	d901      	bls.n	800673e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e018      	b.n	8006770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	daf2      	bge.n	800672c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2210      	movs	r2, #16
 800674e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3301      	adds	r3, #1
 8006754:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800675c:	d901      	bls.n	8006762 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e006      	b.n	8006770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 0310 	and.w	r3, r3, #16
 800676a:	2b10      	cmp	r3, #16
 800676c:	d0f0      	beq.n	8006750 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800679c:	4313      	orrs	r3, r2
 800679e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067dc:	f043 0302 	orr.w	r3, r3, #2
 80067e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0301 	and.w	r3, r3, #1
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006824:	d901      	bls.n	800682a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e01b      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	daf2      	bge.n	8006818 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f043 0201 	orr.w	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800684e:	d901      	bls.n	8006854 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e006      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b01      	cmp	r3, #1
 800685e:	d0f0      	beq.n	8006842 <USB_CoreReset+0x36>

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <memset>:
 800686e:	4402      	add	r2, r0
 8006870:	4603      	mov	r3, r0
 8006872:	4293      	cmp	r3, r2
 8006874:	d100      	bne.n	8006878 <memset+0xa>
 8006876:	4770      	bx	lr
 8006878:	f803 1b01 	strb.w	r1, [r3], #1
 800687c:	e7f9      	b.n	8006872 <memset+0x4>
	...

08006880 <__libc_init_array>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4d0d      	ldr	r5, [pc, #52]	@ (80068b8 <__libc_init_array+0x38>)
 8006884:	4c0d      	ldr	r4, [pc, #52]	@ (80068bc <__libc_init_array+0x3c>)
 8006886:	1b64      	subs	r4, r4, r5
 8006888:	10a4      	asrs	r4, r4, #2
 800688a:	2600      	movs	r6, #0
 800688c:	42a6      	cmp	r6, r4
 800688e:	d109      	bne.n	80068a4 <__libc_init_array+0x24>
 8006890:	4d0b      	ldr	r5, [pc, #44]	@ (80068c0 <__libc_init_array+0x40>)
 8006892:	4c0c      	ldr	r4, [pc, #48]	@ (80068c4 <__libc_init_array+0x44>)
 8006894:	f000 f818 	bl	80068c8 <_init>
 8006898:	1b64      	subs	r4, r4, r5
 800689a:	10a4      	asrs	r4, r4, #2
 800689c:	2600      	movs	r6, #0
 800689e:	42a6      	cmp	r6, r4
 80068a0:	d105      	bne.n	80068ae <__libc_init_array+0x2e>
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a8:	4798      	blx	r3
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7ee      	b.n	800688c <__libc_init_array+0xc>
 80068ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b2:	4798      	blx	r3
 80068b4:	3601      	adds	r6, #1
 80068b6:	e7f2      	b.n	800689e <__libc_init_array+0x1e>
 80068b8:	08006920 	.word	0x08006920
 80068bc:	08006920 	.word	0x08006920
 80068c0:	08006920 	.word	0x08006920
 80068c4:	08006924 	.word	0x08006924

080068c8 <_init>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr

080068d4 <_fini>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr
