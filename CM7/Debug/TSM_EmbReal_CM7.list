
TSM_EmbReal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006864  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006afc  08006afc  00007afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b54  08006b54  00008120  2**0
                  CONTENTS
  4 .ARM          00000008  08006b54  08006b54  00007b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b5c  08006b5c  00008120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b5c  08006b5c  00007b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b60  08006b60  00007b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  24000000  08006b64  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  08006bc4  00008060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  08006c24  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007c8  24000120  08006c84  00008120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240008e8  08006c84  000088e8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00008120  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d109  00000000  00000000  0000814e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003363  00000000  00000000  00025257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010e0  00000000  00000000  000285c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cf4  00000000  00000000  000296a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ebff  00000000  00000000  0002a394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017e03  00000000  00000000  00068f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186bfb  00000000  00000000  00080d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00207991  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000049ec  00000000  00000000  002079d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0020c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006ae4 	.word	0x08006ae4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	08006ae4 	.word	0x08006ae4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <_ZN26NonBlockingSystemTickDelayD1Ev>:
 *      Author: seraphin
 */

#include "NonBlockingSystemTickDelay.h"

NonBlockingSystemTickDelay::~NonBlockingSystemTickDelay() {}
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	4a04      	ldr	r2, [pc, #16]	@ (80005e4 <_ZN26NonBlockingSystemTickDelayD1Ev+0x1c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	08006b04 	.word	0x08006b04

080005e8 <_ZN26NonBlockingSystemTickDelayD0Ev>:
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff ffe9 	bl	80005c8 <_ZN26NonBlockingSystemTickDelayD1Ev>
 80005f6:	210c      	movs	r1, #12
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f006 f9e2 	bl	80069c2 <_ZdlPvj>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <_ZN26NonBlockingSystemTickDelay10initialiseEm>:

void NonBlockingSystemTickDelay::initialise(uint32_t delay) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	wait = delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	605a      	str	r2, [r3, #4]
	tickstart = HAL_GetTick();
 8000618:	f000 feb2 	bl	8001380 <HAL_GetTick>
 800061c:	4602      	mov	r2, r0
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	609a      	str	r2, [r3, #8]

}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_ZN26NonBlockingSystemTickDelay15checkExpirationEv>:

uint8_t NonBlockingSystemTickDelay::checkExpiration() {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick() >= tickstart + wait);
 8000632:	f000 fea5 	bl	8001380 <HAL_GetTick>
 8000636:	4601      	mov	r1, r0
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689a      	ldr	r2, [r3, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4413      	add	r3, r2
 8000642:	4299      	cmp	r1, r3
 8000644:	bf2c      	ite	cs
 8000646:	2301      	movcs	r3, #1
 8000648:	2300      	movcc	r3, #0
 800064a:	b2db      	uxtb	r3, r3
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <_ZN10STM32H7LedD1Ev>:
 *      Author: seraphin
 */

#include "STM32H7Led.h"

STM32H7Led::~STM32H7Led() {}
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <_ZN10STM32H7LedD1Ev+0x1c>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	08006b14 	.word	0x08006b14

08000674 <_ZN10STM32H7LedD0Ev>:
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ffe9 	bl	8000654 <_ZN10STM32H7LedD1Ev>
 8000682:	210c      	movs	r1, #12
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f006 f99c 	bl	80069c2 <_ZdlPvj>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <_ZN10STM32H7Led9toggleLEDEv>:

void STM32H7Led::toggleLED() {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(port_, pin_);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	891b      	ldrh	r3, [r3, #8]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f001 fdb3 	bl	8002212 <HAL_GPIO_TogglePin>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b8:	4b3d      	ldr	r3, [pc, #244]	@ (80007b0 <SystemInit+0xfc>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006be:	4a3c      	ldr	r2, [pc, #240]	@ (80007b0 <SystemInit+0xfc>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c8:	4b39      	ldr	r3, [pc, #228]	@ (80007b0 <SystemInit+0xfc>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	4a38      	ldr	r2, [pc, #224]	@ (80007b0 <SystemInit+0xfc>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d4:	4b37      	ldr	r3, [pc, #220]	@ (80007b4 <SystemInit+0x100>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f003 030f 	and.w	r3, r3, #15
 80006dc:	2b06      	cmp	r3, #6
 80006de:	d807      	bhi.n	80006f0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e0:	4b34      	ldr	r3, [pc, #208]	@ (80007b4 <SystemInit+0x100>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f023 030f 	bic.w	r3, r3, #15
 80006e8:	4a32      	ldr	r2, [pc, #200]	@ (80007b4 <SystemInit+0x100>)
 80006ea:	f043 0307 	orr.w	r3, r3, #7
 80006ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f0:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <SystemInit+0x104>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a30      	ldr	r2, [pc, #192]	@ (80007b8 <SystemInit+0x104>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006fc:	4b2e      	ldr	r3, [pc, #184]	@ (80007b8 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000702:	4b2d      	ldr	r3, [pc, #180]	@ (80007b8 <SystemInit+0x104>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	492c      	ldr	r1, [pc, #176]	@ (80007b8 <SystemInit+0x104>)
 8000708:	4b2c      	ldr	r3, [pc, #176]	@ (80007bc <SystemInit+0x108>)
 800070a:	4013      	ands	r3, r2
 800070c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800070e:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <SystemInit+0x100>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	2b00      	cmp	r3, #0
 8000718:	d007      	beq.n	800072a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <SystemInit+0x100>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 030f 	bic.w	r3, r3, #15
 8000722:	4a24      	ldr	r2, [pc, #144]	@ (80007b4 <SystemInit+0x100>)
 8000724:	f043 0307 	orr.w	r3, r3, #7
 8000728:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800072a:	4b23      	ldr	r3, [pc, #140]	@ (80007b8 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000730:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <SystemInit+0x104>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000736:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <SystemInit+0x104>)
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <SystemInit+0x10c>)
 8000740:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000742:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <SystemInit+0x104>)
 8000744:	4a1f      	ldr	r2, [pc, #124]	@ (80007c4 <SystemInit+0x110>)
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <SystemInit+0x104>)
 800074a:	4a1f      	ldr	r2, [pc, #124]	@ (80007c8 <SystemInit+0x114>)
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <SystemInit+0x104>)
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <SystemInit+0x104>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <SystemInit+0x114>)
 8000758:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <SystemInit+0x104>)
 800075c:	2200      	movs	r2, #0
 800075e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <SystemInit+0x104>)
 8000762:	4a19      	ldr	r2, [pc, #100]	@ (80007c8 <SystemInit+0x114>)
 8000764:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <SystemInit+0x104>)
 8000768:	2200      	movs	r2, #0
 800076a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <SystemInit+0x104>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a11      	ldr	r2, [pc, #68]	@ (80007b8 <SystemInit+0x104>)
 8000772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000776:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <SystemInit+0x104>)
 800077a:	2200      	movs	r2, #0
 800077c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <SystemInit+0x118>)
 8000780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <SystemInit+0x118>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000788:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <SystemInit+0x11c>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <SystemInit+0x120>)
 8000790:	4013      	ands	r3, r2
 8000792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000796:	d202      	bcs.n	800079e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <SystemInit+0x124>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <SystemInit+0x128>)
 80007a0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007a4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	52002000 	.word	0x52002000
 80007b8:	58024400 	.word	0x58024400
 80007bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c0:	02020200 	.word	0x02020200
 80007c4:	01ff0000 	.word	0x01ff0000
 80007c8:	01010280 	.word	0x01010280
 80007cc:	580000c0 	.word	0x580000c0
 80007d0:	5c001000 	.word	0x5c001000
 80007d4:	ffff0000 	.word	0xffff0000
 80007d8:	51008108 	.word	0x51008108
 80007dc:	52004000 	.word	0x52004000

080007e0 <_ZN26NonBlockingSystemTickDelayC1Ev>:

#include "main.h"

class NonBlockingSystemTickDelay {
public:
	NonBlockingSystemTickDelay(): wait(0), tickstart(0) {}
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	4a07      	ldr	r2, [pc, #28]	@ (8000808 <_ZN26NonBlockingSystemTickDelayC1Ev+0x28>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	08006b04 	.word	0x08006b04

0800080c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft>:
#include "main.h"

class STM32H7Led {
public:
	STM32H7Led();
	STM32H7Led(GPIO_TypeDef* port, uint16_t pin) : port_(port), pin_(pin) {}
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	4613      	mov	r3, r2
 8000818:	80fb      	strh	r3, [r7, #6]
 800081a:	4a08      	ldr	r2, [pc, #32]	@ (800083c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft+0x30>)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	811a      	strh	r2, [r3, #8]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4618      	mov	r0, r3
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	08006b14 	.word	0x08006b14

08000840 <cpp_main>:
#include "STM32H7Led.h"
#include "main.h"

enum class state_t {INIT, BLINK1HZ, BLINK3HZ};

void cpp_main(){
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

	state_t State = state_t::INIT;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]

	NonBlockingSystemTickDelay delay_LD1;
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ffc6 	bl	80007e0 <_ZN26NonBlockingSystemTickDelayC1Ev>
	STM32H7Led ld1(LD1_GPIO_Port, LD1_Pin);
 8000854:	463b      	mov	r3, r7
 8000856:	2201      	movs	r2, #1
 8000858:	493d      	ldr	r1, [pc, #244]	@ (8000950 <cpp_main+0x110>)
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffd6 	bl	800080c <_ZN10STM32H7LedC1EP12GPIO_TypeDeft>

	uint8_t button_new, button_old = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	76fb      	strb	r3, [r7, #27]

	while(1){
		button_new = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000868:	483a      	ldr	r0, [pc, #232]	@ (8000954 <cpp_main+0x114>)
 800086a:	f001 fca1 	bl	80021b0 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	76bb      	strb	r3, [r7, #26]

		switch(State) {
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d03a      	beq.n	80008ee <cpp_main+0xae>
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	2b02      	cmp	r3, #2
 800087c:	dc5f      	bgt.n	800093e <cpp_main+0xfe>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <cpp_main+0x4c>
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d009      	beq.n	800089e <cpp_main+0x5e>
					delay_LD1.initialise(333);
				}
				break;

			default:
				break;
 800088a:	e058      	b.n	800093e <cpp_main+0xfe>
				State = state_t::BLINK1HZ;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
				delay_LD1.initialise(1000);
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff feb5 	bl	8000608 <_ZN26NonBlockingSystemTickDelay10initialiseEm>
				if (button_new and !button_old) {
 800089e:	7ebb      	ldrb	r3, [r7, #26]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00b      	beq.n	80008bc <cpp_main+0x7c>
 80008a4:	7efb      	ldrb	r3, [r7, #27]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d108      	bne.n	80008bc <cpp_main+0x7c>
					State = state_t::BLINK3HZ;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61fb      	str	r3, [r7, #28]
					delay_LD1.initialise(333);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	f240 114d 	movw	r1, #333	@ 0x14d
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fea6 	bl	8000608 <_ZN26NonBlockingSystemTickDelay10initialiseEm>
				if (delay_LD1.checkExpiration()) {
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff feb2 	bl	800062a <_ZN26NonBlockingSystemTickDelay15checkExpirationEv>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d035      	beq.n	8000942 <cpp_main+0x102>
					ld1.toggleLED();
 80008d6:	463b      	mov	r3, r7
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fedb 	bl	8000694 <_ZN10STM32H7Led9toggleLEDEv>
					delay_LD1.initialise(1000);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fe8e 	bl	8000608 <_ZN26NonBlockingSystemTickDelay10initialiseEm>
				break;
 80008ec:	e029      	b.n	8000942 <cpp_main+0x102>
				if (button_new and !button_old) {
 80008ee:	7ebb      	ldrb	r3, [r7, #26]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d00b      	beq.n	800090c <cpp_main+0xcc>
 80008f4:	7efb      	ldrb	r3, [r7, #27]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d108      	bne.n	800090c <cpp_main+0xcc>
					State = state_t::BLINK1HZ;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
					delay_LD1.initialise(1000);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe7e 	bl	8000608 <_ZN26NonBlockingSystemTickDelay10initialiseEm>
				if (delay_LD1.checkExpiration()) {
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe8a 	bl	800062a <_ZN26NonBlockingSystemTickDelay15checkExpirationEv>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d00f      	beq.n	8000946 <cpp_main+0x106>
					ld1.toggleLED();
 8000926:	463b      	mov	r3, r7
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff feb3 	bl	8000694 <_ZN10STM32H7Led9toggleLEDEv>
					delay_LD1.initialise(333);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	f240 114d 	movw	r1, #333	@ 0x14d
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe66 	bl	8000608 <_ZN26NonBlockingSystemTickDelay10initialiseEm>
				break;
 800093c:	e003      	b.n	8000946 <cpp_main+0x106>
				break;
 800093e:	bf00      	nop
 8000940:	e002      	b.n	8000948 <cpp_main+0x108>
				break;
 8000942:	bf00      	nop
 8000944:	e000      	b.n	8000948 <cpp_main+0x108>
				break;
 8000946:	bf00      	nop

		}

		button_old = button_new;
 8000948:	7ebb      	ldrb	r3, [r7, #26]
 800094a:	76fb      	strb	r3, [r7, #27]
		button_new = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800094c:	e78a      	b.n	8000864 <cpp_main+0x24>
 800094e:	bf00      	nop
 8000950:	58020400 	.word	0x58020400
 8000954:	58020800 	.word	0x58020800

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800095e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000962:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000964:	bf00      	nop
 8000966:	4b24      	ldr	r3, [pc, #144]	@ (80009f8 <main+0xa0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <main+0x24>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	1e5a      	subs	r2, r3, #1
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	dcf4      	bgt.n	8000966 <main+0xe>
  if ( timeout < 0 )
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	da01      	bge.n	8000986 <main+0x2e>
  {
  Error_Handler();
 8000982:	f000 fa39 	bl	8000df8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f000 fc75 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f837 	bl	80009fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <main+0xa0>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <main+0xa0>)
 8000996:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099e:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <main+0xa0>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f001 fc4b 	bl	8002248 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f001 fc61 	bl	800227c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009be:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009c0:	bf00      	nop
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <main+0xa0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d104      	bne.n	80009d8 <main+0x80>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	1e5a      	subs	r2, r3, #1
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dcf4      	bgt.n	80009c2 <main+0x6a>
if ( timeout < 0 )
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	da01      	bge.n	80009e2 <main+0x8a>
{
Error_Handler();
 80009de:	f000 fa0b 	bl	8000df8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f000 f953 	bl	8000c8c <MX_GPIO_Init>
  MX_ETH_Init();
 80009e6:	f000 f887 	bl	8000af8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009ea:	f000 f8d1 	bl	8000b90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009ee:	f000 f91b 	bl	8000c28 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cpp_main();
 80009f2:	f7ff ff25 	bl	8000840 <cpp_main>
 80009f6:	e7fc      	b.n	80009f2 <main+0x9a>
 80009f8:	58024400 	.word	0x58024400

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	@ 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a06:	224c      	movs	r2, #76	@ 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f005 fff2 	bl	80069f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 ffec 	bl	80069f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f001 fd71 	bl	8002504 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b32      	ldr	r3, [pc, #200]	@ (8000af0 <SystemClock_Config+0xf4>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2a:	4a31      	ldr	r2, [pc, #196]	@ (8000af0 <SystemClock_Config+0xf4>)
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a32:	4b2f      	ldr	r3, [pc, #188]	@ (8000af0 <SystemClock_Config+0xf4>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a44:	4a2b      	ldr	r2, [pc, #172]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b29      	ldr	r3, [pc, #164]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a58:	bf00      	nop
 8000a5a:	4b26      	ldr	r3, [pc, #152]	@ (8000af4 <SystemClock_Config+0xf8>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a66:	d1f8      	bne.n	8000a5a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a6c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000a7e:	2312      	movs	r3, #18
 8000a80:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8e:	230c      	movs	r3, #12
 8000a90:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a92:	2302      	movs	r3, #2
 8000a94:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000a96:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fd99 	bl	80025d8 <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000aac:	f000 f9a4 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	233f      	movs	r3, #63	@ 0x3f
 8000ab2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac0:	2340      	movs	r3, #64	@ 0x40
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac4:	2340      	movs	r3, #64	@ 0x40
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000acc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 f9d8 	bl	8002e8c <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000ae2:	f000 f989 	bl	8000df8 <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3770      	adds	r7, #112	@ 0x70
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	58000400 	.word	0x58000400
 8000af4:	58024800 	.word	0x58024800

08000af8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <MX_ETH_Init+0x80>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <MX_ETH_Init+0x84>)
 8000b00:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <MX_ETH_Init+0x88>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_ETH_Init+0x88>)
 8000b0a:	2280      	movs	r2, #128	@ 0x80
 8000b0c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_ETH_Init+0x88>)
 8000b10:	22e1      	movs	r2, #225	@ 0xe1
 8000b12:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_ETH_Init+0x88>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_ETH_Init+0x88>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_ETH_Init+0x88>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_ETH_Init+0x80>)
 8000b28:	4a15      	ldr	r2, [pc, #84]	@ (8000b80 <MX_ETH_Init+0x88>)
 8000b2a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_ETH_Init+0x80>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_ETH_Init+0x80>)
 8000b34:	4a13      	ldr	r2, [pc, #76]	@ (8000b84 <MX_ETH_Init+0x8c>)
 8000b36:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_ETH_Init+0x80>)
 8000b3a:	4a13      	ldr	r2, [pc, #76]	@ (8000b88 <MX_ETH_Init+0x90>)
 8000b3c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_ETH_Init+0x80>)
 8000b40:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000b44:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b46:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <MX_ETH_Init+0x80>)
 8000b48:	f000 fd4e 	bl	80015e8 <HAL_ETH_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b52:	f000 f951 	bl	8000df8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b56:	2238      	movs	r2, #56	@ 0x38
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <MX_ETH_Init+0x94>)
 8000b5c:	f005 ff4a 	bl	80069f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MX_ETH_Init+0x94>)
 8000b62:	2221      	movs	r2, #33	@ 0x21
 8000b64:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_ETH_Init+0x94>)
 8000b68:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b6c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_ETH_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	24000174 	.word	0x24000174
 8000b7c:	40028000 	.word	0x40028000
 8000b80:	2400079c 	.word	0x2400079c
 8000b84:	240000c0 	.word	0x240000c0
 8000b88:	24000060 	.word	0x24000060
 8000b8c:	2400013c 	.word	0x2400013c

08000b90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000b96:	4a23      	ldr	r2, [pc, #140]	@ (8000c24 <MX_USART3_UART_Init+0x94>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd8:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bda:	f004 fb0f 	bl	80051fc <HAL_UART_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 f908 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	2100      	movs	r1, #0
 8000bea:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bec:	f005 fb17 	bl	800621e <HAL_UARTEx_SetTxFifoThreshold>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf6:	f000 f8ff 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4808      	ldr	r0, [pc, #32]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000bfe:	f005 fb4c 	bl	800629a <HAL_UARTEx_SetRxFifoThreshold>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c08:	f000 f8f6 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_USART3_UART_Init+0x90>)
 8000c0e:	f005 facd 	bl	80061ac <HAL_UARTEx_DisableFifoMode>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c18:	f000 f8ee 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24000224 	.word	0x24000224
 8000c24:	40004800 	.word	0x40004800

08000c28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c2e:	4a16      	ldr	r2, [pc, #88]	@ (8000c88 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c34:	2209      	movs	r2, #9
 8000c36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c70:	f001 fb18 	bl	80022a4 <HAL_PCD_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c7a:	f000 f8bd 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	240002b8 	.word	0x240002b8
 8000c88:	40080000 	.word	0x40080000

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	@ 0x30
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b51      	ldr	r3, [pc, #324]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc0:	4b49      	ldr	r3, [pc, #292]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	4a48      	ldr	r2, [pc, #288]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd0:	4b45      	ldr	r3, [pc, #276]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b42      	ldr	r3, [pc, #264]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	4a40      	ldr	r2, [pc, #256]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cee:	4b3e      	ldr	r3, [pc, #248]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	4a39      	ldr	r2, [pc, #228]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0c:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b33      	ldr	r3, [pc, #204]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	4a31      	ldr	r2, [pc, #196]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d38:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d48:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	4a22      	ldr	r2, [pc, #136]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d66:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <MX_GPIO_Init+0x15c>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d7a:	481c      	ldr	r0, [pc, #112]	@ (8000dec <MX_GPIO_Init+0x160>)
 8000d7c:	f001 fa30 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2102      	movs	r1, #2
 8000d84:	481a      	ldr	r0, [pc, #104]	@ (8000df0 <MX_GPIO_Init+0x164>)
 8000d86:	f001 fa2b 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4815      	ldr	r0, [pc, #84]	@ (8000df4 <MX_GPIO_Init+0x168>)
 8000da0:	f001 f856 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000da4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480b      	ldr	r0, [pc, #44]	@ (8000dec <MX_GPIO_Init+0x160>)
 8000dbe:	f001 f847 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_GPIO_Init+0x164>)
 8000dda:	f001 f839 	bl	8001e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dde:	bf00      	nop
 8000de0:	3730      	adds	r7, #48	@ 0x30
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58020400 	.word	0x58020400
 8000df0:	58021000 	.word	0x58021000
 8000df4:	58020800 	.word	0x58020800

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e10:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <HAL_MspInit+0x30>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	58024400 	.word	0x58024400

08000e38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	@ 0x38
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a59      	ldr	r2, [pc, #356]	@ (8000fbc <HAL_ETH_MspInit+0x184>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	f040 80ab 	bne.w	8000fb2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e5c:	4b58      	ldr	r3, [pc, #352]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e62:	4a57      	ldr	r2, [pc, #348]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e68:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e6c:	4b54      	ldr	r3, [pc, #336]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e7a:	4b51      	ldr	r3, [pc, #324]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e80:	4a4f      	ldr	r2, [pc, #316]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e8a:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e98:	4b49      	ldr	r3, [pc, #292]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e9e:	4a48      	ldr	r2, [pc, #288]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ea8:	4b45      	ldr	r3, [pc, #276]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000eaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b42      	ldr	r3, [pc, #264]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	4a40      	ldr	r2, [pc, #256]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eda:	4a39      	ldr	r2, [pc, #228]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee4:	4b36      	ldr	r3, [pc, #216]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef8:	4a31      	ldr	r2, [pc, #196]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f02:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f16:	4a2a      	ldr	r2, [pc, #168]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f20:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f2e:	2332      	movs	r3, #50	@ 0x32
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3e:	230b      	movs	r3, #11
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	481e      	ldr	r0, [pc, #120]	@ (8000fc4 <HAL_ETH_MspInit+0x18c>)
 8000f4a:	f000 ff81 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f4e:	2386      	movs	r3, #134	@ 0x86
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5e:	230b      	movs	r3, #11
 8000f60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4817      	ldr	r0, [pc, #92]	@ (8000fc8 <HAL_ETH_MspInit+0x190>)
 8000f6a:	f000 ff71 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f80:	230b      	movs	r3, #11
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <HAL_ETH_MspInit+0x194>)
 8000f8c:	f000 ff60 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f90:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa2:	230b      	movs	r3, #11
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	4808      	ldr	r0, [pc, #32]	@ (8000fd0 <HAL_ETH_MspInit+0x198>)
 8000fae:	f000 ff4f 	bl	8001e50 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3738      	adds	r7, #56	@ 0x38
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40028000 	.word	0x40028000
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020800 	.word	0x58020800
 8000fc8:	58020000 	.word	0x58020000
 8000fcc:	58020400 	.word	0x58020400
 8000fd0:	58021800 	.word	0x58021800

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	22c0      	movs	r2, #192	@ 0xc0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f005 fcfd 	bl	80069f4 <memset>
  if(huart->Instance==USART3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a27      	ldr	r2, [pc, #156]	@ (800109c <HAL_UART_MspInit+0xc8>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d146      	bne.n	8001092 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001004:	f04f 0202 	mov.w	r2, #2
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fac2 	bl	80035a4 <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001026:	f7ff fee7 	bl	8000df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <HAL_UART_MspInit+0xcc>)
 800102c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <HAL_UART_MspInit+0xcc>)
 8001032:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001036:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800103a:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <HAL_UART_MspInit+0xcc>)
 800103c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001040:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001048:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_UART_MspInit+0xcc>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104e:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <HAL_UART_MspInit+0xcc>)
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <HAL_UART_MspInit+0xcc>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001066:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800106a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001080:	2307      	movs	r3, #7
 8001082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001086:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <HAL_UART_MspInit+0xd0>)
 800108e:	f000 fedf 	bl	8001e50 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	37e8      	adds	r7, #232	@ 0xe8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40004800 	.word	0x40004800
 80010a0:	58024400 	.word	0x58024400
 80010a4:	58020c00 	.word	0x58020c00

080010a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ba      	sub	sp, #232	@ 0xe8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	22c0      	movs	r2, #192	@ 0xc0
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fc93 	bl	80069f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a38      	ldr	r2, [pc, #224]	@ (80011b4 <HAL_PCD_MspInit+0x10c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d169      	bne.n	80011ac <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80010e8:	2312      	movs	r3, #18
 80010ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80010f0:	2303      	movs	r3, #3
 80010f2:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80010fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001102:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001104:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fa47 	bl	80035a4 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 800111c:	f7ff fe6c 	bl	8000df8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001120:	f001 fa4a 	bl	80025b8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <HAL_PCD_MspInit+0x110>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	4a23      	ldr	r2, [pc, #140]	@ (80011b8 <HAL_PCD_MspInit+0x110>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001134:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <HAL_PCD_MspInit+0x110>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001142:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800115c:	230a      	movs	r3, #10
 800115e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001166:	4619      	mov	r1, r3
 8001168:	4814      	ldr	r0, [pc, #80]	@ (80011bc <HAL_PCD_MspInit+0x114>)
 800116a:	f000 fe71 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800116e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <HAL_PCD_MspInit+0x114>)
 800118a:	f000 fe61 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_PCD_MspInit+0x110>)
 8001190:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001194:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <HAL_PCD_MspInit+0x110>)
 8001196:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800119a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_PCD_MspInit+0x110>)
 80011a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80011ac:	bf00      	nop
 80011ae:	37e8      	adds	r7, #232	@ 0xe8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40080000 	.word	0x40080000
 80011b8:	58024400 	.word	0x58024400
 80011bc:	58020000 	.word	0x58020000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <NMI_Handler+0x4>

080011c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <MemManage_Handler+0x4>

080011d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 f89f 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001220:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001258 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001224:	f7ff fa46 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001228:	480c      	ldr	r0, [pc, #48]	@ (800125c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800122a:	490d      	ldr	r1, [pc, #52]	@ (8001260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001240:	4c0a      	ldr	r4, [pc, #40]	@ (800126c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124e:	f005 fbd9 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001252:	f7ff fb81 	bl	8000958 <main>
  bx  lr
 8001256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800125c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001260:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001264:	08006b64 	.word	0x08006b64
  ldr r2, =_sbss
 8001268:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 800126c:	240008e8 	.word	0x240008e8

08001270 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC3_IRQHandler>
	...

08001274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 f982 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001280:	f001 ffba 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8001284:	4602      	mov	r2, r0
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_Init+0x68>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	0a1b      	lsrs	r3, r3, #8
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	4913      	ldr	r1, [pc, #76]	@ (80012e0 <HAL_Init+0x6c>)
 8001292:	5ccb      	ldrb	r3, [r1, r3]
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HAL_Init+0x68>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <HAL_Init+0x6c>)
 80012a8:	5cd3      	ldrb	r3, [r2, r3]
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	4a0b      	ldr	r2, [pc, #44]	@ (80012e4 <HAL_Init+0x70>)
 80012b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012b8:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <HAL_Init+0x74>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f814 	bl	80012ec <HAL_InitTick>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e002      	b.n	80012d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ce:	f7ff fd99 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	58024400 	.word	0x58024400
 80012e0:	08006b1c 	.word	0x08006b1c
 80012e4:	24000004 	.word	0x24000004
 80012e8:	24000000 	.word	0x24000000

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <HAL_InitTick+0x60>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e021      	b.n	8001344 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_InitTick+0x64>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_InitTick+0x60>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f959 	bl	80015ce <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001334:	f000 f931 	bl	800159a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	@ (8001354 <HAL_InitTick+0x68>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2400000c 	.word	0x2400000c
 8001350:	24000000 	.word	0x24000000
 8001354:	24000008 	.word	0x24000008

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2400000c 	.word	0x2400000c
 800137c:	240007a4 	.word	0x240007a4

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	240007a4 	.word	0x240007a4

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2400000c 	.word	0x2400000c

080013e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_GetREVID+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0c1b      	lsrs	r3, r3, #16
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	5c001000 	.word	0x5c001000

080013f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001408:	4904      	ldr	r1, [pc, #16]	@ (800141c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	58000400 	.word	0x58000400

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <__NVIC_SetPriorityGrouping+0x40>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	4313      	orrs	r3, r2
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <__NVIC_SetPriorityGrouping+0x40>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00
 8001464:	05fa0000 	.word	0x05fa0000

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	@ (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	@ (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	@ 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff47 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff5e 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff90 	bl	80014d8 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5f 	bl	8001484 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffb2 	bl	8001540 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e3      	b.n	80017c2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001600:	2b00      	cmp	r3, #0
 8001602:	d106      	bne.n	8001612 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2223      	movs	r2, #35	@ 0x23
 8001608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fc13 	bl	8000e38 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	4b6e      	ldr	r3, [pc, #440]	@ (80017cc <HAL_ETH_Init+0x1e4>)
 8001614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001618:	4a6c      	ldr	r2, [pc, #432]	@ (80017cc <HAL_ETH_Init+0x1e4>)
 800161a:	f043 0302 	orr.w	r3, r3, #2
 800161e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001622:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <HAL_ETH_Init+0x1e4>)
 8001624:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7a1b      	ldrb	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d103      	bne.n	8001640 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fedd 	bl	80013f8 <HAL_SYSCFG_ETHInterfaceSelect>
 800163e:	e003      	b.n	8001648 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001640:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001644:	f7ff fed8 	bl	80013f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001648:	4b61      	ldr	r3, [pc, #388]	@ (80017d0 <HAL_ETH_Init+0x1e8>)
 800164a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001662:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff fe8c 	bl	8001380 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800166a:	e011      	b.n	8001690 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800166c:	f7ff fe88 	bl	8001380 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800167a:	d909      	bls.n	8001690 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2204      	movs	r2, #4
 8001680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	22e0      	movs	r2, #224	@ 0xe0
 8001688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e098      	b.n	80017c2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1e4      	bne.n	800166c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f89e 	bl	80017e4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016a8:	f001 ff20 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a49      	ldr	r2, [pc, #292]	@ (80017d4 <HAL_ETH_Init+0x1ec>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	0c9a      	lsrs	r2, r3, #18
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3a01      	subs	r2, #1
 80016bc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fa81 	bl	8001bc8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80016d2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016e2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	22e0      	movs	r2, #224	@ 0xe0
 80016fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e05d      	b.n	80017c2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800170e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001712:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_ETH_Init+0x1f0>)
 8001714:	4013      	ands	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6952      	ldr	r2, [r2, #20]
 800171a:	0051      	lsls	r1, r2, #1
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	430b      	orrs	r3, r1
 8001722:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001726:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fae9 	bl	8001d02 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fb2f 	bl	8001d94 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	3305      	adds	r3, #5
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	021a      	lsls	r2, r3, #8
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	3304      	adds	r3, #4
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	3303      	adds	r3, #3
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	061a      	lsls	r2, r3, #24
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	041b      	lsls	r3, r3, #16
 8001768:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	3301      	adds	r3, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001774:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001782:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001784:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_ETH_Init+0x1f4>)
 8001796:	430b      	orrs	r3, r1
 8001798:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <HAL_ETH_Init+0x1f8>)
 80017aa:	430b      	orrs	r3, r1
 80017ac:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2210      	movs	r2, #16
 80017bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58024400 	.word	0x58024400
 80017d0:	58000400 	.word	0x58000400
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	ffff8001 	.word	0xffff8001
 80017dc:	0c020060 	.word	0x0c020060
 80017e0:	0c20c000 	.word	0x0c20c000

080017e4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017fe:	f001 fe75 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8001802:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4a1a      	ldr	r2, [pc, #104]	@ (8001870 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d804      	bhi.n	8001816 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e022      	b.n	800185c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4a16      	ldr	r2, [pc, #88]	@ (8001874 <HAL_ETH_SetMDIOClockRange+0x90>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d204      	bcs.n	8001828 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e019      	b.n	800185c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4a13      	ldr	r2, [pc, #76]	@ (8001878 <HAL_ETH_SetMDIOClockRange+0x94>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d915      	bls.n	800185c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4a12      	ldr	r2, [pc, #72]	@ (800187c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d804      	bhi.n	8001842 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e00c      	b.n	800185c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d804      	bhi.n	8001854 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e003      	b.n	800185c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800185a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	02160ebf 	.word	0x02160ebf
 8001874:	03938700 	.word	0x03938700
 8001878:	05f5e0ff 	.word	0x05f5e0ff
 800187c:	08f0d17f 	.word	0x08f0d17f
 8001880:	0ee6b27f 	.word	0x0ee6b27f

08001884 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001896:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	791b      	ldrb	r3, [r3, #4]
 800189c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800189e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	7b1b      	ldrb	r3, [r3, #12]
 80018a4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7b5b      	ldrb	r3, [r3, #13]
 80018ac:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7b9b      	ldrb	r3, [r3, #14]
 80018b4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7bdb      	ldrb	r3, [r3, #15]
 80018bc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	7c12      	ldrb	r2, [r2, #16]
 80018c4:	2a00      	cmp	r2, #0
 80018c6:	d102      	bne.n	80018ce <ETH_SetMACConfig+0x4a>
 80018c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018cc:	e000      	b.n	80018d0 <ETH_SetMACConfig+0x4c>
 80018ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	7c52      	ldrb	r2, [r2, #17]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d102      	bne.n	80018e0 <ETH_SetMACConfig+0x5c>
 80018da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018de:	e000      	b.n	80018e2 <ETH_SetMACConfig+0x5e>
 80018e0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	7c9b      	ldrb	r3, [r3, #18]
 80018e8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018ea:	431a      	orrs	r2, r3
               macconf->Speed |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018f0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	7f1b      	ldrb	r3, [r3, #28]
 80018fc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	7f5b      	ldrb	r3, [r3, #29]
 8001904:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001906:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	7f92      	ldrb	r2, [r2, #30]
 800190c:	2a00      	cmp	r2, #0
 800190e:	d102      	bne.n	8001916 <ETH_SetMACConfig+0x92>
 8001910:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001914:	e000      	b.n	8001918 <ETH_SetMACConfig+0x94>
 8001916:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001918:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	7fdb      	ldrb	r3, [r3, #31]
 800191e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001920:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001928:	2a00      	cmp	r2, #0
 800192a:	d102      	bne.n	8001932 <ETH_SetMACConfig+0xae>
 800192c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001930:	e000      	b.n	8001934 <ETH_SetMACConfig+0xb0>
 8001932:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001934:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800193a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001942:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001944:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b56      	ldr	r3, [pc, #344]	@ (8001ab0 <ETH_SetMACConfig+0x22c>)
 8001956:	4013      	ands	r3, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	430b      	orrs	r3, r1
 8001960:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001966:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800196e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001970:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001978:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800197a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001982:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001984:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800198c:	2a00      	cmp	r2, #0
 800198e:	d102      	bne.n	8001996 <ETH_SetMACConfig+0x112>
 8001990:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001994:	e000      	b.n	8001998 <ETH_SetMACConfig+0x114>
 8001996:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001998:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4b42      	ldr	r3, [pc, #264]	@ (8001ab4 <ETH_SetMACConfig+0x230>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	430b      	orrs	r3, r1
 80019b4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019bc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <ETH_SetMACConfig+0x234>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	68f9      	ldr	r1, [r7, #12]
 80019d6:	430b      	orrs	r3, r1
 80019d8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019ee:	2a00      	cmp	r2, #0
 80019f0:	d101      	bne.n	80019f6 <ETH_SetMACConfig+0x172>
 80019f2:	2280      	movs	r2, #128	@ 0x80
 80019f4:	e000      	b.n	80019f8 <ETH_SetMACConfig+0x174>
 80019f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019f8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a0a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	430b      	orrs	r3, r1
 8001a18:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001a20:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001a28:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a36:	f023 0103 	bic.w	r1, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001a4e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a6a:	2a00      	cmp	r2, #0
 8001a6c:	d101      	bne.n	8001a72 <ETH_SetMACConfig+0x1ee>
 8001a6e:	2240      	movs	r2, #64	@ 0x40
 8001a70:	e000      	b.n	8001a74 <ETH_SetMACConfig+0x1f0>
 8001a72:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a7c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001a86:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a94:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	00048083 	.word	0x00048083
 8001ab4:	c0f88000 	.word	0xc0f88000
 8001ab8:	fffffef0 	.word	0xfffffef0

08001abc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <ETH_SetDMAConfig+0xf8>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	6811      	ldr	r1, [r2, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ae2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7b1b      	ldrb	r3, [r3, #12]
 8001af4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb8 <ETH_SetDMAConfig+0xfc>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	68f9      	ldr	r1, [r7, #12]
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b14:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	7b5b      	ldrb	r3, [r3, #13]
 8001b1a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b2c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001b30:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <ETH_SetDMAConfig+0x100>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b40:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	7d1b      	ldrb	r3, [r3, #20]
 8001b4c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b4e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	7f5b      	ldrb	r3, [r3, #29]
 8001b54:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b62:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <ETH_SetDMAConfig+0x104>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b76:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	7f1b      	ldrb	r3, [r3, #28]
 8001b7e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b90:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <ETH_SetDMAConfig+0x108>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ba4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	ffff87fd 	.word	0xffff87fd
 8001bb8:	ffff2ffe 	.word	0xffff2ffe
 8001bbc:	fffec000 	.word	0xfffec000
 8001bc0:	ffc0efef 	.word	0xffc0efef
 8001bc4:	7fc0ffff 	.word	0x7fc0ffff

08001bc8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b0a4      	sub	sp, #144	@ 0x90
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c08:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001c20:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001c24:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c30:	2301      	movs	r3, #1
 8001c32:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c42:	2300      	movs	r3, #0
 8001c44:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c60:	2320      	movs	r3, #32
 8001c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c72:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c7c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fde6 	bl	8001884 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cd2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cd6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cdc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ce0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001ce8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001cec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fee1 	bl	8001abc <ETH_SetDMAConfig>
}
 8001cfa:	bf00      	nop
 8001cfc:	3790      	adds	r7, #144	@ 0x90
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e01d      	b.n	8001d4c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68d9      	ldr	r1, [r3, #12]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	3206      	adds	r2, #6
 8001d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9de      	bls.n	8001d10 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d60:	461a      	mov	r2, r3
 8001d62:	2303      	movs	r3, #3
 8001d64:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d74:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d84:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e023      	b.n	8001dea <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6919      	ldr	r1, [r3, #16]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	3212      	adds	r2, #18
 8001de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d9d8      	bls.n	8001da2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e16:	461a      	mov	r2, r3
 8001e18:	2303      	movs	r3, #3
 8001e1a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e2a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	@ 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e5e:	4b89      	ldr	r3, [pc, #548]	@ (8002084 <HAL_GPIO_Init+0x234>)
 8001e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e62:	e194      	b.n	800218e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8186 	beq.w	8002188 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d005      	beq.n	8001e94 <HAL_GPIO_Init+0x44>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d130      	bne.n	8001ef6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eca:	2201      	movs	r2, #1
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	f003 0201 	and.w	r2, r3, #1
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d017      	beq.n	8001f32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d123      	bne.n	8001f86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	69b9      	ldr	r1, [r7, #24]
 8001f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0203 	and.w	r2, r3, #3
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80e0 	beq.w	8002188 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8002088 <HAL_GPIO_Init+0x238>)
 8001fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fce:	4a2e      	ldr	r2, [pc, #184]	@ (8002088 <HAL_GPIO_Init+0x238>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <HAL_GPIO_Init+0x238>)
 8001fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe6:	4a29      	ldr	r2, [pc, #164]	@ (800208c <HAL_GPIO_Init+0x23c>)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a20      	ldr	r2, [pc, #128]	@ (8002090 <HAL_GPIO_Init+0x240>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d052      	beq.n	80020b8 <HAL_GPIO_Init+0x268>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a1f      	ldr	r2, [pc, #124]	@ (8002094 <HAL_GPIO_Init+0x244>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d031      	beq.n	800207e <HAL_GPIO_Init+0x22e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1e      	ldr	r2, [pc, #120]	@ (8002098 <HAL_GPIO_Init+0x248>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02b      	beq.n	800207a <HAL_GPIO_Init+0x22a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1d      	ldr	r2, [pc, #116]	@ (800209c <HAL_GPIO_Init+0x24c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d025      	beq.n	8002076 <HAL_GPIO_Init+0x226>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1c      	ldr	r2, [pc, #112]	@ (80020a0 <HAL_GPIO_Init+0x250>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01f      	beq.n	8002072 <HAL_GPIO_Init+0x222>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <HAL_GPIO_Init+0x254>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d019      	beq.n	800206e <HAL_GPIO_Init+0x21e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <HAL_GPIO_Init+0x258>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x21a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_GPIO_Init+0x25c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x216>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <HAL_GPIO_Init+0x260>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x212>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a17      	ldr	r2, [pc, #92]	@ (80020b4 <HAL_GPIO_Init+0x264>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x20e>
 800205a:	2309      	movs	r3, #9
 800205c:	e02d      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800205e:	230a      	movs	r3, #10
 8002060:	e02b      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002062:	2308      	movs	r3, #8
 8002064:	e029      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002066:	2307      	movs	r3, #7
 8002068:	e027      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800206a:	2306      	movs	r3, #6
 800206c:	e025      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800206e:	2305      	movs	r3, #5
 8002070:	e023      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002072:	2304      	movs	r3, #4
 8002074:	e021      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002076:	2303      	movs	r3, #3
 8002078:	e01f      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800207a:	2302      	movs	r3, #2
 800207c:	e01d      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 800207e:	2301      	movs	r3, #1
 8002080:	e01b      	b.n	80020ba <HAL_GPIO_Init+0x26a>
 8002082:	bf00      	nop
 8002084:	58000080 	.word	0x58000080
 8002088:	58024400 	.word	0x58024400
 800208c:	58000400 	.word	0x58000400
 8002090:	58020000 	.word	0x58020000
 8002094:	58020400 	.word	0x58020400
 8002098:	58020800 	.word	0x58020800
 800209c:	58020c00 	.word	0x58020c00
 80020a0:	58021000 	.word	0x58021000
 80020a4:	58021400 	.word	0x58021400
 80020a8:	58021800 	.word	0x58021800
 80020ac:	58021c00 	.word	0x58021c00
 80020b0:	58022000 	.word	0x58022000
 80020b4:	58022400 	.word	0x58022400
 80020b8:	2300      	movs	r3, #0
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	f002 0203 	and.w	r2, r2, #3
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	4093      	lsls	r3, r2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ca:	4938      	ldr	r1, [pc, #224]	@ (80021ac <HAL_GPIO_Init+0x35c>)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800212c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3301      	adds	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	f47f ae63 	bne.w	8001e64 <HAL_GPIO_Init+0x14>
  }
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	3724      	adds	r7, #36	@ 0x24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	58000400 	.word	0x58000400

080021b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e001      	b.n	80021d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f0:	787b      	ldrb	r3, [r7, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021fc:	e003      	b.n	8002206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	041a      	lsls	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	619a      	str	r2, [r3, #24]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	041a      	lsls	r2, r3, #16
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43d9      	mvns	r1, r3
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	400b      	ands	r3, r1
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002250:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_HSEM_FastTake+0x2c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3320      	adds	r3, #32
 8002256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225a:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <HAL_HSEM_FastTake+0x30>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	58026400 	.word	0x58026400
 8002278:	80000300 	.word	0x80000300

0800227c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002286:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <HAL_HSEM_Release+0x24>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	58026400 	.word	0x58026400

080022a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0fe      	b.n	80024b4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe feec 	bl	80010a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2203      	movs	r2, #3
 80022d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f004 f8db 	bl	8006498 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7c1a      	ldrb	r2, [r3, #16]
 80022ea:	f88d 2000 	strb.w	r2, [sp]
 80022ee:	3304      	adds	r3, #4
 80022f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f2:	f004 f85f 	bl	80063b4 <USB_CoreInit>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0d5      	b.n	80024b4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f004 f8d3 	bl	80064ba <USB_SetCurrentMode>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0c6      	b.n	80024b4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e04a      	b.n	80023c2 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	3315      	adds	r3, #21
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3314      	adds	r3, #20
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	b298      	uxth	r0, r3
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	332e      	adds	r3, #46	@ 0x2e
 8002368:	4602      	mov	r2, r0
 800236a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3318      	adds	r3, #24
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	331c      	adds	r3, #28
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3320      	adds	r3, #32
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3324      	adds	r3, #36	@ 0x24
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3301      	adds	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d3af      	bcc.n	800232c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e044      	b.n	800245c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	3301      	adds	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	791b      	ldrb	r3, [r3, #4]
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	429a      	cmp	r2, r3
 8002464:	d3b5      	bcc.n	80023d2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7c1a      	ldrb	r2, [r3, #16]
 800246e:	f88d 2000 	strb.w	r2, [sp]
 8002472:	3304      	adds	r3, #4
 8002474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002476:	f004 f86d 	bl	8006554 <USB_DevInit>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e013      	b.n	80024b4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7b1b      	ldrb	r3, [r3, #12]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d102      	bne.n	80024a8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f80a 	bl	80024bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 fa28 	bl	8006902 <USB_DevDisconnect>

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024ea:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <HAL_PCDEx_ActivateLPM+0x44>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	10000003 	.word	0x10000003

08002504 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800250c:	4b29      	ldr	r3, [pc, #164]	@ (80025b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	2b06      	cmp	r3, #6
 8002516:	d00a      	beq.n	800252e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002518:	4b26      	ldr	r3, [pc, #152]	@ (80025b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d001      	beq.n	800252a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e040      	b.n	80025ac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e03e      	b.n	80025ac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800252e:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002536:	491f      	ldr	r1, [pc, #124]	@ (80025b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4313      	orrs	r3, r2
 800253c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800253e:	f7fe ff1f 	bl	8001380 <HAL_GetTick>
 8002542:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002544:	e009      	b.n	800255a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002546:	f7fe ff1b 	bl	8001380 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002554:	d901      	bls.n	800255a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e028      	b.n	80025ac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800255a:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002566:	d1ee      	bne.n	8002546 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b1e      	cmp	r3, #30
 800256c:	d008      	beq.n	8002580 <HAL_PWREx_ConfigSupply+0x7c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b2e      	cmp	r3, #46	@ 0x2e
 8002572:	d005      	beq.n	8002580 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b1d      	cmp	r3, #29
 8002578:	d002      	beq.n	8002580 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b2d      	cmp	r3, #45	@ 0x2d
 800257e:	d114      	bne.n	80025aa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002580:	f7fe fefe 	bl	8001380 <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002586:	e009      	b.n	800259c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002588:	f7fe fefa 	bl	8001380 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002596:	d901      	bls.n	800259c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e007      	b.n	80025ac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800259c:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a8:	d1ee      	bne.n	8002588 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	58024800 	.word	0x58024800

080025b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025bc:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	58024800 	.word	0x58024800

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	@ 0x30
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f000 bc48 	b.w	8002e7c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8088 	beq.w	800270a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fa:	4b99      	ldr	r3, [pc, #612]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002604:	4b96      	ldr	r3, [pc, #600]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260c:	2b10      	cmp	r3, #16
 800260e:	d007      	beq.n	8002620 <HAL_RCC_OscConfig+0x48>
 8002610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002612:	2b18      	cmp	r3, #24
 8002614:	d111      	bne.n	800263a <HAL_RCC_OscConfig+0x62>
 8002616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d10c      	bne.n	800263a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4b8f      	ldr	r3, [pc, #572]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d06d      	beq.n	8002708 <HAL_RCC_OscConfig+0x130>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d169      	bne.n	8002708 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f000 bc21 	b.w	8002e7c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x7a>
 8002644:	4b86      	ldr	r3, [pc, #536]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a85      	ldr	r2, [pc, #532]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e02e      	b.n	80026b0 <HAL_RCC_OscConfig+0xd8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x9c>
 800265a:	4b81      	ldr	r3, [pc, #516]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a80      	ldr	r2, [pc, #512]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b7e      	ldr	r3, [pc, #504]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7d      	ldr	r2, [pc, #500]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800266c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xd8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0xc0>
 800267e:	4b78      	ldr	r3, [pc, #480]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a77      	ldr	r2, [pc, #476]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b75      	ldr	r3, [pc, #468]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a74      	ldr	r2, [pc, #464]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xd8>
 8002698:	4b71      	ldr	r3, [pc, #452]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a70      	ldr	r2, [pc, #448]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6d      	ldr	r2, [pc, #436]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fe62 	bl	8001380 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7fe fe5e 	bl	8001380 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e3d4      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe8>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fe4e 	bl	8001380 <HAL_GetTick>
 80026e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fe4a 	bl	8001380 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e3c0      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026fa:	4b59      	ldr	r3, [pc, #356]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x110>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80ca 	beq.w	80028ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002718:	4b51      	ldr	r3, [pc, #324]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002720:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002722:	4b4f      	ldr	r3, [pc, #316]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <HAL_RCC_OscConfig+0x166>
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2b18      	cmp	r3, #24
 8002732:	d156      	bne.n	80027e2 <HAL_RCC_OscConfig+0x20a>
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d151      	bne.n	80027e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273e:	4b48      	ldr	r3, [pc, #288]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e392      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002756:	4b42      	ldr	r3, [pc, #264]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0219 	bic.w	r2, r3, #25
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	493f      	ldr	r1, [pc, #252]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fe0a 	bl	8001380 <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002770:	f7fe fe06 	bl	8001380 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e37c      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002782:	4b37      	ldr	r3, [pc, #220]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	f7fe fe27 	bl	80013e0 <HAL_GetREVID>
 8002792:	4603      	mov	r3, r0
 8002794:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002798:	4293      	cmp	r3, r2
 800279a:	d817      	bhi.n	80027cc <HAL_RCC_OscConfig+0x1f4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b40      	cmp	r3, #64	@ 0x40
 80027a2:	d108      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1de>
 80027a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b4:	e07a      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	031b      	lsls	r3, r3, #12
 80027c4:	4926      	ldr	r1, [pc, #152]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ca:	e06f      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	4921      	ldr	r1, [pc, #132]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e0:	e064      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d047      	beq.n	800287a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0219 	bic.w	r2, r3, #25
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	491a      	ldr	r1, [pc, #104]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fdc0 	bl	8001380 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002804:	f7fe fdbc 	bl	8001380 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e332      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002816:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	f7fe fddd 	bl	80013e0 <HAL_GetREVID>
 8002826:	4603      	mov	r3, r0
 8002828:	f241 0203 	movw	r2, #4099	@ 0x1003
 800282c:	4293      	cmp	r3, r2
 800282e:	d819      	bhi.n	8002864 <HAL_RCC_OscConfig+0x28c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b40      	cmp	r3, #64	@ 0x40
 8002836:	d108      	bne.n	800284a <HAL_RCC_OscConfig+0x272>
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002840:	4a07      	ldr	r2, [pc, #28]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 8002842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002846:	6053      	str	r3, [r2, #4]
 8002848:	e030      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
 800284a:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	4901      	ldr	r1, [pc, #4]	@ (8002860 <HAL_RCC_OscConfig+0x288>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
 800285e:	e025      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
 8002860:	58024400 	.word	0x58024400
 8002864:	4b9a      	ldr	r3, [pc, #616]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	4997      	ldr	r1, [pc, #604]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
 8002878:	e018      	b.n	80028ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b95      	ldr	r3, [pc, #596]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a94      	ldr	r2, [pc, #592]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fd7b 	bl	8001380 <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288e:	f7fe fd77 	bl	8001380 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e2ed      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028a0:	4b8b      	ldr	r3, [pc, #556]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a9 	beq.w	8002a0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ba:	4b85      	ldr	r3, [pc, #532]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c4:	4b82      	ldr	r3, [pc, #520]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d007      	beq.n	80028e0 <HAL_RCC_OscConfig+0x308>
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b18      	cmp	r3, #24
 80028d4:	d13a      	bne.n	800294c <HAL_RCC_OscConfig+0x374>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d135      	bne.n	800294c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_OscConfig+0x320>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b80      	cmp	r3, #128	@ 0x80
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e2c1      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028f8:	f7fe fd72 	bl	80013e0 <HAL_GetREVID>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002902:	4293      	cmp	r3, r2
 8002904:	d817      	bhi.n	8002936 <HAL_RCC_OscConfig+0x35e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	2b20      	cmp	r3, #32
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x348>
 800290e:	4b70      	ldr	r3, [pc, #448]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002916:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800291c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800291e:	e075      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002920:	4b6b      	ldr	r3, [pc, #428]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	069b      	lsls	r3, r3, #26
 800292e:	4968      	ldr	r1, [pc, #416]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002934:	e06a      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002936:	4b66      	ldr	r3, [pc, #408]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	4962      	ldr	r1, [pc, #392]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002946:	4313      	orrs	r3, r2
 8002948:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800294a:	e05f      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d042      	beq.n	80029da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002954:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fd0e 	bl	8001380 <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002968:	f7fe fd0a 	bl	8001380 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e280      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800297a:	4b55      	ldr	r3, [pc, #340]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002986:	f7fe fd2b 	bl	80013e0 <HAL_GetREVID>
 800298a:	4603      	mov	r3, r0
 800298c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002990:	4293      	cmp	r3, r2
 8002992:	d817      	bhi.n	80029c4 <HAL_RCC_OscConfig+0x3ec>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	2b20      	cmp	r3, #32
 800299a:	d108      	bne.n	80029ae <HAL_RCC_OscConfig+0x3d6>
 800299c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029a4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029aa:	6053      	str	r3, [r2, #4]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
 80029ae:	4b48      	ldr	r3, [pc, #288]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	4944      	ldr	r1, [pc, #272]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
 80029c2:	e023      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
 80029c4:	4b42      	ldr	r3, [pc, #264]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	493f      	ldr	r1, [pc, #252]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60cb      	str	r3, [r1, #12]
 80029d8:	e018      	b.n	8002a0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029da:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a3c      	ldr	r2, [pc, #240]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80029e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe fccb 	bl	8001380 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029ee:	f7fe fcc7 	bl	8001380 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e23d      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a00:	4b33      	ldr	r3, [pc, #204]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d036      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d019      	beq.n	8002a54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a24:	4a2a      	ldr	r2, [pc, #168]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fca8 	bl	8001380 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a34:	f7fe fca4 	bl	8001380 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e21a      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a46:	4b22      	ldr	r3, [pc, #136]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x45c>
 8002a52:	e018      	b.n	8002a86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a58:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe fc8e 	bl	8001380 <HAL_GetTick>
 8002a64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7fe fc8a 	bl	8001380 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e200      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d039      	beq.n	8002b06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fc6b 	bl	8001380 <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aae:	f7fe fc67 	bl	8001380 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e1dd      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x4d6>
 8002acc:	e01b      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
 8002ace:	bf00      	nop
 8002ad0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ad4:	4b9b      	ldr	r3, [pc, #620]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a9a      	ldr	r2, [pc, #616]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ada:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ade:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fc4e 	bl	8001380 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae8:	f7fe fc4a 	bl	8001380 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1c0      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002afa:	4b92      	ldr	r3, [pc, #584]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8081 	beq.w	8002c16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b14:	4b8c      	ldr	r3, [pc, #560]	@ (8002d48 <HAL_RCC_OscConfig+0x770>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a8b      	ldr	r2, [pc, #556]	@ (8002d48 <HAL_RCC_OscConfig+0x770>)
 8002b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b20:	f7fe fc2e 	bl	8001380 <HAL_GetTick>
 8002b24:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b28:	f7fe fc2a 	bl	8001380 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1a0      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b3a:	4b83      	ldr	r3, [pc, #524]	@ (8002d48 <HAL_RCC_OscConfig+0x770>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d106      	bne.n	8002b5c <HAL_RCC_OscConfig+0x584>
 8002b4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b52:	4a7c      	ldr	r2, [pc, #496]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5a:	e02d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5e0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x5a6>
 8002b64:	4b77      	ldr	r3, [pc, #476]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b68:	4a76      	ldr	r2, [pc, #472]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b70:	4b74      	ldr	r3, [pc, #464]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b74:	4a73      	ldr	r2, [pc, #460]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b76:	f023 0304 	bic.w	r3, r3, #4
 8002b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7c:	e01c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5e0>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5c8>
 8002b86:	4b6f      	ldr	r3, [pc, #444]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b92:	4b6c      	ldr	r3, [pc, #432]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	4a6b      	ldr	r2, [pc, #428]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5e0>
 8002ba0:	4b68      	ldr	r3, [pc, #416]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba4:	4a67      	ldr	r2, [pc, #412]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bac:	4b65      	ldr	r3, [pc, #404]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	4a64      	ldr	r2, [pc, #400]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fbde 	bl	8001380 <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fbda 	bl	8001380 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e14e      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bde:	4b59      	ldr	r3, [pc, #356]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x5f0>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe fbc8 	bl	8001380 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fe fbc4 	bl	8001380 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e138      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 812d 	beq.w	8002e7a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c20:	4b48      	ldr	r3, [pc, #288]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c28:	2b18      	cmp	r3, #24
 8002c2a:	f000 80bd 	beq.w	8002da8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	f040 809e 	bne.w	8002d74 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b42      	ldr	r3, [pc, #264]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a41      	ldr	r2, [pc, #260]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fb9c 	bl	8001380 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fb98 	bl	8001380 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e10e      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5e:	4b39      	ldr	r3, [pc, #228]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6a:	4b36      	ldr	r3, [pc, #216]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c6e:	4b37      	ldr	r3, [pc, #220]	@ (8002d4c <HAL_RCC_OscConfig+0x774>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	4931      	ldr	r1, [pc, #196]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c92:	3b01      	subs	r3, #1
 8002c94:	025b      	lsls	r3, r3, #9
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cac:	3b01      	subs	r3, #1
 8002cae:	061b      	lsls	r3, r3, #24
 8002cb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002cb4:	4923      	ldr	r1, [pc, #140]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002cba:	4b22      	ldr	r3, [pc, #136]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	4a21      	ldr	r2, [pc, #132]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cca:	4b21      	ldr	r3, [pc, #132]	@ (8002d50 <HAL_RCC_OscConfig+0x778>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cd2:	00d2      	lsls	r2, r2, #3
 8002cd4:	491b      	ldr	r1, [pc, #108]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cda:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cde:	f023 020c 	bic.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	4917      	ldr	r1, [pc, #92]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cec:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	f023 0202 	bic.w	r2, r3, #2
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf8:	4912      	ldr	r1, [pc, #72]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cfe:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	4a10      	ldr	r2, [pc, #64]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d22:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	4a07      	ldr	r2, [pc, #28]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d2e:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <HAL_RCC_OscConfig+0x76c>)
 8002d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fb21 	bl	8001380 <HAL_GetTick>
 8002d3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d40:	e011      	b.n	8002d66 <HAL_RCC_OscConfig+0x78e>
 8002d42:	bf00      	nop
 8002d44:	58024400 	.word	0x58024400
 8002d48:	58024800 	.word	0x58024800
 8002d4c:	fffffc0c 	.word	0xfffffc0c
 8002d50:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe fb14 	bl	8001380 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e08a      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d66:	4b47      	ldr	r3, [pc, #284]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x77c>
 8002d72:	e082      	b.n	8002e7a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d74:	4b43      	ldr	r3, [pc, #268]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a42      	ldr	r2, [pc, #264]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002d7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fafe 	bl	8001380 <HAL_GetTick>
 8002d84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe fafa 	bl	8001380 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e070      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x7b0>
 8002da6:	e068      	b.n	8002e7a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002da8:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dae:	4b35      	ldr	r3, [pc, #212]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d031      	beq.n	8002e20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f003 0203 	and.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d12a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d122      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0a5b      	lsrs	r3, r3, #9
 8002dee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d108      	bne.n	8002e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	0e1b      	lsrs	r3, r3, #24
 8002e12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02b      	b.n	8002e7c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e24:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d01f      	beq.n	8002e7a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3e:	4a11      	ldr	r2, [pc, #68]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e46:	f7fe fa9b 	bl	8001380 <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e4c:	bf00      	nop
 8002e4e:	f7fe fa97 	bl	8001380 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d0f9      	beq.n	8002e4e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <HAL_RCC_OscConfig+0x8b0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e66:	00d2      	lsls	r2, r2, #3
 8002e68:	4906      	ldr	r1, [pc, #24]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <HAL_RCC_OscConfig+0x8ac>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3730      	adds	r7, #48	@ 0x30
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	58024400 	.word	0x58024400
 8002e88:	ffff0007 	.word	0xffff0007

08002e8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e19c      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b8a      	ldr	r3, [pc, #552]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d910      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b87      	ldr	r3, [pc, #540]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 020f 	bic.w	r2, r3, #15
 8002eb6:	4985      	ldr	r1, [pc, #532]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b83      	ldr	r3, [pc, #524]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e184      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	4b7b      	ldr	r3, [pc, #492]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d908      	bls.n	8002efe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eec:	4b78      	ldr	r3, [pc, #480]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	4975      	ldr	r1, [pc, #468]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	4b70      	ldr	r3, [pc, #448]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d908      	bls.n	8002f2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	496a      	ldr	r1, [pc, #424]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	4b64      	ldr	r3, [pc, #400]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d908      	bls.n	8002f5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f48:	4b61      	ldr	r3, [pc, #388]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	495e      	ldr	r1, [pc, #376]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d010      	beq.n	8002f88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	4b59      	ldr	r3, [pc, #356]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d908      	bls.n	8002f88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f76:	4b56      	ldr	r3, [pc, #344]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4953      	ldr	r1, [pc, #332]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d010      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	4b4d      	ldr	r3, [pc, #308]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d908      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b4a      	ldr	r3, [pc, #296]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f023 020f 	bic.w	r2, r3, #15
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4947      	ldr	r1, [pc, #284]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d055      	beq.n	800306e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fc2:	4b43      	ldr	r3, [pc, #268]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4940      	ldr	r1, [pc, #256]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d121      	bne.n	800302c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0f6      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff4:	4b36      	ldr	r3, [pc, #216]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d115      	bne.n	800302c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0ea      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800300c:	4b30      	ldr	r3, [pc, #192]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0de      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800301c:	4b2c      	ldr	r3, [pc, #176]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0d6      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800302c:	4b28      	ldr	r3, [pc, #160]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f023 0207 	bic.w	r2, r3, #7
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4925      	ldr	r1, [pc, #148]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800303a:	4313      	orrs	r3, r2
 800303c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800303e:	f7fe f99f 	bl	8001380 <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003044:	e00a      	b.n	800305c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7fe f99b 	bl	8001380 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0be      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305c:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	429a      	cmp	r2, r3
 800306c:	d1eb      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d010      	beq.n	800309c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	429a      	cmp	r2, r3
 8003088:	d208      	bcs.n	800309c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308a:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f023 020f 	bic.w	r2, r3, #15
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	490e      	ldr	r1, [pc, #56]	@ (80030d0 <HAL_RCC_ClockConfig+0x244>)
 8003098:	4313      	orrs	r3, r2
 800309a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d214      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	4906      	ldr	r1, [pc, #24]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <HAL_RCC_ClockConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e086      	b.n	80031da <HAL_RCC_ClockConfig+0x34e>
 80030cc:	52002000 	.word	0x52002000
 80030d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d208      	bcs.n	8003102 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030f0:	4b3c      	ldr	r3, [pc, #240]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	4939      	ldr	r1, [pc, #228]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	4b34      	ldr	r3, [pc, #208]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800311a:	429a      	cmp	r2, r3
 800311c:	d208      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800311e:	4b31      	ldr	r3, [pc, #196]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	492e      	ldr	r1, [pc, #184]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 800312c:	4313      	orrs	r3, r2
 800312e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699a      	ldr	r2, [r3, #24]
 8003140:	4b28      	ldr	r3, [pc, #160]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003148:	429a      	cmp	r2, r3
 800314a:	d208      	bcs.n	800315e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800314c:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4922      	ldr	r1, [pc, #136]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 800315a:	4313      	orrs	r3, r2
 800315c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003176:	429a      	cmp	r2, r3
 8003178:	d208      	bcs.n	800318c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800317a:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	4917      	ldr	r1, [pc, #92]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003188:	4313      	orrs	r3, r2
 800318a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800318c:	f000 f834 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	4912      	ldr	r1, [pc, #72]	@ (80031e8 <HAL_RCC_ClockConfig+0x35c>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031aa:	4b0e      	ldr	r3, [pc, #56]	@ (80031e4 <HAL_RCC_ClockConfig+0x358>)
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <HAL_RCC_ClockConfig+0x35c>)
 80031b4:	5cd3      	ldrb	r3, [r2, r3]
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
 80031c0:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <HAL_RCC_ClockConfig+0x360>)
 80031c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031c4:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <HAL_RCC_ClockConfig+0x364>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031ca:	4b0a      	ldr	r3, [pc, #40]	@ (80031f4 <HAL_RCC_ClockConfig+0x368>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe f88c 	bl	80012ec <HAL_InitTick>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	58024400 	.word	0x58024400
 80031e8:	08006b1c 	.word	0x08006b1c
 80031ec:	24000004 	.word	0x24000004
 80031f0:	24000000 	.word	0x24000000
 80031f4:	24000008 	.word	0x24000008

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	@ 0x24
 80031fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031fe:	4bb3      	ldr	r3, [pc, #716]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003206:	2b18      	cmp	r3, #24
 8003208:	f200 8155 	bhi.w	80034b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800320c:	a201      	add	r2, pc, #4	@ (adr r2, 8003214 <HAL_RCC_GetSysClockFreq+0x1c>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003279 	.word	0x08003279
 8003218:	080034b7 	.word	0x080034b7
 800321c:	080034b7 	.word	0x080034b7
 8003220:	080034b7 	.word	0x080034b7
 8003224:	080034b7 	.word	0x080034b7
 8003228:	080034b7 	.word	0x080034b7
 800322c:	080034b7 	.word	0x080034b7
 8003230:	080034b7 	.word	0x080034b7
 8003234:	0800329f 	.word	0x0800329f
 8003238:	080034b7 	.word	0x080034b7
 800323c:	080034b7 	.word	0x080034b7
 8003240:	080034b7 	.word	0x080034b7
 8003244:	080034b7 	.word	0x080034b7
 8003248:	080034b7 	.word	0x080034b7
 800324c:	080034b7 	.word	0x080034b7
 8003250:	080034b7 	.word	0x080034b7
 8003254:	080032a5 	.word	0x080032a5
 8003258:	080034b7 	.word	0x080034b7
 800325c:	080034b7 	.word	0x080034b7
 8003260:	080034b7 	.word	0x080034b7
 8003264:	080034b7 	.word	0x080034b7
 8003268:	080034b7 	.word	0x080034b7
 800326c:	080034b7 	.word	0x080034b7
 8003270:	080034b7 	.word	0x080034b7
 8003274:	080032ab 	.word	0x080032ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003278:	4b94      	ldr	r3, [pc, #592]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d009      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003284:	4b91      	ldr	r3, [pc, #580]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	4a90      	ldr	r2, [pc, #576]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
 8003294:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003296:	e111      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003298:	4b8d      	ldr	r3, [pc, #564]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800329a:	61bb      	str	r3, [r7, #24]
      break;
 800329c:	e10e      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800329e:	4b8d      	ldr	r3, [pc, #564]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032a0:	61bb      	str	r3, [r7, #24]
      break;
 80032a2:	e10b      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032a4:	4b8c      	ldr	r3, [pc, #560]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032a6:	61bb      	str	r3, [r7, #24]
      break;
 80032a8:	e108      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032aa:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032b4:	4b85      	ldr	r3, [pc, #532]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032c0:	4b82      	ldr	r3, [pc, #520]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032ca:	4b80      	ldr	r3, [pc, #512]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ce:	08db      	lsrs	r3, r3, #3
 80032d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80e1 	beq.w	80034b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f000 8083 	beq.w	80033fc <HAL_RCC_GetSysClockFreq+0x204>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	f200 80a1 	bhi.w	8003440 <HAL_RCC_GetSysClockFreq+0x248>
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x114>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d056      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800330a:	e099      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800330c:	4b6f      	ldr	r3, [pc, #444]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02d      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003318:	4b6c      	ldr	r3, [pc, #432]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	4a6b      	ldr	r2, [pc, #428]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	ee07 3a90 	vmov	s15, r3
 8003330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003342:	4b62      	ldr	r3, [pc, #392]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003352:	ed97 6a02 	vldr	s12, [r7, #8]
 8003356:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800335a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003372:	e087      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80034e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003386:	4b51      	ldr	r3, [pc, #324]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003396:	ed97 6a02 	vldr	s12, [r7, #8]
 800339a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800339e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033b6:	e065      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80034e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ca:	4b40      	ldr	r3, [pc, #256]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033da:	ed97 6a02 	vldr	s12, [r7, #8]
 80033de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80033e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033fa:	e043      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80034e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800340a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340e:	4b2f      	ldr	r3, [pc, #188]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003422:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800342a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800343e:	e021      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80034e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800344e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003452:	4b1e      	ldr	r3, [pc, #120]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003462:	ed97 6a02 	vldr	s12, [r7, #8]
 8003466:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800346a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003482:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	0a5b      	lsrs	r3, r3, #9
 800348a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800348e:	3301      	adds	r3, #1
 8003490:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800349c:	edd7 6a07 	vldr	s13, [r7, #28]
 80034a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a8:	ee17 3a90 	vmov	r3, s15
 80034ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034ae:	e005      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
      break;
 80034b4:	e002      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034b6:	4b07      	ldr	r3, [pc, #28]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034b8:	61bb      	str	r3, [r7, #24]
      break;
 80034ba:	bf00      	nop
  }

  return sysclockfreq;
 80034bc:	69bb      	ldr	r3, [r7, #24]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	@ 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	58024400 	.word	0x58024400
 80034d0:	03d09000 	.word	0x03d09000
 80034d4:	003d0900 	.word	0x003d0900
 80034d8:	007a1200 	.word	0x007a1200
 80034dc:	46000000 	.word	0x46000000
 80034e0:	4c742400 	.word	0x4c742400
 80034e4:	4a742400 	.word	0x4a742400
 80034e8:	4af42400 	.word	0x4af42400

080034ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034f2:	f7ff fe81 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b10      	ldr	r3, [pc, #64]	@ (800353c <HAL_RCC_GetHCLKFreq+0x50>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490f      	ldr	r1, [pc, #60]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x54>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003510:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <HAL_RCC_GetHCLKFreq+0x50>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	4a09      	ldr	r2, [pc, #36]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x54>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	4a07      	ldr	r2, [pc, #28]	@ (8003544 <HAL_RCC_GetHCLKFreq+0x58>)
 8003528:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800352a:	4a07      	ldr	r2, [pc, #28]	@ (8003548 <HAL_RCC_GetHCLKFreq+0x5c>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003530:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <HAL_RCC_GetHCLKFreq+0x58>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	58024400 	.word	0x58024400
 8003540:	08006b1c 	.word	0x08006b1c
 8003544:	24000004 	.word	0x24000004
 8003548:	24000000 	.word	0x24000000

0800354c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003550:	f7ff ffcc 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4904      	ldr	r1, [pc, #16]	@ (8003574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	58024400 	.word	0x58024400
 8003574:	08006b1c 	.word	0x08006b1c

08003578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800357c:	f7ff ffb6 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4904      	ldr	r1, [pc, #16]	@ (80035a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	58024400 	.word	0x58024400
 80035a0:	08006b1c 	.word	0x08006b1c

080035a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a8:	b0ca      	sub	sp, #296	@ 0x128
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80035c8:	2500      	movs	r5, #0
 80035ca:	ea54 0305 	orrs.w	r3, r4, r5
 80035ce:	d049      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035da:	d02f      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035e0:	d828      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035e6:	d01a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035ec:	d822      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035f6:	d007      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035f8:	e01c      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035fa:	4bb8      	ldr	r3, [pc, #736]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fe:	4ab7      	ldr	r2, [pc, #732]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003606:	e01a      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	3308      	adds	r3, #8
 800360e:	2102      	movs	r1, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f001 fc8f 	bl	8004f34 <RCCEx_PLL2_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800361c:	e00f      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	3328      	adds	r3, #40	@ 0x28
 8003624:	2102      	movs	r1, #2
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fd36 	bl	8005098 <RCCEx_PLL3_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003632:	e004      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800363c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003646:	4ba5      	ldr	r3, [pc, #660]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003654:	4aa1      	ldr	r2, [pc, #644]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003656:	430b      	orrs	r3, r1
 8003658:	6513      	str	r3, [r2, #80]	@ 0x50
 800365a:	e003      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003670:	f04f 0900 	mov.w	r9, #0
 8003674:	ea58 0309 	orrs.w	r3, r8, r9
 8003678:	d047      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003680:	2b04      	cmp	r3, #4
 8003682:	d82a      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003684:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	080036a1 	.word	0x080036a1
 8003690:	080036af 	.word	0x080036af
 8003694:	080036c5 	.word	0x080036c5
 8003698:	080036e3 	.word	0x080036e3
 800369c:	080036e3 	.word	0x080036e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4b8e      	ldr	r3, [pc, #568]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	4a8d      	ldr	r2, [pc, #564]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ac:	e01a      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	3308      	adds	r3, #8
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fc3c 	bl	8004f34 <RCCEx_PLL2_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c2:	e00f      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	3328      	adds	r3, #40	@ 0x28
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 fce3 	bl	8005098 <RCCEx_PLL3_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d8:	e004      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ec:	4b7b      	ldr	r3, [pc, #492]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f0:	f023 0107 	bic.w	r1, r3, #7
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fa:	4a78      	ldr	r2, [pc, #480]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003716:	f04f 0b00 	mov.w	fp, #0
 800371a:	ea5a 030b 	orrs.w	r3, sl, fp
 800371e:	d04c      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800372a:	d030      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800372c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003730:	d829      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003732:	2bc0      	cmp	r3, #192	@ 0xc0
 8003734:	d02d      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003736:	2bc0      	cmp	r3, #192	@ 0xc0
 8003738:	d825      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800373a:	2b80      	cmp	r3, #128	@ 0x80
 800373c:	d018      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800373e:	2b80      	cmp	r3, #128	@ 0x80
 8003740:	d821      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003746:	2b40      	cmp	r3, #64	@ 0x40
 8003748:	d007      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800374a:	e01c      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374c:	4b63      	ldr	r3, [pc, #396]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	4a62      	ldr	r2, [pc, #392]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003758:	e01c      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375e:	3308      	adds	r3, #8
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f001 fbe6 	bl	8004f34 <RCCEx_PLL2_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800376e:	e011      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003774:	3328      	adds	r3, #40	@ 0x28
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f001 fc8d 	bl	8005098 <RCCEx_PLL3_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003784:	e006      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800378c:	e002      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800379c:	4b4f      	ldr	r3, [pc, #316]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	4a4c      	ldr	r2, [pc, #304]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80037c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80037d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80037d4:	460b      	mov	r3, r1
 80037d6:	4313      	orrs	r3, r2
 80037d8:	d053      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037e6:	d035      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037ec:	d82e      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037f2:	d031      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80037f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037f8:	d828      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037fe:	d01a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003800:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003804:	d822      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800380a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800380e:	d007      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003810:	e01c      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003812:	4b32      	ldr	r3, [pc, #200]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003816:	4a31      	ldr	r2, [pc, #196]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800381e:	e01c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003824:	3308      	adds	r3, #8
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fb83 	bl	8004f34 <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003834:	e011      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383a:	3328      	adds	r3, #40	@ 0x28
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fc2a 	bl	8005098 <RCCEx_PLL3_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800384a:	e006      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003852:	e002      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003862:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003872:	4a1a      	ldr	r2, [pc, #104]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6593      	str	r3, [r2, #88]	@ 0x58
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800388e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003898:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d056      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038ae:	d038      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038b4:	d831      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038ba:	d034      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038c0:	d82b      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038c6:	d01d      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038cc:	d825      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038d8:	e01f      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038da:	bf00      	nop
 80038dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e0:	4ba2      	ldr	r3, [pc, #648]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	4aa1      	ldr	r2, [pc, #644]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038ec:	e01c      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	3308      	adds	r3, #8
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fb1c 	bl	8004f34 <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003902:	e011      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003908:	3328      	adds	r3, #40	@ 0x28
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fbc3 	bl	8005098 <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003918:	e006      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003920:	e002      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003930:	4b8e      	ldr	r3, [pc, #568]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003934:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003940:	4a8a      	ldr	r2, [pc, #552]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003942:	430b      	orrs	r3, r1
 8003944:	6593      	str	r3, [r2, #88]	@ 0x58
 8003946:	e003      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800395c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003960:	2300      	movs	r3, #0
 8003962:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003966:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d03a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	2b30      	cmp	r3, #48	@ 0x30
 8003978:	d01f      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800397a:	2b30      	cmp	r3, #48	@ 0x30
 800397c:	d819      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800397e:	2b20      	cmp	r3, #32
 8003980:	d00c      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003982:	2b20      	cmp	r3, #32
 8003984:	d815      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d019      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800398a:	2b10      	cmp	r3, #16
 800398c:	d111      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398e:	4b77      	ldr	r3, [pc, #476]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003992:	4a76      	ldr	r2, [pc, #472]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800399a:	e011      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	3308      	adds	r3, #8
 80039a2:	2102      	movs	r1, #2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fac5 	bl	8004f34 <RCCEx_PLL2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039b0:	e006      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039b8:	e002      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039c8:	4b68      	ldr	r3, [pc, #416]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d6:	4a65      	ldr	r2, [pc, #404]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d8:	430b      	orrs	r3, r1
 80039da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80039f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4313      	orrs	r3, r2
 8003a04:	d051      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a10:	d035      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a16:	d82e      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a1c:	d031      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a22:	d828      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a28:	d01a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2e:	d822      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a38:	d007      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a3a:	e01c      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	4a4a      	ldr	r2, [pc, #296]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a48:	e01c      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4e:	3308      	adds	r3, #8
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fa6e 	bl	8004f34 <RCCEx_PLL2_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a5e:	e011      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a64:	3328      	adds	r3, #40	@ 0x28
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 fb15 	bl	8005098 <RCCEx_PLL3_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a74:	e006      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a7c:	e002      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a8c:	4b37      	ldr	r3, [pc, #220]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9a:	4a34      	ldr	r2, [pc, #208]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aa0:	e003      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aba:	2300      	movs	r3, #0
 8003abc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ac0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	d056      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ad0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ad4:	d033      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ad6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ada:	d82c      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003adc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ae0:	d02f      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ae2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ae6:	d826      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ae8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aec:	d02b      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003aee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003af2:	d820      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003af4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003af8:	d012      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003afe:	d81a      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b08:	d115      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	3308      	adds	r3, #8
 8003b10:	2101      	movs	r1, #1
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 fa0e 	bl	8004f34 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b1e:	e015      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	3328      	adds	r3, #40	@ 0x28
 8003b26:	2101      	movs	r1, #1
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 fab5 	bl	8005098 <RCCEx_PLL3_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b34:	e00a      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b3e:	bf00      	nop
 8003b40:	e004      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10d      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b62:	4a02      	ldr	r2, [pc, #8]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b68:	e006      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b6a:	bf00      	nop
 8003b6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4313      	orrs	r3, r2
 8003b96:	d055      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ba4:	d033      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003baa:	d82c      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb0:	d02f      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb6:	d826      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bbc:	d02b      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003bbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bc2:	d820      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bc8:	d012      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bce:	d81a      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d022      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bd8:	d115      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bde:	3308      	adds	r3, #8
 8003be0:	2101      	movs	r1, #1
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 f9a6 	bl	8004f34 <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bee:	e015      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf4:	3328      	adds	r3, #40	@ 0x28
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 fa4d 	bl	8005098 <RCCEx_PLL3_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c04:	e00a      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c0c:	e006      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c0e:	bf00      	nop
 8003c10:	e004      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c12:	bf00      	nop
 8003c14:	e002      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c16:	bf00      	nop
 8003c18:	e000      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c24:	4ba3      	ldr	r3, [pc, #652]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c34:	4a9f      	ldr	r2, [pc, #636]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c36:	430b      	orrs	r3, r1
 8003c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4313      	orrs	r3, r2
 8003c62:	d037      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c6e:	d00e      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c74:	d816      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c7e:	d111      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c80:	4b8c      	ldr	r3, [pc, #560]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	4a8b      	ldr	r2, [pc, #556]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c8c:	e00f      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	3308      	adds	r3, #8
 8003c94:	2101      	movs	r1, #1
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 f94c 	bl	8004f34 <RCCEx_PLL2_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ca2:	e004      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003caa:	e000      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	4a7b      	ldr	r2, [pc, #492]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cca:	e003      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003cea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d039      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d81c      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003d04 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d41 	.word	0x08003d41
 8003d08:	08003d15 	.word	0x08003d15
 8003d0c:	08003d23 	.word	0x08003d23
 8003d10:	08003d41 	.word	0x08003d41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d14:	4b67      	ldr	r3, [pc, #412]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	4a66      	ldr	r2, [pc, #408]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d20:	e00f      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d26:	3308      	adds	r3, #8
 8003d28:	2102      	movs	r1, #2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 f902 	bl	8004f34 <RCCEx_PLL2_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d36:	e004      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d3e:	e000      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4e:	f023 0103 	bic.w	r1, r3, #3
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d58:	4a56      	ldr	r2, [pc, #344]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d5e:	e003      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d82:	460b      	mov	r3, r1
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f000 809f 	beq.w	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d96:	f7fd faf3 	bl	8001380 <HAL_GetTick>
 8003d9a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da0:	f7fd faee 	bl	8001380 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b64      	cmp	r3, #100	@ 0x64
 8003dae:	d903      	bls.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003db6:	e005      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db8:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ed      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d179      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dcc:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dd8:	4053      	eors	r3, r2
 8003dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d015      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003de2:	4b34      	ldr	r3, [pc, #208]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dee:	4b31      	ldr	r3, [pc, #196]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df2:	4a30      	ldr	r2, [pc, #192]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e04:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e06:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e0c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e1a:	d118      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fab0 	bl	8001380 <HAL_GetTick>
 8003e20:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e24:	e00d      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fd faab 	bl	8001380 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e30:	1ad2      	subs	r2, r2, r3
 8003e32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d903      	bls.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003e40:	e005      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e42:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0eb      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d129      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e66:	d10e      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e68:	4b12      	ldr	r3, [pc, #72]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e78:	091a      	lsrs	r2, r3, #4
 8003e7a:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6113      	str	r3, [r2, #16]
 8003e84:	e005      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e90:	6113      	str	r3, [r2, #16]
 8003e92:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e94:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea2:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea8:	e00e      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003eb2:	e009      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	58024800 	.word	0x58024800
 8003ebc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f002 0301 	and.w	r3, r2, #1
 8003ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ede:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f000 8089 	beq.w	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ef0:	2b28      	cmp	r3, #40	@ 0x28
 8003ef2:	d86b      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8003efc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003fd5 	.word	0x08003fd5
 8003f00:	08003fcd 	.word	0x08003fcd
 8003f04:	08003fcd 	.word	0x08003fcd
 8003f08:	08003fcd 	.word	0x08003fcd
 8003f0c:	08003fcd 	.word	0x08003fcd
 8003f10:	08003fcd 	.word	0x08003fcd
 8003f14:	08003fcd 	.word	0x08003fcd
 8003f18:	08003fcd 	.word	0x08003fcd
 8003f1c:	08003fa1 	.word	0x08003fa1
 8003f20:	08003fcd 	.word	0x08003fcd
 8003f24:	08003fcd 	.word	0x08003fcd
 8003f28:	08003fcd 	.word	0x08003fcd
 8003f2c:	08003fcd 	.word	0x08003fcd
 8003f30:	08003fcd 	.word	0x08003fcd
 8003f34:	08003fcd 	.word	0x08003fcd
 8003f38:	08003fcd 	.word	0x08003fcd
 8003f3c:	08003fb7 	.word	0x08003fb7
 8003f40:	08003fcd 	.word	0x08003fcd
 8003f44:	08003fcd 	.word	0x08003fcd
 8003f48:	08003fcd 	.word	0x08003fcd
 8003f4c:	08003fcd 	.word	0x08003fcd
 8003f50:	08003fcd 	.word	0x08003fcd
 8003f54:	08003fcd 	.word	0x08003fcd
 8003f58:	08003fcd 	.word	0x08003fcd
 8003f5c:	08003fd5 	.word	0x08003fd5
 8003f60:	08003fcd 	.word	0x08003fcd
 8003f64:	08003fcd 	.word	0x08003fcd
 8003f68:	08003fcd 	.word	0x08003fcd
 8003f6c:	08003fcd 	.word	0x08003fcd
 8003f70:	08003fcd 	.word	0x08003fcd
 8003f74:	08003fcd 	.word	0x08003fcd
 8003f78:	08003fcd 	.word	0x08003fcd
 8003f7c:	08003fd5 	.word	0x08003fd5
 8003f80:	08003fcd 	.word	0x08003fcd
 8003f84:	08003fcd 	.word	0x08003fcd
 8003f88:	08003fcd 	.word	0x08003fcd
 8003f8c:	08003fcd 	.word	0x08003fcd
 8003f90:	08003fcd 	.word	0x08003fcd
 8003f94:	08003fcd 	.word	0x08003fcd
 8003f98:	08003fcd 	.word	0x08003fcd
 8003f9c:	08003fd5 	.word	0x08003fd5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 ffc3 	bl	8004f34 <RCCEx_PLL2_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fb4:	e00f      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	3328      	adds	r3, #40	@ 0x28
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 f86a 	bl	8005098 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fde:	4bbf      	ldr	r3, [pc, #764]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fec:	4abb      	ldr	r2, [pc, #748]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ff2:	e003      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f002 0302 	and.w	r3, r2, #2
 8004008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004012:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	d041      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004022:	2b05      	cmp	r3, #5
 8004024:	d824      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004026:	a201      	add	r2, pc, #4	@ (adr r2, 800402c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004079 	.word	0x08004079
 8004030:	08004045 	.word	0x08004045
 8004034:	0800405b 	.word	0x0800405b
 8004038:	08004079 	.word	0x08004079
 800403c:	08004079 	.word	0x08004079
 8004040:	08004079 	.word	0x08004079
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004048:	3308      	adds	r3, #8
 800404a:	2101      	movs	r1, #1
 800404c:	4618      	mov	r0, r3
 800404e:	f000 ff71 	bl	8004f34 <RCCEx_PLL2_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004058:	e00f      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	3328      	adds	r3, #40	@ 0x28
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f001 f818 	bl	8005098 <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800406e:	e004      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004076:	e000      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004082:	4b96      	ldr	r3, [pc, #600]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004086:	f023 0107 	bic.w	r1, r3, #7
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004090:	4a92      	ldr	r2, [pc, #584]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004092:	430b      	orrs	r3, r1
 8004094:	6553      	str	r3, [r2, #84]	@ 0x54
 8004096:	e003      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f002 0304 	and.w	r3, r2, #4
 80040ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4313      	orrs	r3, r2
 80040be:	d044      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d825      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040cc:	a201      	add	r2, pc, #4	@ (adr r2, 80040d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	08004121 	.word	0x08004121
 80040d8:	080040ed 	.word	0x080040ed
 80040dc:	08004103 	.word	0x08004103
 80040e0:	08004121 	.word	0x08004121
 80040e4:	08004121 	.word	0x08004121
 80040e8:	08004121 	.word	0x08004121
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	3308      	adds	r3, #8
 80040f2:	2101      	movs	r1, #1
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 ff1d 	bl	8004f34 <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004100:	e00f      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	3328      	adds	r3, #40	@ 0x28
 8004108:	2101      	movs	r1, #1
 800410a:	4618      	mov	r0, r3
 800410c:	f000 ffc4 	bl	8005098 <RCCEx_PLL3_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004116:	e004      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800412a:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412e:	f023 0107 	bic.w	r1, r3, #7
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800413a:	4a68      	ldr	r2, [pc, #416]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800413c:	430b      	orrs	r3, r1
 800413e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004140:	e003      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f002 0320 	and.w	r3, r2, #32
 8004156:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800415a:	2300      	movs	r3, #0
 800415c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004164:	460b      	mov	r3, r1
 8004166:	4313      	orrs	r3, r2
 8004168:	d055      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004176:	d033      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004178:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800417c:	d82c      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004182:	d02f      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004188:	d826      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800418a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800418e:	d02b      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004190:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004194:	d820      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800419a:	d012      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800419c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041a0:	d81a      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d022      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041aa:	d115      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	3308      	adds	r3, #8
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 febd 	bl	8004f34 <RCCEx_PLL2_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041c0:	e015      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c6:	3328      	adds	r3, #40	@ 0x28
 80041c8:	2102      	movs	r1, #2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 ff64 	bl	8005098 <RCCEx_PLL3_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041d6:	e00a      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041de:	e006      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041e0:	bf00      	nop
 80041e2:	e004      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041e4:	bf00      	nop
 80041e6:	e002      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041e8:	bf00      	nop
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041f6:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004206:	4a35      	ldr	r2, [pc, #212]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004208:	430b      	orrs	r3, r1
 800420a:	6553      	str	r3, [r2, #84]	@ 0x54
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004212:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800422c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004230:	460b      	mov	r3, r1
 8004232:	4313      	orrs	r3, r2
 8004234:	d058      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800423e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004242:	d033      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004244:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004248:	d82c      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800424e:	d02f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004254:	d826      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004256:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800425a:	d02b      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800425c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004260:	d820      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004262:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004266:	d012      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800426c:	d81a      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d022      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004276:	d115      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427c:	3308      	adds	r3, #8
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fe57 	bl	8004f34 <RCCEx_PLL2_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800428c:	e015      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	3328      	adds	r3, #40	@ 0x28
 8004294:	2102      	movs	r1, #2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fefe 	bl	8005098 <RCCEx_PLL3_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042a2:	e00a      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042aa:	e006      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042ac:	bf00      	nop
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042b0:	bf00      	nop
 80042b2:	e002      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042b4:	bf00      	nop
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10e      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042d2:	4a02      	ldr	r2, [pc, #8]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80042f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004302:	460b      	mov	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	d055      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004310:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004314:	d033      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004316:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800431a:	d82c      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004320:	d02f      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004326:	d826      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004328:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800432c:	d02b      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800432e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004332:	d820      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004334:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004338:	d012      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800433a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800433e:	d81a      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d022      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004348:	d115      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434e:	3308      	adds	r3, #8
 8004350:	2100      	movs	r1, #0
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fdee 	bl	8004f34 <RCCEx_PLL2_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800435e:	e015      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004364:	3328      	adds	r3, #40	@ 0x28
 8004366:	2102      	movs	r1, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fe95 	bl	8005098 <RCCEx_PLL3_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004374:	e00a      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800437c:	e006      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800437e:	bf00      	nop
 8004380:	e004      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800438a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004394:	4ba1      	ldr	r3, [pc, #644]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004398:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043a4:	4a9d      	ldr	r2, [pc, #628]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a6:	430b      	orrs	r3, r1
 80043a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043aa:	e003      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f002 0308 	and.w	r3, r2, #8
 80043c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043c4:	2300      	movs	r3, #0
 80043c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80043ce:	460b      	mov	r3, r1
 80043d0:	4313      	orrs	r3, r2
 80043d2:	d01e      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e0:	d10c      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	3328      	adds	r3, #40	@ 0x28
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fe54 	bl	8005098 <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043fc:	4b87      	ldr	r3, [pc, #540]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004400:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800440c:	4a83      	ldr	r2, [pc, #524]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800440e:	430b      	orrs	r3, r1
 8004410:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f002 0310 	and.w	r3, r2, #16
 800441e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004422:	2300      	movs	r3, #0
 8004424:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004428:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800442c:	460b      	mov	r3, r1
 800442e:	4313      	orrs	r3, r2
 8004430:	d01e      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800443a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800443e:	d10c      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004444:	3328      	adds	r3, #40	@ 0x28
 8004446:	2102      	movs	r1, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fe25 	bl	8005098 <RCCEx_PLL3_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800445a:	4b70      	ldr	r3, [pc, #448]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800446a:	4a6c      	ldr	r2, [pc, #432]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800447c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004486:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	d03e      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800449c:	d022      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800449e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044a2:	d81b      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ac:	d00b      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80044ae:	e015      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b4:	3308      	adds	r3, #8
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fd3b 	bl	8004f34 <RCCEx_PLL2_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044c4:	e00f      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	3328      	adds	r3, #40	@ 0x28
 80044cc:	2102      	movs	r1, #2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fde2 	bl	8005098 <RCCEx_PLL3_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044da:	e004      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10b      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ee:	4b4b      	ldr	r3, [pc, #300]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044fe:	4a47      	ldr	r2, [pc, #284]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004500:	430b      	orrs	r3, r1
 8004502:	6593      	str	r3, [r2, #88]	@ 0x58
 8004504:	e003      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800450a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800451a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800451c:	2300      	movs	r3, #0
 800451e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004520:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004524:	460b      	mov	r3, r1
 8004526:	4313      	orrs	r3, r2
 8004528:	d03b      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004532:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004536:	d01f      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004538:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800453c:	d818      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800453e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004542:	d003      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004544:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004548:	d007      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800454a:	e011      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454c:	4b33      	ldr	r3, [pc, #204]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	4a32      	ldr	r2, [pc, #200]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004558:	e00f      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	3328      	adds	r3, #40	@ 0x28
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fd98 	bl	8005098 <RCCEx_PLL3_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800456e:	e004      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004582:	4b26      	ldr	r3, [pc, #152]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004586:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	4a22      	ldr	r2, [pc, #136]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004594:	430b      	orrs	r3, r1
 8004596:	6553      	str	r3, [r2, #84]	@ 0x54
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80045b0:	2300      	movs	r3, #0
 80045b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80045b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80045b8:	460b      	mov	r3, r1
 80045ba:	4313      	orrs	r3, r2
 80045bc:	d034      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045cc:	d007      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d0:	4b12      	ldr	r3, [pc, #72]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	4a11      	ldr	r2, [pc, #68]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045dc:	e00e      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	3308      	adds	r3, #8
 80045e4:	2102      	movs	r1, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fca4 	bl	8004f34 <RCCEx_PLL2_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045f2:	e003      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10d      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004604:	4b05      	ldr	r3, [pc, #20]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004608:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004612:	4a02      	ldr	r2, [pc, #8]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004614:	430b      	orrs	r3, r1
 8004616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004618:	e006      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800461a:	bf00      	nop
 800461c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004634:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004636:	2300      	movs	r3, #0
 8004638:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800463a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800463e:	460b      	mov	r3, r1
 8004640:	4313      	orrs	r3, r2
 8004642:	d00c      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004648:	3328      	adds	r3, #40	@ 0x28
 800464a:	2102      	movs	r1, #2
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fd23 	bl	8005098 <RCCEx_PLL3_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800466a:	663b      	str	r3, [r7, #96]	@ 0x60
 800466c:	2300      	movs	r3, #0
 800466e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004670:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004674:	460b      	mov	r3, r1
 8004676:	4313      	orrs	r3, r2
 8004678:	d038      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004686:	d018      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004688:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800468c:	d811      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800468e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004692:	d014      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004698:	d80b      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d011      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800469e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a2:	d106      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a4:	4bc3      	ldr	r3, [pc, #780]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a8:	4ac2      	ldr	r2, [pc, #776]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046b0:	e008      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046b8:	e004      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046cc:	4bb9      	ldr	r3, [pc, #740]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046dc:	4ab5      	ldr	r2, [pc, #724]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046de:	430b      	orrs	r3, r1
 80046e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80046e2:	e003      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80046f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046fa:	2300      	movs	r3, #0
 80046fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004702:	460b      	mov	r3, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004708:	4baa      	ldr	r3, [pc, #680]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800470a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800470c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004716:	4aa7      	ldr	r2, [pc, #668]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004718:	430b      	orrs	r3, r1
 800471a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004728:	653b      	str	r3, [r7, #80]	@ 0x50
 800472a:	2300      	movs	r3, #0
 800472c:	657b      	str	r3, [r7, #84]	@ 0x54
 800472e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004732:	460b      	mov	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004738:	4b9e      	ldr	r3, [pc, #632]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004748:	4a9a      	ldr	r2, [pc, #616]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474a:	430b      	orrs	r3, r1
 800474c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800475a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800475c:	2300      	movs	r3, #0
 800475e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004760:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004764:	460b      	mov	r3, r1
 8004766:	4313      	orrs	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800476a:	4b92      	ldr	r3, [pc, #584]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800476e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004778:	4a8e      	ldr	r2, [pc, #568]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800477a:	430b      	orrs	r3, r1
 800477c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800478a:	643b      	str	r3, [r7, #64]	@ 0x40
 800478c:	2300      	movs	r3, #0
 800478e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004790:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004794:	460b      	mov	r3, r1
 8004796:	4313      	orrs	r3, r2
 8004798:	d00e      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800479a:	4b86      	ldr	r3, [pc, #536]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	4a85      	ldr	r2, [pc, #532]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047a4:	6113      	str	r3, [r2, #16]
 80047a6:	4b83      	ldr	r3, [pc, #524]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a8:	6919      	ldr	r1, [r3, #16]
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047b2:	4a80      	ldr	r2, [pc, #512]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80047c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047c6:	2300      	movs	r3, #0
 80047c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047ce:	460b      	mov	r3, r1
 80047d0:	4313      	orrs	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047d4:	4b77      	ldr	r3, [pc, #476]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e2:	4a74      	ldr	r2, [pc, #464]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e4:	430b      	orrs	r3, r1
 80047e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047f6:	2300      	movs	r3, #0
 80047f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047fe:	460b      	mov	r3, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004804:	4b6b      	ldr	r3, [pc, #428]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004808:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004814:	4a67      	ldr	r2, [pc, #412]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004816:	430b      	orrs	r3, r1
 8004818:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	2100      	movs	r1, #0
 8004824:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004830:	460b      	mov	r3, r1
 8004832:	4313      	orrs	r3, r2
 8004834:	d011      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483a:	3308      	adds	r3, #8
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fb78 	bl	8004f34 <RCCEx_PLL2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800484a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	2100      	movs	r1, #0
 8004864:	6239      	str	r1, [r7, #32]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
 800486c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004870:	460b      	mov	r3, r1
 8004872:	4313      	orrs	r3, r2
 8004874:	d011      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	3308      	adds	r3, #8
 800487c:	2101      	movs	r1, #1
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fb58 	bl	8004f34 <RCCEx_PLL2_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800488a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	2100      	movs	r1, #0
 80048a4:	61b9      	str	r1, [r7, #24]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048b0:	460b      	mov	r3, r1
 80048b2:	4313      	orrs	r3, r2
 80048b4:	d011      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	3308      	adds	r3, #8
 80048bc:	2102      	movs	r1, #2
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fb38 	bl	8004f34 <RCCEx_PLL2_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	2100      	movs	r1, #0
 80048e4:	6139      	str	r1, [r7, #16]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048f0:	460b      	mov	r3, r1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	d011      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	3328      	adds	r3, #40	@ 0x28
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fbca 	bl	8005098 <RCCEx_PLL3_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800490a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	2100      	movs	r1, #0
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004930:	460b      	mov	r3, r1
 8004932:	4313      	orrs	r3, r2
 8004934:	d011      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	3328      	adds	r3, #40	@ 0x28
 800493c:	2101      	movs	r1, #1
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fbaa 	bl	8005098 <RCCEx_PLL3_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800494a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800495a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	2100      	movs	r1, #0
 8004964:	6039      	str	r1, [r7, #0]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	607b      	str	r3, [r7, #4]
 800496c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004970:	460b      	mov	r3, r1
 8004972:	4313      	orrs	r3, r2
 8004974:	d011      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497a:	3328      	adds	r3, #40	@ 0x28
 800497c:	2102      	movs	r1, #2
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fb8a 	bl	8005098 <RCCEx_PLL3_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800498a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800499a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	e000      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80049ae:	46bd      	mov	sp, r7
 80049b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b4:	58024400 	.word	0x58024400

080049b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049bc:	f7fe fd96 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4904      	ldr	r1, [pc, #16]	@ (80049e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	58024400 	.word	0x58024400
 80049e0:	08006b1c 	.word	0x08006b1c

080049e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b089      	sub	sp, #36	@ 0x24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ec:	4ba1      	ldr	r3, [pc, #644]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80049f6:	4b9f      	ldr	r3, [pc, #636]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fa:	0b1b      	lsrs	r3, r3, #12
 80049fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a02:	4b9c      	ldr	r3, [pc, #624]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a0e:	4b99      	ldr	r3, [pc, #612]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a12:	08db      	lsrs	r3, r3, #3
 8004a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8111 	beq.w	8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	f000 8083 	beq.w	8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	f200 80a1 	bhi.w	8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d056      	beq.n	8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a4e:	e099      	b.n	8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a50:	4b88      	ldr	r3, [pc, #544]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d02d      	beq.n	8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a5c:	4b85      	ldr	r3, [pc, #532]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	08db      	lsrs	r3, r3, #3
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	4a84      	ldr	r2, [pc, #528]	@ (8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a86:	4b7b      	ldr	r3, [pc, #492]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ab6:	e087      	b.n	8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aca:	4b6a      	ldr	r3, [pc, #424]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ade:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afa:	e065      	b.n	8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0e:	4b59      	ldr	r3, [pc, #356]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b3e:	e043      	b.n	8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b52:	4b48      	ldr	r3, [pc, #288]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b82:	e021      	b.n	8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b96:	4b37      	ldr	r3, [pc, #220]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004baa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	0a5b      	lsrs	r3, r3, #9
 8004bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bee:	ee17 2a90 	vmov	r2, s15
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1c:	ee17 2a90 	vmov	r2, s15
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c24:	4b13      	ldr	r3, [pc, #76]	@ (8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4a:	ee17 2a90 	vmov	r2, s15
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c52:	e008      	b.n	8004c66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	609a      	str	r2, [r3, #8]
}
 8004c66:	bf00      	nop
 8004c68:	3724      	adds	r7, #36	@ 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	58024400 	.word	0x58024400
 8004c78:	03d09000 	.word	0x03d09000
 8004c7c:	46000000 	.word	0x46000000
 8004c80:	4c742400 	.word	0x4c742400
 8004c84:	4a742400 	.word	0x4a742400
 8004c88:	4af42400 	.word	0x4af42400

08004c8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	@ 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c94:	4ba1      	ldr	r3, [pc, #644]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c9e:	4b9f      	ldr	r3, [pc, #636]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca2:	0d1b      	lsrs	r3, r3, #20
 8004ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ca8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004caa:	4b9c      	ldr	r3, [pc, #624]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004cb6:	4b99      	ldr	r3, [pc, #612]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cba:	08db      	lsrs	r3, r3, #3
 8004cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8111 	beq.w	8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	f000 8083 	beq.w	8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	f200 80a1 	bhi.w	8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d056      	beq.n	8004da4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004cf6:	e099      	b.n	8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cf8:	4b88      	ldr	r3, [pc, #544]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d02d      	beq.n	8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d04:	4b85      	ldr	r3, [pc, #532]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	08db      	lsrs	r3, r3, #3
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	4a84      	ldr	r2, [pc, #528]	@ (8004f20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
 8004d14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	ee07 3a90 	vmov	s15, r3
 8004d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d5e:	e087      	b.n	8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d72:	4b6a      	ldr	r3, [pc, #424]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da2:	e065      	b.n	8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db6:	4b59      	ldr	r3, [pc, #356]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004de6:	e043      	b.n	8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfa:	4b48      	ldr	r3, [pc, #288]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e2a:	e021      	b.n	8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3e:	4b37      	ldr	r3, [pc, #220]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e70:	4b2a      	ldr	r3, [pc, #168]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	0a5b      	lsrs	r3, r3, #9
 8004e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e96:	ee17 2a90 	vmov	r2, s15
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ea8:	ee07 3a90 	vmov	s15, r3
 8004eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec4:	ee17 2a90 	vmov	r2, s15
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ecc:	4b13      	ldr	r3, [pc, #76]	@ (8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed0:	0e1b      	lsrs	r3, r3, #24
 8004ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef2:	ee17 2a90 	vmov	r2, s15
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004efa:	e008      	b.n	8004f0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
}
 8004f0e:	bf00      	nop
 8004f10:	3724      	adds	r7, #36	@ 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	03d09000 	.word	0x03d09000
 8004f24:	46000000 	.word	0x46000000
 8004f28:	4c742400 	.word	0x4c742400
 8004f2c:	4a742400 	.word	0x4a742400
 8004f30:	4af42400 	.word	0x4af42400

08004f34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f42:	4b53      	ldr	r3, [pc, #332]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d101      	bne.n	8004f52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e099      	b.n	8005086 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f52:	4b4f      	ldr	r3, [pc, #316]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a4e      	ldr	r2, [pc, #312]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004f58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5e:	f7fc fa0f 	bl	8001380 <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f64:	e008      	b.n	8004f78 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f66:	f7fc fa0b 	bl	8001380 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e086      	b.n	8005086 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f78:	4b45      	ldr	r3, [pc, #276]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f84:	4b42      	ldr	r3, [pc, #264]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	031b      	lsls	r3, r3, #12
 8004f92:	493f      	ldr	r1, [pc, #252]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	025b      	lsls	r3, r3, #9
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	061b      	lsls	r3, r3, #24
 8004fc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fc8:	4931      	ldr	r1, [pc, #196]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fce:	4b30      	ldr	r3, [pc, #192]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	492d      	ldr	r1, [pc, #180]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe4:	f023 0220 	bic.w	r2, r3, #32
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	4928      	ldr	r1, [pc, #160]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ff2:	4b27      	ldr	r3, [pc, #156]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	4a26      	ldr	r2, [pc, #152]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8004ff8:	f023 0310 	bic.w	r3, r3, #16
 8004ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ffe:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8005000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005002:	4b24      	ldr	r3, [pc, #144]	@ (8005094 <RCCEx_PLL2_Config+0x160>)
 8005004:	4013      	ands	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	69d2      	ldr	r2, [r2, #28]
 800500a:	00d2      	lsls	r2, r2, #3
 800500c:	4920      	ldr	r1, [pc, #128]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 800500e:	4313      	orrs	r3, r2
 8005010:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005012:	4b1f      	ldr	r3, [pc, #124]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8005014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005016:	4a1e      	ldr	r2, [pc, #120]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8005018:	f043 0310 	orr.w	r3, r3, #16
 800501c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005024:	4b1a      	ldr	r3, [pc, #104]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 800502a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800502e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005030:	e00f      	b.n	8005052 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d106      	bne.n	8005046 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005038:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	4a14      	ldr	r2, [pc, #80]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 800503e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005042:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005044:	e005      	b.n	8005052 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005046:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	4a11      	ldr	r2, [pc, #68]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 800504c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005050:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005052:	4b0f      	ldr	r3, [pc, #60]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a0e      	ldr	r2, [pc, #56]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 8005058:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800505c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505e:	f7fc f98f 	bl	8001380 <HAL_GetTick>
 8005062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005064:	e008      	b.n	8005078 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005066:	f7fc f98b 	bl	8001380 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e006      	b.n	8005086 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005078:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <RCCEx_PLL2_Config+0x15c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	58024400 	.word	0x58024400
 8005094:	ffff0007 	.word	0xffff0007

08005098 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050a6:	4b53      	ldr	r3, [pc, #332]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d101      	bne.n	80050b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e099      	b.n	80051ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050b6:	4b4f      	ldr	r3, [pc, #316]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a4e      	ldr	r2, [pc, #312]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80050bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c2:	f7fc f95d 	bl	8001380 <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050c8:	e008      	b.n	80050dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050ca:	f7fc f959 	bl	8001380 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e086      	b.n	80051ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050dc:	4b45      	ldr	r3, [pc, #276]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050e8:	4b42      	ldr	r3, [pc, #264]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	051b      	lsls	r3, r3, #20
 80050f6:	493f      	ldr	r1, [pc, #252]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	3b01      	subs	r3, #1
 8005102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	3b01      	subs	r3, #1
 800510c:	025b      	lsls	r3, r3, #9
 800510e:	b29b      	uxth	r3, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	3b01      	subs	r3, #1
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	3b01      	subs	r3, #1
 8005126:	061b      	lsls	r3, r3, #24
 8005128:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800512c:	4931      	ldr	r1, [pc, #196]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005132:	4b30      	ldr	r3, [pc, #192]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	492d      	ldr	r1, [pc, #180]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 8005140:	4313      	orrs	r3, r2
 8005142:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005144:	4b2b      	ldr	r3, [pc, #172]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 8005146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005148:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	4928      	ldr	r1, [pc, #160]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005156:	4b27      	ldr	r3, [pc, #156]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	4a26      	ldr	r2, [pc, #152]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 800515c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005160:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005162:	4b24      	ldr	r3, [pc, #144]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 8005164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005166:	4b24      	ldr	r3, [pc, #144]	@ (80051f8 <RCCEx_PLL3_Config+0x160>)
 8005168:	4013      	ands	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	69d2      	ldr	r2, [r2, #28]
 800516e:	00d2      	lsls	r2, r2, #3
 8005170:	4920      	ldr	r1, [pc, #128]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 8005172:	4313      	orrs	r3, r2
 8005174:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005176:	4b1f      	ldr	r3, [pc, #124]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	4a1e      	ldr	r2, [pc, #120]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 800517c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005180:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005188:	4b1a      	ldr	r3, [pc, #104]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	4a19      	ldr	r2, [pc, #100]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 800518e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005192:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005194:	e00f      	b.n	80051b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d106      	bne.n	80051aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800519c:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 800519e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a0:	4a14      	ldr	r2, [pc, #80]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80051a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051a8:	e005      	b.n	80051b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051aa:	4b12      	ldr	r3, [pc, #72]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	4a11      	ldr	r2, [pc, #68]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80051b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051b6:	4b0f      	ldr	r3, [pc, #60]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a0e      	ldr	r2, [pc, #56]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c2:	f7fc f8dd 	bl	8001380 <HAL_GetTick>
 80051c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051c8:	e008      	b.n	80051dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051ca:	f7fc f8d9 	bl	8001380 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e006      	b.n	80051ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051dc:	4b05      	ldr	r3, [pc, #20]	@ (80051f4 <RCCEx_PLL3_Config+0x15c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	58024400 	.word	0x58024400
 80051f8:	ffff0007 	.word	0xffff0007

080051fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e042      	b.n	8005294 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fb fed7 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2224      	movs	r2, #36	@ 0x24
 800522a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fd90 	bl	8005d6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f825 	bl	800529c <UART_SetConfig>
 8005252:	4603      	mov	r3, r0
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e01b      	b.n	8005294 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800526a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800527a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fe0f 	bl	8005eb0 <UART_CheckIdleState>
 8005292:	4603      	mov	r3, r0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a0:	b092      	sub	sp, #72	@ 0x48
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4bbe      	ldr	r3, [pc, #760]	@ (80055c4 <UART_SetConfig+0x328>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4ab3      	ldr	r2, [pc, #716]	@ (80055c8 <UART_SetConfig+0x32c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005304:	4313      	orrs	r3, r2
 8005306:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	4baf      	ldr	r3, [pc, #700]	@ (80055cc <UART_SetConfig+0x330>)
 8005310:	4013      	ands	r3, r2
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005318:	430b      	orrs	r3, r1
 800531a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005322:	f023 010f 	bic.w	r1, r3, #15
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4aa6      	ldr	r2, [pc, #664]	@ (80055d0 <UART_SetConfig+0x334>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d177      	bne.n	800542c <UART_SetConfig+0x190>
 800533c:	4ba5      	ldr	r3, [pc, #660]	@ (80055d4 <UART_SetConfig+0x338>)
 800533e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005340:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005344:	2b28      	cmp	r3, #40	@ 0x28
 8005346:	d86d      	bhi.n	8005424 <UART_SetConfig+0x188>
 8005348:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0xb4>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	080053f5 	.word	0x080053f5
 8005354:	08005425 	.word	0x08005425
 8005358:	08005425 	.word	0x08005425
 800535c:	08005425 	.word	0x08005425
 8005360:	08005425 	.word	0x08005425
 8005364:	08005425 	.word	0x08005425
 8005368:	08005425 	.word	0x08005425
 800536c:	08005425 	.word	0x08005425
 8005370:	080053fd 	.word	0x080053fd
 8005374:	08005425 	.word	0x08005425
 8005378:	08005425 	.word	0x08005425
 800537c:	08005425 	.word	0x08005425
 8005380:	08005425 	.word	0x08005425
 8005384:	08005425 	.word	0x08005425
 8005388:	08005425 	.word	0x08005425
 800538c:	08005425 	.word	0x08005425
 8005390:	08005405 	.word	0x08005405
 8005394:	08005425 	.word	0x08005425
 8005398:	08005425 	.word	0x08005425
 800539c:	08005425 	.word	0x08005425
 80053a0:	08005425 	.word	0x08005425
 80053a4:	08005425 	.word	0x08005425
 80053a8:	08005425 	.word	0x08005425
 80053ac:	08005425 	.word	0x08005425
 80053b0:	0800540d 	.word	0x0800540d
 80053b4:	08005425 	.word	0x08005425
 80053b8:	08005425 	.word	0x08005425
 80053bc:	08005425 	.word	0x08005425
 80053c0:	08005425 	.word	0x08005425
 80053c4:	08005425 	.word	0x08005425
 80053c8:	08005425 	.word	0x08005425
 80053cc:	08005425 	.word	0x08005425
 80053d0:	08005415 	.word	0x08005415
 80053d4:	08005425 	.word	0x08005425
 80053d8:	08005425 	.word	0x08005425
 80053dc:	08005425 	.word	0x08005425
 80053e0:	08005425 	.word	0x08005425
 80053e4:	08005425 	.word	0x08005425
 80053e8:	08005425 	.word	0x08005425
 80053ec:	08005425 	.word	0x08005425
 80053f0:	0800541d 	.word	0x0800541d
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e222      	b.n	8005842 <UART_SetConfig+0x5a6>
 80053fc:	2304      	movs	r3, #4
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e21e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005404:	2308      	movs	r3, #8
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e21a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800540c:	2310      	movs	r3, #16
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e216      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005414:	2320      	movs	r3, #32
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e212      	b.n	8005842 <UART_SetConfig+0x5a6>
 800541c:	2340      	movs	r3, #64	@ 0x40
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e20e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005424:	2380      	movs	r3, #128	@ 0x80
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e20a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a69      	ldr	r2, [pc, #420]	@ (80055d8 <UART_SetConfig+0x33c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d130      	bne.n	8005498 <UART_SetConfig+0x1fc>
 8005436:	4b67      	ldr	r3, [pc, #412]	@ (80055d4 <UART_SetConfig+0x338>)
 8005438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	2b05      	cmp	r3, #5
 8005440:	d826      	bhi.n	8005490 <UART_SetConfig+0x1f4>
 8005442:	a201      	add	r2, pc, #4	@ (adr r2, 8005448 <UART_SetConfig+0x1ac>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	08005461 	.word	0x08005461
 800544c:	08005469 	.word	0x08005469
 8005450:	08005471 	.word	0x08005471
 8005454:	08005479 	.word	0x08005479
 8005458:	08005481 	.word	0x08005481
 800545c:	08005489 	.word	0x08005489
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e1ec      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005468:	2304      	movs	r3, #4
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e1e8      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005470:	2308      	movs	r3, #8
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e1e4      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e1e0      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005480:	2320      	movs	r3, #32
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e1dc      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005488:	2340      	movs	r3, #64	@ 0x40
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e1d8      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005490:	2380      	movs	r3, #128	@ 0x80
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005496:	e1d4      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a4f      	ldr	r2, [pc, #316]	@ (80055dc <UART_SetConfig+0x340>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d130      	bne.n	8005504 <UART_SetConfig+0x268>
 80054a2:	4b4c      	ldr	r3, [pc, #304]	@ (80055d4 <UART_SetConfig+0x338>)
 80054a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d826      	bhi.n	80054fc <UART_SetConfig+0x260>
 80054ae:	a201      	add	r2, pc, #4	@ (adr r2, 80054b4 <UART_SetConfig+0x218>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054cd 	.word	0x080054cd
 80054b8:	080054d5 	.word	0x080054d5
 80054bc:	080054dd 	.word	0x080054dd
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	080054f5 	.word	0x080054f5
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e1b6      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054d4:	2304      	movs	r3, #4
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e1b2      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054dc:	2308      	movs	r3, #8
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e1ae      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054e4:	2310      	movs	r3, #16
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ea:	e1aa      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054ec:	2320      	movs	r3, #32
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f2:	e1a6      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054f4:	2340      	movs	r3, #64	@ 0x40
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fa:	e1a2      	b.n	8005842 <UART_SetConfig+0x5a6>
 80054fc:	2380      	movs	r3, #128	@ 0x80
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005502:	e19e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a35      	ldr	r2, [pc, #212]	@ (80055e0 <UART_SetConfig+0x344>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d130      	bne.n	8005570 <UART_SetConfig+0x2d4>
 800550e:	4b31      	ldr	r3, [pc, #196]	@ (80055d4 <UART_SetConfig+0x338>)
 8005510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b05      	cmp	r3, #5
 8005518:	d826      	bhi.n	8005568 <UART_SetConfig+0x2cc>
 800551a:	a201      	add	r2, pc, #4	@ (adr r2, 8005520 <UART_SetConfig+0x284>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005539 	.word	0x08005539
 8005524:	08005541 	.word	0x08005541
 8005528:	08005549 	.word	0x08005549
 800552c:	08005551 	.word	0x08005551
 8005530:	08005559 	.word	0x08005559
 8005534:	08005561 	.word	0x08005561
 8005538:	2300      	movs	r3, #0
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e180      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005540:	2304      	movs	r3, #4
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005546:	e17c      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005548:	2308      	movs	r3, #8
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554e:	e178      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005550:	2310      	movs	r3, #16
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005556:	e174      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005558:	2320      	movs	r3, #32
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555e:	e170      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005560:	2340      	movs	r3, #64	@ 0x40
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005566:	e16c      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556e:	e168      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1b      	ldr	r2, [pc, #108]	@ (80055e4 <UART_SetConfig+0x348>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d142      	bne.n	8005600 <UART_SetConfig+0x364>
 800557a:	4b16      	ldr	r3, [pc, #88]	@ (80055d4 <UART_SetConfig+0x338>)
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	2b05      	cmp	r3, #5
 8005584:	d838      	bhi.n	80055f8 <UART_SetConfig+0x35c>
 8005586:	a201      	add	r2, pc, #4	@ (adr r2, 800558c <UART_SetConfig+0x2f0>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	080055a5 	.word	0x080055a5
 8005590:	080055ad 	.word	0x080055ad
 8005594:	080055b5 	.word	0x080055b5
 8005598:	080055bd 	.word	0x080055bd
 800559c:	080055e9 	.word	0x080055e9
 80055a0:	080055f1 	.word	0x080055f1
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055aa:	e14a      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055ac:	2304      	movs	r3, #4
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e146      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055b4:	2308      	movs	r3, #8
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ba:	e142      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055bc:	2310      	movs	r3, #16
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c2:	e13e      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055c4:	cfff69f3 	.word	0xcfff69f3
 80055c8:	58000c00 	.word	0x58000c00
 80055cc:	11fff4ff 	.word	0x11fff4ff
 80055d0:	40011000 	.word	0x40011000
 80055d4:	58024400 	.word	0x58024400
 80055d8:	40004400 	.word	0x40004400
 80055dc:	40004800 	.word	0x40004800
 80055e0:	40004c00 	.word	0x40004c00
 80055e4:	40005000 	.word	0x40005000
 80055e8:	2320      	movs	r3, #32
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ee:	e128      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055f0:	2340      	movs	r3, #64	@ 0x40
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e124      	b.n	8005842 <UART_SetConfig+0x5a6>
 80055f8:	2380      	movs	r3, #128	@ 0x80
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e120      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4acb      	ldr	r2, [pc, #812]	@ (8005934 <UART_SetConfig+0x698>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d176      	bne.n	80056f8 <UART_SetConfig+0x45c>
 800560a:	4bcb      	ldr	r3, [pc, #812]	@ (8005938 <UART_SetConfig+0x69c>)
 800560c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005612:	2b28      	cmp	r3, #40	@ 0x28
 8005614:	d86c      	bhi.n	80056f0 <UART_SetConfig+0x454>
 8005616:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <UART_SetConfig+0x380>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	080056c1 	.word	0x080056c1
 8005620:	080056f1 	.word	0x080056f1
 8005624:	080056f1 	.word	0x080056f1
 8005628:	080056f1 	.word	0x080056f1
 800562c:	080056f1 	.word	0x080056f1
 8005630:	080056f1 	.word	0x080056f1
 8005634:	080056f1 	.word	0x080056f1
 8005638:	080056f1 	.word	0x080056f1
 800563c:	080056c9 	.word	0x080056c9
 8005640:	080056f1 	.word	0x080056f1
 8005644:	080056f1 	.word	0x080056f1
 8005648:	080056f1 	.word	0x080056f1
 800564c:	080056f1 	.word	0x080056f1
 8005650:	080056f1 	.word	0x080056f1
 8005654:	080056f1 	.word	0x080056f1
 8005658:	080056f1 	.word	0x080056f1
 800565c:	080056d1 	.word	0x080056d1
 8005660:	080056f1 	.word	0x080056f1
 8005664:	080056f1 	.word	0x080056f1
 8005668:	080056f1 	.word	0x080056f1
 800566c:	080056f1 	.word	0x080056f1
 8005670:	080056f1 	.word	0x080056f1
 8005674:	080056f1 	.word	0x080056f1
 8005678:	080056f1 	.word	0x080056f1
 800567c:	080056d9 	.word	0x080056d9
 8005680:	080056f1 	.word	0x080056f1
 8005684:	080056f1 	.word	0x080056f1
 8005688:	080056f1 	.word	0x080056f1
 800568c:	080056f1 	.word	0x080056f1
 8005690:	080056f1 	.word	0x080056f1
 8005694:	080056f1 	.word	0x080056f1
 8005698:	080056f1 	.word	0x080056f1
 800569c:	080056e1 	.word	0x080056e1
 80056a0:	080056f1 	.word	0x080056f1
 80056a4:	080056f1 	.word	0x080056f1
 80056a8:	080056f1 	.word	0x080056f1
 80056ac:	080056f1 	.word	0x080056f1
 80056b0:	080056f1 	.word	0x080056f1
 80056b4:	080056f1 	.word	0x080056f1
 80056b8:	080056f1 	.word	0x080056f1
 80056bc:	080056e9 	.word	0x080056e9
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e0bc      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e0b8      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	e0b4      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e0b0      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056e0:	2320      	movs	r3, #32
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e0ac      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056e8:	2340      	movs	r3, #64	@ 0x40
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ee:	e0a8      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e0a4      	b.n	8005842 <UART_SetConfig+0x5a6>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a8f      	ldr	r2, [pc, #572]	@ (800593c <UART_SetConfig+0x6a0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d130      	bne.n	8005764 <UART_SetConfig+0x4c8>
 8005702:	4b8d      	ldr	r3, [pc, #564]	@ (8005938 <UART_SetConfig+0x69c>)
 8005704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	2b05      	cmp	r3, #5
 800570c:	d826      	bhi.n	800575c <UART_SetConfig+0x4c0>
 800570e:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <UART_SetConfig+0x478>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	0800572d 	.word	0x0800572d
 8005718:	08005735 	.word	0x08005735
 800571c:	0800573d 	.word	0x0800573d
 8005720:	08005745 	.word	0x08005745
 8005724:	0800574d 	.word	0x0800574d
 8005728:	08005755 	.word	0x08005755
 800572c:	2300      	movs	r3, #0
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e086      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005734:	2304      	movs	r3, #4
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e082      	b.n	8005842 <UART_SetConfig+0x5a6>
 800573c:	2308      	movs	r3, #8
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005742:	e07e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005744:	2310      	movs	r3, #16
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574a:	e07a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800574c:	2320      	movs	r3, #32
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005752:	e076      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005754:	2340      	movs	r3, #64	@ 0x40
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575a:	e072      	b.n	8005842 <UART_SetConfig+0x5a6>
 800575c:	2380      	movs	r3, #128	@ 0x80
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005762:	e06e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a75      	ldr	r2, [pc, #468]	@ (8005940 <UART_SetConfig+0x6a4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d130      	bne.n	80057d0 <UART_SetConfig+0x534>
 800576e:	4b72      	ldr	r3, [pc, #456]	@ (8005938 <UART_SetConfig+0x69c>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	2b05      	cmp	r3, #5
 8005778:	d826      	bhi.n	80057c8 <UART_SetConfig+0x52c>
 800577a:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <UART_SetConfig+0x4e4>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	08005799 	.word	0x08005799
 8005784:	080057a1 	.word	0x080057a1
 8005788:	080057a9 	.word	0x080057a9
 800578c:	080057b1 	.word	0x080057b1
 8005790:	080057b9 	.word	0x080057b9
 8005794:	080057c1 	.word	0x080057c1
 8005798:	2300      	movs	r3, #0
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e050      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e04c      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ae:	e048      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e044      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057b8:	2320      	movs	r3, #32
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057be:	e040      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057c0:	2340      	movs	r3, #64	@ 0x40
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c6:	e03c      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057c8:	2380      	movs	r3, #128	@ 0x80
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ce:	e038      	b.n	8005842 <UART_SetConfig+0x5a6>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a5b      	ldr	r2, [pc, #364]	@ (8005944 <UART_SetConfig+0x6a8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d130      	bne.n	800583c <UART_SetConfig+0x5a0>
 80057da:	4b57      	ldr	r3, [pc, #348]	@ (8005938 <UART_SetConfig+0x69c>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d826      	bhi.n	8005834 <UART_SetConfig+0x598>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <UART_SetConfig+0x550>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005805 	.word	0x08005805
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	08005815 	.word	0x08005815
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	2302      	movs	r3, #2
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580a:	e01a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005812:	e016      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581a:	e012      	b.n	8005842 <UART_SetConfig+0x5a6>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e00e      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005824:	2320      	movs	r3, #32
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582a:	e00a      	b.n	8005842 <UART_SetConfig+0x5a6>
 800582c:	2340      	movs	r3, #64	@ 0x40
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005832:	e006      	b.n	8005842 <UART_SetConfig+0x5a6>
 8005834:	2380      	movs	r3, #128	@ 0x80
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583a:	e002      	b.n	8005842 <UART_SetConfig+0x5a6>
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3f      	ldr	r2, [pc, #252]	@ (8005944 <UART_SetConfig+0x6a8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	f040 80f8 	bne.w	8005a3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800584e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005852:	2b20      	cmp	r3, #32
 8005854:	dc46      	bgt.n	80058e4 <UART_SetConfig+0x648>
 8005856:	2b02      	cmp	r3, #2
 8005858:	f2c0 8082 	blt.w	8005960 <UART_SetConfig+0x6c4>
 800585c:	3b02      	subs	r3, #2
 800585e:	2b1e      	cmp	r3, #30
 8005860:	d87e      	bhi.n	8005960 <UART_SetConfig+0x6c4>
 8005862:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <UART_SetConfig+0x5cc>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	080058eb 	.word	0x080058eb
 800586c:	08005961 	.word	0x08005961
 8005870:	080058f3 	.word	0x080058f3
 8005874:	08005961 	.word	0x08005961
 8005878:	08005961 	.word	0x08005961
 800587c:	08005961 	.word	0x08005961
 8005880:	08005903 	.word	0x08005903
 8005884:	08005961 	.word	0x08005961
 8005888:	08005961 	.word	0x08005961
 800588c:	08005961 	.word	0x08005961
 8005890:	08005961 	.word	0x08005961
 8005894:	08005961 	.word	0x08005961
 8005898:	08005961 	.word	0x08005961
 800589c:	08005961 	.word	0x08005961
 80058a0:	08005913 	.word	0x08005913
 80058a4:	08005961 	.word	0x08005961
 80058a8:	08005961 	.word	0x08005961
 80058ac:	08005961 	.word	0x08005961
 80058b0:	08005961 	.word	0x08005961
 80058b4:	08005961 	.word	0x08005961
 80058b8:	08005961 	.word	0x08005961
 80058bc:	08005961 	.word	0x08005961
 80058c0:	08005961 	.word	0x08005961
 80058c4:	08005961 	.word	0x08005961
 80058c8:	08005961 	.word	0x08005961
 80058cc:	08005961 	.word	0x08005961
 80058d0:	08005961 	.word	0x08005961
 80058d4:	08005961 	.word	0x08005961
 80058d8:	08005961 	.word	0x08005961
 80058dc:	08005961 	.word	0x08005961
 80058e0:	08005953 	.word	0x08005953
 80058e4:	2b40      	cmp	r3, #64	@ 0x40
 80058e6:	d037      	beq.n	8005958 <UART_SetConfig+0x6bc>
 80058e8:	e03a      	b.n	8005960 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80058ea:	f7ff f865 	bl	80049b8 <HAL_RCCEx_GetD3PCLK1Freq>
 80058ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058f0:	e03c      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff f874 	bl	80049e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005900:	e034      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005902:	f107 0318 	add.w	r3, r7, #24
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff f9c0 	bl	8004c8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005910:	e02c      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005912:	4b09      	ldr	r3, [pc, #36]	@ (8005938 <UART_SetConfig+0x69c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800591e:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <UART_SetConfig+0x69c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	08db      	lsrs	r3, r3, #3
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	4a07      	ldr	r2, [pc, #28]	@ (8005948 <UART_SetConfig+0x6ac>)
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005930:	e01c      	b.n	800596c <UART_SetConfig+0x6d0>
 8005932:	bf00      	nop
 8005934:	40011400 	.word	0x40011400
 8005938:	58024400 	.word	0x58024400
 800593c:	40007800 	.word	0x40007800
 8005940:	40007c00 	.word	0x40007c00
 8005944:	58000c00 	.word	0x58000c00
 8005948:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800594c:	4b9d      	ldr	r3, [pc, #628]	@ (8005bc4 <UART_SetConfig+0x928>)
 800594e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005950:	e00c      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005952:	4b9d      	ldr	r3, [pc, #628]	@ (8005bc8 <UART_SetConfig+0x92c>)
 8005954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005956:	e009      	b.n	800596c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800595c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800595e:	e005      	b.n	800596c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800596a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800596c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 81de 	beq.w	8005d30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	4a94      	ldr	r2, [pc, #592]	@ (8005bcc <UART_SetConfig+0x930>)
 800597a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800597e:	461a      	mov	r2, r3
 8005980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005982:	fbb3 f3f2 	udiv	r3, r3, r2
 8005986:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	4413      	add	r3, r2
 8005992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005994:	429a      	cmp	r2, r3
 8005996:	d305      	bcc.n	80059a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800599e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d903      	bls.n	80059ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059aa:	e1c1      	b.n	8005d30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ae:	2200      	movs	r2, #0
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	60fa      	str	r2, [r7, #12]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	4a84      	ldr	r2, [pc, #528]	@ (8005bcc <UART_SetConfig+0x930>)
 80059ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2200      	movs	r2, #0
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059ce:	f7fa fc83 	bl	80002d8 <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	020b      	lsls	r3, r1, #8
 80059e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059e8:	0202      	lsls	r2, r0, #8
 80059ea:	6979      	ldr	r1, [r7, #20]
 80059ec:	6849      	ldr	r1, [r1, #4]
 80059ee:	0849      	lsrs	r1, r1, #1
 80059f0:	2000      	movs	r0, #0
 80059f2:	460c      	mov	r4, r1
 80059f4:	4605      	mov	r5, r0
 80059f6:	eb12 0804 	adds.w	r8, r2, r4
 80059fa:	eb43 0905 	adc.w	r9, r3, r5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	469a      	mov	sl, r3
 8005a06:	4693      	mov	fp, r2
 8005a08:	4652      	mov	r2, sl
 8005a0a:	465b      	mov	r3, fp
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	f7fa fc62 	bl	80002d8 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a22:	d308      	bcc.n	8005a36 <UART_SetConfig+0x79a>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a2a:	d204      	bcs.n	8005a36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	e17c      	b.n	8005d30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a3c:	e178      	b.n	8005d30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a46:	f040 80c5 	bne.w	8005bd4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005a4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	dc48      	bgt.n	8005ae4 <UART_SetConfig+0x848>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	db7b      	blt.n	8005b4e <UART_SetConfig+0x8b2>
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d879      	bhi.n	8005b4e <UART_SetConfig+0x8b2>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <UART_SetConfig+0x7c4>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005aeb 	.word	0x08005aeb
 8005a64:	08005af3 	.word	0x08005af3
 8005a68:	08005b4f 	.word	0x08005b4f
 8005a6c:	08005b4f 	.word	0x08005b4f
 8005a70:	08005afb 	.word	0x08005afb
 8005a74:	08005b4f 	.word	0x08005b4f
 8005a78:	08005b4f 	.word	0x08005b4f
 8005a7c:	08005b4f 	.word	0x08005b4f
 8005a80:	08005b0b 	.word	0x08005b0b
 8005a84:	08005b4f 	.word	0x08005b4f
 8005a88:	08005b4f 	.word	0x08005b4f
 8005a8c:	08005b4f 	.word	0x08005b4f
 8005a90:	08005b4f 	.word	0x08005b4f
 8005a94:	08005b4f 	.word	0x08005b4f
 8005a98:	08005b4f 	.word	0x08005b4f
 8005a9c:	08005b4f 	.word	0x08005b4f
 8005aa0:	08005b1b 	.word	0x08005b1b
 8005aa4:	08005b4f 	.word	0x08005b4f
 8005aa8:	08005b4f 	.word	0x08005b4f
 8005aac:	08005b4f 	.word	0x08005b4f
 8005ab0:	08005b4f 	.word	0x08005b4f
 8005ab4:	08005b4f 	.word	0x08005b4f
 8005ab8:	08005b4f 	.word	0x08005b4f
 8005abc:	08005b4f 	.word	0x08005b4f
 8005ac0:	08005b4f 	.word	0x08005b4f
 8005ac4:	08005b4f 	.word	0x08005b4f
 8005ac8:	08005b4f 	.word	0x08005b4f
 8005acc:	08005b4f 	.word	0x08005b4f
 8005ad0:	08005b4f 	.word	0x08005b4f
 8005ad4:	08005b4f 	.word	0x08005b4f
 8005ad8:	08005b4f 	.word	0x08005b4f
 8005adc:	08005b4f 	.word	0x08005b4f
 8005ae0:	08005b41 	.word	0x08005b41
 8005ae4:	2b40      	cmp	r3, #64	@ 0x40
 8005ae6:	d02e      	beq.n	8005b46 <UART_SetConfig+0x8aa>
 8005ae8:	e031      	b.n	8005b4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aea:	f7fd fd2f 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8005aee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005af0:	e033      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af2:	f7fd fd41 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8005af6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005af8:	e02f      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe ff70 	bl	80049e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b08:	e027      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b0a:	f107 0318 	add.w	r3, r7, #24
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff f8bc 	bl	8004c8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b18:	e01f      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd0 <UART_SetConfig+0x934>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b26:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd0 <UART_SetConfig+0x934>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	4a24      	ldr	r2, [pc, #144]	@ (8005bc4 <UART_SetConfig+0x928>)
 8005b32:	fa22 f303 	lsr.w	r3, r2, r3
 8005b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b38:	e00f      	b.n	8005b5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b3a:	4b22      	ldr	r3, [pc, #136]	@ (8005bc4 <UART_SetConfig+0x928>)
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b3e:	e00c      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b40:	4b21      	ldr	r3, [pc, #132]	@ (8005bc8 <UART_SetConfig+0x92c>)
 8005b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b44:	e009      	b.n	8005b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b4c:	e005      	b.n	8005b5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80e7 	beq.w	8005d30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <UART_SetConfig+0x930>)
 8005b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b74:	005a      	lsls	r2, r3, #1
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	441a      	add	r2, r3
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	d916      	bls.n	8005bbc <UART_SetConfig+0x920>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b94:	d212      	bcs.n	8005bbc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f023 030f 	bic.w	r3, r3, #15
 8005b9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005bb8:	60da      	str	r2, [r3, #12]
 8005bba:	e0b9      	b.n	8005d30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005bc2:	e0b5      	b.n	8005d30 <UART_SetConfig+0xa94>
 8005bc4:	03d09000 	.word	0x03d09000
 8005bc8:	003d0900 	.word	0x003d0900
 8005bcc:	08006b2c 	.word	0x08006b2c
 8005bd0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bd4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	dc49      	bgt.n	8005c70 <UART_SetConfig+0x9d4>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	db7c      	blt.n	8005cda <UART_SetConfig+0xa3e>
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d87a      	bhi.n	8005cda <UART_SetConfig+0xa3e>
 8005be4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <UART_SetConfig+0x950>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c77 	.word	0x08005c77
 8005bf0:	08005c7f 	.word	0x08005c7f
 8005bf4:	08005cdb 	.word	0x08005cdb
 8005bf8:	08005cdb 	.word	0x08005cdb
 8005bfc:	08005c87 	.word	0x08005c87
 8005c00:	08005cdb 	.word	0x08005cdb
 8005c04:	08005cdb 	.word	0x08005cdb
 8005c08:	08005cdb 	.word	0x08005cdb
 8005c0c:	08005c97 	.word	0x08005c97
 8005c10:	08005cdb 	.word	0x08005cdb
 8005c14:	08005cdb 	.word	0x08005cdb
 8005c18:	08005cdb 	.word	0x08005cdb
 8005c1c:	08005cdb 	.word	0x08005cdb
 8005c20:	08005cdb 	.word	0x08005cdb
 8005c24:	08005cdb 	.word	0x08005cdb
 8005c28:	08005cdb 	.word	0x08005cdb
 8005c2c:	08005ca7 	.word	0x08005ca7
 8005c30:	08005cdb 	.word	0x08005cdb
 8005c34:	08005cdb 	.word	0x08005cdb
 8005c38:	08005cdb 	.word	0x08005cdb
 8005c3c:	08005cdb 	.word	0x08005cdb
 8005c40:	08005cdb 	.word	0x08005cdb
 8005c44:	08005cdb 	.word	0x08005cdb
 8005c48:	08005cdb 	.word	0x08005cdb
 8005c4c:	08005cdb 	.word	0x08005cdb
 8005c50:	08005cdb 	.word	0x08005cdb
 8005c54:	08005cdb 	.word	0x08005cdb
 8005c58:	08005cdb 	.word	0x08005cdb
 8005c5c:	08005cdb 	.word	0x08005cdb
 8005c60:	08005cdb 	.word	0x08005cdb
 8005c64:	08005cdb 	.word	0x08005cdb
 8005c68:	08005cdb 	.word	0x08005cdb
 8005c6c:	08005ccd 	.word	0x08005ccd
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	d02e      	beq.n	8005cd2 <UART_SetConfig+0xa36>
 8005c74:	e031      	b.n	8005cda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c76:	f7fd fc69 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8005c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c7c:	e033      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c7e:	f7fd fc7b 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8005c82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c84:	e02f      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe feaa 	bl	80049e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c94:	e027      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c96:	f107 0318 	add.w	r3, r7, #24
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fff6 	bl	8004c8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca4:	e01f      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d5c <UART_SetConfig+0xac0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8005d5c <UART_SetConfig+0xac0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	08db      	lsrs	r3, r3, #3
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	4a28      	ldr	r2, [pc, #160]	@ (8005d60 <UART_SetConfig+0xac4>)
 8005cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cc4:	e00f      	b.n	8005ce6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005cc6:	4b26      	ldr	r3, [pc, #152]	@ (8005d60 <UART_SetConfig+0xac4>)
 8005cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cca:	e00c      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ccc:	4b25      	ldr	r3, [pc, #148]	@ (8005d64 <UART_SetConfig+0xac8>)
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd0:	e009      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd8:	e005      	b.n	8005ce6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ce4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d021      	beq.n	8005d30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d68 <UART_SetConfig+0xacc>)
 8005cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	441a      	add	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d909      	bls.n	8005d2a <UART_SetConfig+0xa8e>
 8005d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d1c:	d205      	bcs.n	8005d2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e002      	b.n	8005d30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2200      	movs	r2, #0
 8005d44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005d4c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3748      	adds	r7, #72	@ 0x48
 8005d54:	46bd      	mov	sp, r7
 8005d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d5a:	bf00      	nop
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	03d09000 	.word	0x03d09000
 8005d64:	003d0900 	.word	0x003d0900
 8005d68:	08006b2c 	.word	0x08006b2c

08005d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e6a:	d10a      	bne.n	8005e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b098      	sub	sp, #96	@ 0x60
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ec0:	f7fb fa5e 	bl	8001380 <HAL_GetTick>
 8005ec4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d12f      	bne.n	8005f34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005edc:	2200      	movs	r2, #0
 8005ede:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f88e 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d022      	beq.n	8005f34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e063      	b.n	8005ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d149      	bne.n	8005fd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f857 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d03c      	beq.n	8005fd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	623b      	str	r3, [r7, #32]
   return(result);
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fae:	61fa      	str	r2, [r7, #28]
 8005fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	617b      	str	r3, [r7, #20]
   return(result);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e012      	b.n	8005ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3758      	adds	r7, #88	@ 0x58
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	4613      	mov	r3, r2
 8006012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006014:	e04f      	b.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800601c:	d04b      	beq.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601e:	f7fb f9af 	bl	8001380 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <UART_WaitOnFlagUntilTimeout+0x30>
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e04e      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d037      	beq.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b80      	cmp	r3, #128	@ 0x80
 800604a:	d034      	beq.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b40      	cmp	r3, #64	@ 0x40
 8006050:	d031      	beq.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b08      	cmp	r3, #8
 800605e:	d110      	bne.n	8006082 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2208      	movs	r2, #8
 8006066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f839 	bl	80060e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2208      	movs	r2, #8
 8006072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e029      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800608c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006090:	d111      	bne.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800609a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f81f 	bl	80060e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e00f      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4013      	ands	r3, r2
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	bf0c      	ite	eq
 80060c6:	2301      	moveq	r3, #1
 80060c8:	2300      	movne	r3, #0
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d0a0      	beq.n	8006016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b095      	sub	sp, #84	@ 0x54
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006106:	643b      	str	r3, [r7, #64]	@ 0x40
 8006108:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800610c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e6      	bne.n	80060e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	61fb      	str	r3, [r7, #28]
   return(result);
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	4b1e      	ldr	r3, [pc, #120]	@ (80061a8 <UART_EndRxTransfer+0xc8>)
 800612e:	4013      	ands	r3, r2
 8006130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800613a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e5      	bne.n	800611a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006152:	2b01      	cmp	r3, #1
 8006154:	d118      	bne.n	8006188 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	60bb      	str	r3, [r7, #8]
   return(result);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f023 0310 	bic.w	r3, r3, #16
 800616a:	647b      	str	r3, [r7, #68]	@ 0x44
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	6979      	ldr	r1, [r7, #20]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	613b      	str	r3, [r7, #16]
   return(result);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e6      	bne.n	8006156 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800619c:	bf00      	nop
 800619e:	3754      	adds	r7, #84	@ 0x54
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	effffffe 	.word	0xeffffffe

080061ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80061be:	2302      	movs	r3, #2
 80061c0:	e027      	b.n	8006212 <HAL_UARTEx_DisableFifoMode+0x66>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2224      	movs	r2, #36	@ 0x24
 80061ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006232:	2302      	movs	r3, #2
 8006234:	e02d      	b.n	8006292 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2224      	movs	r2, #36	@ 0x24
 8006242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f850 	bl	8006318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e02d      	b.n	800630e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2224      	movs	r2, #36	@ 0x24
 80062be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f812 	bl	8006318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006324:	2b00      	cmp	r3, #0
 8006326:	d108      	bne.n	800633a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006338:	e031      	b.n	800639e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800633a:	2310      	movs	r3, #16
 800633c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800633e:	2310      	movs	r3, #16
 8006340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	0e5b      	lsrs	r3, r3, #25
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	0f5b      	lsrs	r3, r3, #29
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	7b3a      	ldrb	r2, [r7, #12]
 8006366:	4911      	ldr	r1, [pc, #68]	@ (80063ac <UARTEx_SetNbDataToProcess+0x94>)
 8006368:	5c8a      	ldrb	r2, [r1, r2]
 800636a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800636e:	7b3a      	ldrb	r2, [r7, #12]
 8006370:	490f      	ldr	r1, [pc, #60]	@ (80063b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006372:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006374:	fb93 f3f2 	sdiv	r3, r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	7b7a      	ldrb	r2, [r7, #13]
 8006384:	4909      	ldr	r1, [pc, #36]	@ (80063ac <UARTEx_SetNbDataToProcess+0x94>)
 8006386:	5c8a      	ldrb	r2, [r1, r2]
 8006388:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800638c:	7b7a      	ldrb	r2, [r7, #13]
 800638e:	4908      	ldr	r1, [pc, #32]	@ (80063b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006390:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006392:	fb93 f3f2 	sdiv	r3, r3, r2
 8006396:	b29a      	uxth	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800639e:	bf00      	nop
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	08006b44 	.word	0x08006b44
 80063b0:	08006b4c 	.word	0x08006b4c

080063b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063b4:	b084      	sub	sp, #16
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	f107 001c 	add.w	r0, r7, #28
 80063c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d121      	bne.n	8006412 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	4b2c      	ldr	r3, [pc, #176]	@ (8006490 <USB_CoreInit+0xdc>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d105      	bne.n	8006406 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 faaa 	bl	8006960 <USB_CoreReset>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]
 8006410:	e01b      	b.n	800644a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa9e 	bl	8006960 <USB_CoreReset>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006428:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800642c:	2b00      	cmp	r3, #0
 800642e:	d106      	bne.n	800643e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006434:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	639a      	str	r2, [r3, #56]	@ 0x38
 800643c:	e005      	b.n	800644a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006442:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800644a:	7fbb      	ldrb	r3, [r7, #30]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d116      	bne.n	800647e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006454:	b29a      	uxth	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800645e:	4b0d      	ldr	r3, [pc, #52]	@ (8006494 <USB_CoreInit+0xe0>)
 8006460:	4313      	orrs	r3, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f043 0206 	orr.w	r2, r3, #6
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800648a:	b004      	add	sp, #16
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	ffbdffbf 	.word	0xffbdffbf
 8006494:	03ee0000 	.word	0x03ee0000

08006498 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f023 0201 	bic.w	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d115      	bne.n	8006508 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064e8:	200a      	movs	r0, #10
 80064ea:	f7fa ff55 	bl	8001398 <HAL_Delay>
      ms += 10U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	330a      	adds	r3, #10
 80064f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fa25 	bl	8006944 <USB_GetMode>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d01e      	beq.n	800653e <USB_SetCurrentMode+0x84>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2bc7      	cmp	r3, #199	@ 0xc7
 8006504:	d9f0      	bls.n	80064e8 <USB_SetCurrentMode+0x2e>
 8006506:	e01a      	b.n	800653e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d115      	bne.n	800653a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800651a:	200a      	movs	r0, #10
 800651c:	f7fa ff3c 	bl	8001398 <HAL_Delay>
      ms += 10U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	330a      	adds	r3, #10
 8006524:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa0c 	bl	8006944 <USB_GetMode>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <USB_SetCurrentMode+0x84>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2bc7      	cmp	r3, #199	@ 0xc7
 8006536:	d9f0      	bls.n	800651a <USB_SetCurrentMode+0x60>
 8006538:	e001      	b.n	800653e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e005      	b.n	800654a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2bc8      	cmp	r3, #200	@ 0xc8
 8006542:	d101      	bne.n	8006548 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006554:	b084      	sub	sp, #16
 8006556:	b580      	push	{r7, lr}
 8006558:	b086      	sub	sp, #24
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	e009      	b.n	8006588 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	3340      	adds	r3, #64	@ 0x40
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	2200      	movs	r2, #0
 8006580:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	3301      	adds	r3, #1
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b0e      	cmp	r3, #14
 800658c:	d9f2      	bls.n	8006574 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800658e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006592:	2b00      	cmp	r3, #0
 8006594:	d11c      	bne.n	80065d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065a4:	f043 0302 	orr.w	r3, r3, #2
 80065a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e005      	b.n	80065dc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065e2:	461a      	mov	r2, r3
 80065e4:	2300      	movs	r3, #0
 80065e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10d      	bne.n	800660c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065f8:	2100      	movs	r1, #0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f968 	bl	80068d0 <USB_SetDevSpeed>
 8006600:	e008      	b.n	8006614 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006602:	2101      	movs	r1, #1
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f963 	bl	80068d0 <USB_SetDevSpeed>
 800660a:	e003      	b.n	8006614 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800660c:	2103      	movs	r1, #3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f95e 	bl	80068d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006614:	2110      	movs	r1, #16
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f8fa 	bl	8006810 <USB_FlushTxFifo>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f924 	bl	8006874 <USB_FlushRxFifo>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663c:	461a      	mov	r2, r3
 800663e:	2300      	movs	r3, #0
 8006640:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006648:	461a      	mov	r2, r3
 800664a:	2300      	movs	r3, #0
 800664c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006654:	461a      	mov	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	e043      	b.n	80066e8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006672:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006676:	d118      	bne.n	80066aa <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668a:	461a      	mov	r2, r3
 800668c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e013      	b.n	80066bc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a0:	461a      	mov	r2, r3
 80066a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e008      	b.n	80066bc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b6:	461a      	mov	r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c8:	461a      	mov	r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066da:	461a      	mov	r2, r3
 80066dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	3301      	adds	r3, #1
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066ec:	461a      	mov	r2, r3
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d3b5      	bcc.n	8006660 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066f4:	2300      	movs	r3, #0
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	e043      	b.n	8006782 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800670c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006710:	d118      	bne.n	8006744 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006724:	461a      	mov	r2, r3
 8006726:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	e013      	b.n	8006756 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673a:	461a      	mov	r2, r3
 800673c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	e008      	b.n	8006756 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006750:	461a      	mov	r2, r3
 8006752:	2300      	movs	r3, #0
 8006754:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006762:	461a      	mov	r2, r3
 8006764:	2300      	movs	r3, #0
 8006766:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006774:	461a      	mov	r2, r3
 8006776:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800677a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	3301      	adds	r3, #1
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006786:	461a      	mov	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4293      	cmp	r3, r2
 800678c:	d3b5      	bcc.n	80066fa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800679c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80067ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d105      	bne.n	80067c4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f043 0210 	orr.w	r2, r3, #16
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006808 <USB_DevInit+0x2b4>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d005      	beq.n	80067e4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	f043 0208 	orr.w	r2, r3, #8
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d105      	bne.n	80067f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699a      	ldr	r2, [r3, #24]
 80067f0:	4b06      	ldr	r3, [pc, #24]	@ (800680c <USB_DevInit+0x2b8>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006804:	b004      	add	sp, #16
 8006806:	4770      	bx	lr
 8006808:	803c3800 	.word	0x803c3800
 800680c:	40000004 	.word	0x40000004

08006810 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3301      	adds	r3, #1
 8006822:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800682a:	d901      	bls.n	8006830 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e01b      	b.n	8006868 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	daf2      	bge.n	800681e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	019b      	lsls	r3, r3, #6
 8006840:	f043 0220 	orr.w	r2, r3, #32
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006854:	d901      	bls.n	800685a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e006      	b.n	8006868 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b20      	cmp	r3, #32
 8006864:	d0f0      	beq.n	8006848 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800688c:	d901      	bls.n	8006892 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e018      	b.n	80068c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	daf2      	bge.n	8006880 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2210      	movs	r2, #16
 80068a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068b0:	d901      	bls.n	80068b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e006      	b.n	80068c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b10      	cmp	r3, #16
 80068c0:	d0f0      	beq.n	80068a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800691c:	f023 0303 	bic.w	r3, r3, #3
 8006920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006930:	f043 0302 	orr.w	r3, r3, #2
 8006934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f003 0301 	and.w	r3, r3, #1
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006978:	d901      	bls.n	800697e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e01b      	b.n	80069b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	daf2      	bge.n	800696c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f043 0201 	orr.w	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3301      	adds	r3, #1
 800699a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069a2:	d901      	bls.n	80069a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e006      	b.n	80069b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d0f0      	beq.n	8006996 <USB_CoreReset+0x36>

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <_ZdlPvj>:
 80069c2:	f000 b800 	b.w	80069c6 <_ZdlPv>

080069c6 <_ZdlPv>:
 80069c6:	f000 b801 	b.w	80069cc <free>
	...

080069cc <free>:
 80069cc:	4b02      	ldr	r3, [pc, #8]	@ (80069d8 <free+0xc>)
 80069ce:	4601      	mov	r1, r0
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	f000 b83d 	b.w	8006a50 <_free_r>
 80069d6:	bf00      	nop
 80069d8:	24000010 	.word	0x24000010

080069dc <__malloc_lock>:
 80069dc:	4801      	ldr	r0, [pc, #4]	@ (80069e4 <__malloc_lock+0x8>)
 80069de:	f000 b835 	b.w	8006a4c <__retarget_lock_acquire_recursive>
 80069e2:	bf00      	nop
 80069e4:	240008e4 	.word	0x240008e4

080069e8 <__malloc_unlock>:
 80069e8:	4801      	ldr	r0, [pc, #4]	@ (80069f0 <__malloc_unlock+0x8>)
 80069ea:	f000 b830 	b.w	8006a4e <__retarget_lock_release_recursive>
 80069ee:	bf00      	nop
 80069f0:	240008e4 	.word	0x240008e4

080069f4 <memset>:
 80069f4:	4402      	add	r2, r0
 80069f6:	4603      	mov	r3, r0
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d100      	bne.n	80069fe <memset+0xa>
 80069fc:	4770      	bx	lr
 80069fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006a02:	e7f9      	b.n	80069f8 <memset+0x4>

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	4d0d      	ldr	r5, [pc, #52]	@ (8006a3c <__libc_init_array+0x38>)
 8006a08:	4c0d      	ldr	r4, [pc, #52]	@ (8006a40 <__libc_init_array+0x3c>)
 8006a0a:	1b64      	subs	r4, r4, r5
 8006a0c:	10a4      	asrs	r4, r4, #2
 8006a0e:	2600      	movs	r6, #0
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	4d0b      	ldr	r5, [pc, #44]	@ (8006a44 <__libc_init_array+0x40>)
 8006a16:	4c0c      	ldr	r4, [pc, #48]	@ (8006a48 <__libc_init_array+0x44>)
 8006a18:	f000 f864 	bl	8006ae4 <_init>
 8006a1c:	1b64      	subs	r4, r4, r5
 8006a1e:	10a4      	asrs	r4, r4, #2
 8006a20:	2600      	movs	r6, #0
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	08006b5c 	.word	0x08006b5c
 8006a40:	08006b5c 	.word	0x08006b5c
 8006a44:	08006b5c 	.word	0x08006b5c
 8006a48:	08006b60 	.word	0x08006b60

08006a4c <__retarget_lock_acquire_recursive>:
 8006a4c:	4770      	bx	lr

08006a4e <__retarget_lock_release_recursive>:
 8006a4e:	4770      	bx	lr

08006a50 <_free_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4605      	mov	r5, r0
 8006a54:	2900      	cmp	r1, #0
 8006a56:	d041      	beq.n	8006adc <_free_r+0x8c>
 8006a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a5c:	1f0c      	subs	r4, r1, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bfb8      	it	lt
 8006a62:	18e4      	addlt	r4, r4, r3
 8006a64:	f7ff ffba 	bl	80069dc <__malloc_lock>
 8006a68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae0 <_free_r+0x90>)
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	b933      	cbnz	r3, 8006a7c <_free_r+0x2c>
 8006a6e:	6063      	str	r3, [r4, #4]
 8006a70:	6014      	str	r4, [r2, #0]
 8006a72:	4628      	mov	r0, r5
 8006a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a78:	f7ff bfb6 	b.w	80069e8 <__malloc_unlock>
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	d908      	bls.n	8006a92 <_free_r+0x42>
 8006a80:	6820      	ldr	r0, [r4, #0]
 8006a82:	1821      	adds	r1, r4, r0
 8006a84:	428b      	cmp	r3, r1
 8006a86:	bf01      	itttt	eq
 8006a88:	6819      	ldreq	r1, [r3, #0]
 8006a8a:	685b      	ldreq	r3, [r3, #4]
 8006a8c:	1809      	addeq	r1, r1, r0
 8006a8e:	6021      	streq	r1, [r4, #0]
 8006a90:	e7ed      	b.n	8006a6e <_free_r+0x1e>
 8006a92:	461a      	mov	r2, r3
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	b10b      	cbz	r3, 8006a9c <_free_r+0x4c>
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	d9fa      	bls.n	8006a92 <_free_r+0x42>
 8006a9c:	6811      	ldr	r1, [r2, #0]
 8006a9e:	1850      	adds	r0, r2, r1
 8006aa0:	42a0      	cmp	r0, r4
 8006aa2:	d10b      	bne.n	8006abc <_free_r+0x6c>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	4401      	add	r1, r0
 8006aa8:	1850      	adds	r0, r2, r1
 8006aaa:	4283      	cmp	r3, r0
 8006aac:	6011      	str	r1, [r2, #0]
 8006aae:	d1e0      	bne.n	8006a72 <_free_r+0x22>
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	6053      	str	r3, [r2, #4]
 8006ab6:	4408      	add	r0, r1
 8006ab8:	6010      	str	r0, [r2, #0]
 8006aba:	e7da      	b.n	8006a72 <_free_r+0x22>
 8006abc:	d902      	bls.n	8006ac4 <_free_r+0x74>
 8006abe:	230c      	movs	r3, #12
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	e7d6      	b.n	8006a72 <_free_r+0x22>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	1821      	adds	r1, r4, r0
 8006ac8:	428b      	cmp	r3, r1
 8006aca:	bf04      	itt	eq
 8006acc:	6819      	ldreq	r1, [r3, #0]
 8006ace:	685b      	ldreq	r3, [r3, #4]
 8006ad0:	6063      	str	r3, [r4, #4]
 8006ad2:	bf04      	itt	eq
 8006ad4:	1809      	addeq	r1, r1, r0
 8006ad6:	6021      	streq	r1, [r4, #0]
 8006ad8:	6054      	str	r4, [r2, #4]
 8006ada:	e7ca      	b.n	8006a72 <_free_r+0x22>
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	240007a8 	.word	0x240007a8

08006ae4 <_init>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	bf00      	nop
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr

08006af0 <_fini>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	bf00      	nop
 8006af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af6:	bc08      	pop	{r3}
 8006af8:	469e      	mov	lr, r3
 8006afa:	4770      	bx	lr
